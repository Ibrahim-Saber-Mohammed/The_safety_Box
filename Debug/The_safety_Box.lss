
The_safety_Box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005b76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e4  00800060  00005b76  00005c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800244  00800244  00005dee  2**0
                  ALLOC
  3 .stab         00003900  00000000  00000000  00005df0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001924  00000000  00000000  000096f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  0000b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  0000e08a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  0000f3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000106e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  000108a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  00010be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00012dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__vector_10>
      2c:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	fb e5       	ldi	r31, 0x5B	; 91
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 34       	cpi	r26, 0x48	; 72
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <main>
      8a:	0c 94 b9 2d 	jmp	0x5b72	; 0x5b72 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	8c 5f       	subi	r24, 0xFC	; 252
     2e6:	9e 4f       	sbci	r25, 0xFE	; 254
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	8c 5f       	subi	r24, 0xFC	; 252
     582:	9e 4f       	sbci	r25, 0xFE	; 254
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	8c 5f       	subi	r24, 0xFC	; 252
     a48:	9e 4f       	sbci	r25, 0xFE	; 254
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	8c 5f       	subi	r24, 0xFC	; 252
    1000:	9e 4f       	sbci	r25, 0xFE	; 254
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	8c 5f       	subi	r24, 0xFC	; 252
    1226:	9e 4f       	sbci	r25, 0xFE	; 254
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	8c 5f       	subi	r24, 0xFC	; 252
    1608:	9e 4f       	sbci	r25, 0xFE	; 254
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	ac ef       	ldi	r26, 0xFC	; 252
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 82 2d 	jmp	0x5b04	; 0x5b04 <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	8c ef       	ldi	r24, 0xFC	; 252
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 9e 2d 	jmp	0x5b3c	; 0x5b3c <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 8e 2d 	jmp	0x5b1c	; 0x5b1c <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 aa 2d 	jmp	0x5b54	; 0x5b54 <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 92 2d 	jmp	0x5b24	; 0x5b24 <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 ae 2d 	jmp	0x5b5c	; 0x5b5c <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <TIM0_u8SetConfigurations>:


void TIM0_voidInit(void);

u8 TIM0_u8SetConfigurations(const TIM0_Config_t * Copy_structTimerConfigurations)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	00 d0       	rcall	.+0      	; 0x2614 <TIM0_u8SetConfigurations+0x6>
    2614:	0f 92       	push	r0
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	9b 83       	std	Y+3, r25	; 0x03
    261c:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_ErrorState = STD_OK;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_structTimerConfigurations != NULL)
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	09 f4       	brne	.+2      	; 0x262c <TIM0_u8SetConfigurations+0x1e>
    262a:	41 c0       	rjmp	.+130    	; 0x26ae <TIM0_u8SetConfigurations+0xa0>
	{
		TCCR0 |= Copy_structTimerConfigurations->TIMER0_Mode | Copy_structTimerConfigurations->TIMER0_CLOCK_SELECT | Copy_structTimerConfigurations->TIMER0_COMPARE_OUTPUT;
    262c:	a3 e5       	ldi	r26, 0x53	; 83
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e3 e5       	ldi	r30, 0x53	; 83
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	20 81       	ld	r18, Z
    2636:	ea 81       	ldd	r30, Y+2	; 0x02
    2638:	fb 81       	ldd	r31, Y+3	; 0x03
    263a:	90 81       	ld	r25, Z
    263c:	ea 81       	ldd	r30, Y+2	; 0x02
    263e:	fb 81       	ldd	r31, Y+3	; 0x03
    2640:	81 81       	ldd	r24, Z+1	; 0x01
    2642:	98 2b       	or	r25, r24
    2644:	ea 81       	ldd	r30, Y+2	; 0x02
    2646:	fb 81       	ldd	r31, Y+3	; 0x03
    2648:	84 81       	ldd	r24, Z+4	; 0x04
    264a:	89 2b       	or	r24, r25
    264c:	82 2b       	or	r24, r18
    264e:	8c 93       	st	X, r24
		TIMSK |= Copy_structTimerConfigurations->TIMER0_Interrupt | Copy_structTimerConfigurations->TIMER_COMP_INTERRUPT;
    2650:	a9 e5       	ldi	r26, 0x59	; 89
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e9 e5       	ldi	r30, 0x59	; 89
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	20 81       	ld	r18, Z
    265a:	ea 81       	ldd	r30, Y+2	; 0x02
    265c:	fb 81       	ldd	r31, Y+3	; 0x03
    265e:	92 81       	ldd	r25, Z+2	; 0x02
    2660:	ea 81       	ldd	r30, Y+2	; 0x02
    2662:	fb 81       	ldd	r31, Y+3	; 0x03
    2664:	83 81       	ldd	r24, Z+3	; 0x03
    2666:	89 2b       	or	r24, r25
    2668:	82 2b       	or	r24, r18
    266a:	8c 93       	st	X, r24

		if (Copy_structTimerConfigurations->OVF_CALLBACK != NULL)
    266c:	ea 81       	ldd	r30, Y+2	; 0x02
    266e:	fb 81       	ldd	r31, Y+3	; 0x03
    2670:	85 81       	ldd	r24, Z+5	; 0x05
    2672:	96 81       	ldd	r25, Z+6	; 0x06
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	49 f0       	breq	.+18     	; 0x268a <TIM0_u8SetConfigurations+0x7c>
		{
			TIMER0_OVF_CALLBACK = Copy_structTimerConfigurations->OVF_CALLBACK;
    2678:	ea 81       	ldd	r30, Y+2	; 0x02
    267a:	fb 81       	ldd	r31, Y+3	; 0x03
    267c:	85 81       	ldd	r24, Z+5	; 0x05
    267e:	96 81       	ldd	r25, Z+6	; 0x06
    2680:	90 93 45 02 	sts	0x0245, r25
    2684:	80 93 44 02 	sts	0x0244, r24
    2688:	01 c0       	rjmp	.+2      	; 0x268c <TIM0_u8SetConfigurations+0x7e>
		}
		else
		{
			LOC_ErrorState = STD_NOK;
    268a:	19 82       	std	Y+1, r1	; 0x01
		}
		if (Copy_structTimerConfigurations->COMP_CALLBACK != NULL)
    268c:	ea 81       	ldd	r30, Y+2	; 0x02
    268e:	fb 81       	ldd	r31, Y+3	; 0x03
    2690:	87 81       	ldd	r24, Z+7	; 0x07
    2692:	90 85       	ldd	r25, Z+8	; 0x08
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	49 f0       	breq	.+18     	; 0x26aa <TIM0_u8SetConfigurations+0x9c>
		{
			TIMER0_COMP_CALLBACK = Copy_structTimerConfigurations->COMP_CALLBACK;
    2698:	ea 81       	ldd	r30, Y+2	; 0x02
    269a:	fb 81       	ldd	r31, Y+3	; 0x03
    269c:	87 81       	ldd	r24, Z+7	; 0x07
    269e:	90 85       	ldd	r25, Z+8	; 0x08
    26a0:	90 93 47 02 	sts	0x0247, r25
    26a4:	80 93 46 02 	sts	0x0246, r24
    26a8:	03 c0       	rjmp	.+6      	; 0x26b0 <TIM0_u8SetConfigurations+0xa2>
		}
		else
		{
			LOC_ErrorState = STD_NOK;
    26aa:	19 82       	std	Y+1, r1	; 0x01
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <TIM0_u8SetConfigurations+0xa2>
		}
	}
	else
	{
		LOC_ErrorState = STD_NOK;
    26ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_ErrorState;
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <TIM0_u8Set_CompareRegister_Value>:

void TIM0_u8Set_CompareRegister_Value(u8 Copy_u8Counts)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	0f 92       	push	r0
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Counts;
    26ca:	ec e5       	ldi	r30, 0x5C	; 92
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	89 81       	ldd	r24, Y+1	; 0x01
    26d0:	80 83       	st	Z, r24
}
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <TIM0_u8Set_CounterRegister_Value>:
void TIM0_u8Set_CounterRegister_Value(u8 Copy_u8Counts)
{
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Counts;
    26e6:	e2 e5       	ldi	r30, 0x52	; 82
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	80 83       	st	Z, r24
}
    26ee:	0f 90       	pop	r0
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <TIM0_u8Get_CounterRegister_Value>:

u8 TIM0_u8Get_CounterRegister_Value(u8 * Copy_ptrData)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <TIM0_u8Get_CounterRegister_Value+0x6>
    26fc:	0f 92       	push	r0
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	9b 83       	std	Y+3, r25	; 0x03
    2704:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_ErrorState = STD_OK;
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_ptrData != NULL)
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	39 f0       	breq	.+14     	; 0x2720 <TIM0_u8Get_CounterRegister_Value+0x2a>
	{
		*Copy_ptrData = TCNT0;
    2712:	e2 e5       	ldi	r30, 0x52	; 82
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	ea 81       	ldd	r30, Y+2	; 0x02
    271a:	fb 81       	ldd	r31, Y+3	; 0x03
    271c:	80 83       	st	Z, r24
    271e:	01 c0       	rjmp	.+2      	; 0x2722 <TIM0_u8Get_CounterRegister_Value+0x2c>
	}
	else
	{
		LOC_ErrorState = STD_NOK;
    2720:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_ErrorState;
    2722:	89 81       	ldd	r24, Y+1	; 0x01
}
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <__vector_11>:

void __vector_11(void)
{
    2730:	1f 92       	push	r1
    2732:	0f 92       	push	r0
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	0f 92       	push	r0
    2738:	11 24       	eor	r1, r1
    273a:	2f 93       	push	r18
    273c:	3f 93       	push	r19
    273e:	4f 93       	push	r20
    2740:	5f 93       	push	r21
    2742:	6f 93       	push	r22
    2744:	7f 93       	push	r23
    2746:	8f 93       	push	r24
    2748:	9f 93       	push	r25
    274a:	af 93       	push	r26
    274c:	bf 93       	push	r27
    274e:	ef 93       	push	r30
    2750:	ff 93       	push	r31
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_OVF_CALLBACK != NULL)
    275a:	80 91 44 02 	lds	r24, 0x0244
    275e:	90 91 45 02 	lds	r25, 0x0245
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	29 f0       	breq	.+10     	; 0x2770 <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    2766:	e0 91 44 02 	lds	r30, 0x0244
    276a:	f0 91 45 02 	lds	r31, 0x0245
    276e:	09 95       	icall
	}
}
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	ff 91       	pop	r31
    2776:	ef 91       	pop	r30
    2778:	bf 91       	pop	r27
    277a:	af 91       	pop	r26
    277c:	9f 91       	pop	r25
    277e:	8f 91       	pop	r24
    2780:	7f 91       	pop	r23
    2782:	6f 91       	pop	r22
    2784:	5f 91       	pop	r21
    2786:	4f 91       	pop	r20
    2788:	3f 91       	pop	r19
    278a:	2f 91       	pop	r18
    278c:	0f 90       	pop	r0
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	0f 90       	pop	r0
    2792:	1f 90       	pop	r1
    2794:	18 95       	reti

00002796 <__vector_10>:
void __vector_10(void)
{
    2796:	1f 92       	push	r1
    2798:	0f 92       	push	r0
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	0f 92       	push	r0
    279e:	11 24       	eor	r1, r1
    27a0:	2f 93       	push	r18
    27a2:	3f 93       	push	r19
    27a4:	4f 93       	push	r20
    27a6:	5f 93       	push	r21
    27a8:	6f 93       	push	r22
    27aa:	7f 93       	push	r23
    27ac:	8f 93       	push	r24
    27ae:	9f 93       	push	r25
    27b0:	af 93       	push	r26
    27b2:	bf 93       	push	r27
    27b4:	ef 93       	push	r30
    27b6:	ff 93       	push	r31
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
	if (TIMER0_COMP_CALLBACK != NULL)
    27c0:	80 91 46 02 	lds	r24, 0x0246
    27c4:	90 91 47 02 	lds	r25, 0x0247
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	29 f0       	breq	.+10     	; 0x27d6 <__vector_10+0x40>
	{
		TIMER0_COMP_CALLBACK();
    27cc:	e0 91 46 02 	lds	r30, 0x0246
    27d0:	f0 91 47 02 	lds	r31, 0x0247
    27d4:	09 95       	icall
	}
}
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	ff 91       	pop	r31
    27dc:	ef 91       	pop	r30
    27de:	bf 91       	pop	r27
    27e0:	af 91       	pop	r26
    27e2:	9f 91       	pop	r25
    27e4:	8f 91       	pop	r24
    27e6:	7f 91       	pop	r23
    27e8:	6f 91       	pop	r22
    27ea:	5f 91       	pop	r21
    27ec:	4f 91       	pop	r20
    27ee:	3f 91       	pop	r19
    27f0:	2f 91       	pop	r18
    27f2:	0f 90       	pop	r0
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	0f 90       	pop	r0
    27f8:	1f 90       	pop	r1
    27fa:	18 95       	reti

000027fc <SPI_u8SetMasterConfigs>:
#include "SPI_private.h"

void SPI_voidSPIInit(void);

u8 SPI_u8SetMasterConfigs(const SPI_MasterConfigs_t * Copy_structSpiConfigurations)
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	00 d0       	rcall	.+0      	; 0x2802 <SPI_u8SetMasterConfigs+0x6>
    2802:	0f 92       	push	r0
    2804:	cd b7       	in	r28, 0x3d	; 61
    2806:	de b7       	in	r29, 0x3e	; 62
    2808:	9b 83       	std	Y+3, r25	; 0x03
    280a:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loacal_u8ErrorState = STD_OK;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_structSpiConfigurations != NULL )
    2810:	8a 81       	ldd	r24, Y+2	; 0x02
    2812:	9b 81       	ldd	r25, Y+3	; 0x03
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	09 f4       	brne	.+2      	; 0x281a <SPI_u8SetMasterConfigs+0x1e>
    2818:	4c c0       	rjmp	.+152    	; 0x28b2 <SPI_u8SetMasterConfigs+0xb6>
	{
		SPCR = 0x00;
    281a:	ed e2       	ldi	r30, 0x2D	; 45
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	10 82       	st	Z, r1
		SPSR = 0x00;
    2820:	ee e2       	ldi	r30, 0x2E	; 46
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	10 82       	st	Z, r1
		/* Disable SPI */
		CLR_BIT(SPCR , SPE);
    2826:	ad e2       	ldi	r26, 0x2D	; 45
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ed e2       	ldi	r30, 0x2D	; 45
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8f 7b       	andi	r24, 0xBF	; 191
    2832:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Mode |Copy_structSpiConfigurations->Spi_ClockPhase | Copy_structSpiConfigurations->Spi_ClockPolarity | Copy_structSpiConfigurations->Spi_DataOrder | Copy_structSpiConfigurations->Spi_Interrupt;
    2834:	ad e2       	ldi	r26, 0x2D	; 45
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ed e2       	ldi	r30, 0x2D	; 45
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	20 81       	ld	r18, Z
    283e:	ea 81       	ldd	r30, Y+2	; 0x02
    2840:	fb 81       	ldd	r31, Y+3	; 0x03
    2842:	90 81       	ld	r25, Z
    2844:	ea 81       	ldd	r30, Y+2	; 0x02
    2846:	fb 81       	ldd	r31, Y+3	; 0x03
    2848:	83 81       	ldd	r24, Z+3	; 0x03
    284a:	98 2b       	or	r25, r24
    284c:	ea 81       	ldd	r30, Y+2	; 0x02
    284e:	fb 81       	ldd	r31, Y+3	; 0x03
    2850:	82 81       	ldd	r24, Z+2	; 0x02
    2852:	98 2b       	or	r25, r24
    2854:	ea 81       	ldd	r30, Y+2	; 0x02
    2856:	fb 81       	ldd	r31, Y+3	; 0x03
    2858:	84 81       	ldd	r24, Z+4	; 0x04
    285a:	98 2b       	or	r25, r24
    285c:	ea 81       	ldd	r30, Y+2	; 0x02
    285e:	fb 81       	ldd	r31, Y+3	; 0x03
    2860:	85 81       	ldd	r24, Z+5	; 0x05
    2862:	89 2b       	or	r24, r25
    2864:	82 2b       	or	r24, r18
    2866:	8c 93       	st	X, r24
		SPCR |= ( ( Copy_structSpiConfigurations->Spi_Speed ) & 0x03);
    2868:	ad e2       	ldi	r26, 0x2D	; 45
    286a:	b0 e0       	ldi	r27, 0x00	; 0
    286c:	ed e2       	ldi	r30, 0x2D	; 45
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	98 2f       	mov	r25, r24
    2874:	ea 81       	ldd	r30, Y+2	; 0x02
    2876:	fb 81       	ldd	r31, Y+3	; 0x03
    2878:	81 81       	ldd	r24, Z+1	; 0x01
    287a:	83 70       	andi	r24, 0x03	; 3
    287c:	89 2b       	or	r24, r25
    287e:	8c 93       	st	X, r24
		SPSR |=	GET_BIT(Copy_structSpiConfigurations->Spi_Speed , 2) ;
    2880:	ae e2       	ldi	r26, 0x2E	; 46
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	ee e2       	ldi	r30, 0x2E	; 46
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	98 2f       	mov	r25, r24
    288c:	ea 81       	ldd	r30, Y+2	; 0x02
    288e:	fb 81       	ldd	r31, Y+3	; 0x03
    2890:	81 81       	ldd	r24, Z+1	; 0x01
    2892:	86 95       	lsr	r24
    2894:	86 95       	lsr	r24
    2896:	81 70       	andi	r24, 0x01	; 1
    2898:	89 2b       	or	r24, r25
    289a:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Spi_State;
    289c:	ad e2       	ldi	r26, 0x2D	; 45
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	ed e2       	ldi	r30, 0x2D	; 45
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	90 81       	ld	r25, Z
    28a6:	ea 81       	ldd	r30, Y+2	; 0x02
    28a8:	fb 81       	ldd	r31, Y+3	; 0x03
    28aa:	86 81       	ldd	r24, Z+6	; 0x06
    28ac:	89 2b       	or	r24, r25
    28ae:	8c 93       	st	X, r24
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <SPI_u8SetMasterConfigs+0xb8>
	}
	else
	{
		Loacal_u8ErrorState = STD_NOK;
    28b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return (Loacal_u8ErrorState);
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <SPI_u8SetSlaveConfigs>:

u8 SPI_u8SetSlaveConfigs(const SPI_SlaveConfigs_t * Copy_structSpiConfigurations)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	00 d0       	rcall	.+0      	; 0x28c8 <SPI_u8SetSlaveConfigs+0x6>
    28c8:	0f 92       	push	r0
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
    28ce:	9b 83       	std	Y+3, r25	; 0x03
    28d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loacal_u8ErrorState = STD_OK;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	89 83       	std	Y+1, r24	; 0x01
	if( Copy_structSpiConfigurations != NULL )
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	79 f1       	breq	.+94     	; 0x293c <SPI_u8SetSlaveConfigs+0x7a>
	{
		SPCR = 0x00;
    28de:	ed e2       	ldi	r30, 0x2D	; 45
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	10 82       	st	Z, r1
		/* Disable SPI */
		CLR_BIT(SPCR , SPE);
    28e4:	ad e2       	ldi	r26, 0x2D	; 45
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	ed e2       	ldi	r30, 0x2D	; 45
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	8f 7b       	andi	r24, 0xBF	; 191
    28f0:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Mode |Copy_structSpiConfigurations->Spi_ClockPhase | Copy_structSpiConfigurations->Spi_ClockPolarity | Copy_structSpiConfigurations->Spi_DataOrder | Copy_structSpiConfigurations->Spi_Interrupt;
    28f2:	ad e2       	ldi	r26, 0x2D	; 45
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ed e2       	ldi	r30, 0x2D	; 45
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	20 81       	ld	r18, Z
    28fc:	ea 81       	ldd	r30, Y+2	; 0x02
    28fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2900:	90 81       	ld	r25, Z
    2902:	ea 81       	ldd	r30, Y+2	; 0x02
    2904:	fb 81       	ldd	r31, Y+3	; 0x03
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	98 2b       	or	r25, r24
    290a:	ea 81       	ldd	r30, Y+2	; 0x02
    290c:	fb 81       	ldd	r31, Y+3	; 0x03
    290e:	81 81       	ldd	r24, Z+1	; 0x01
    2910:	98 2b       	or	r25, r24
    2912:	ea 81       	ldd	r30, Y+2	; 0x02
    2914:	fb 81       	ldd	r31, Y+3	; 0x03
    2916:	83 81       	ldd	r24, Z+3	; 0x03
    2918:	98 2b       	or	r25, r24
    291a:	ea 81       	ldd	r30, Y+2	; 0x02
    291c:	fb 81       	ldd	r31, Y+3	; 0x03
    291e:	84 81       	ldd	r24, Z+4	; 0x04
    2920:	89 2b       	or	r24, r25
    2922:	82 2b       	or	r24, r18
    2924:	8c 93       	st	X, r24
		SPCR |= Copy_structSpiConfigurations->Spi_State;
    2926:	ad e2       	ldi	r26, 0x2D	; 45
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	ed e2       	ldi	r30, 0x2D	; 45
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	90 81       	ld	r25, Z
    2930:	ea 81       	ldd	r30, Y+2	; 0x02
    2932:	fb 81       	ldd	r31, Y+3	; 0x03
    2934:	85 81       	ldd	r24, Z+5	; 0x05
    2936:	89 2b       	or	r24, r25
    2938:	8c 93       	st	X, r24
    293a:	01 c0       	rjmp	.+2      	; 0x293e <SPI_u8SetSlaveConfigs+0x7c>
	}
	else
	{
		Loacal_u8ErrorState = STD_NOK;
    293c:	19 82       	std	Y+1, r1	; 0x01
	}
	return (Loacal_u8ErrorState);
    293e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <SPI_u8TransmitReceive>:
u8 SPI_u8TransmitReceive(u8 Copy_u8Data)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	0f 92       	push	r0
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	89 83       	std	Y+1, r24	; 0x01
//	u8 Local_u8ErrorState = STD_OK;

	SPDR = Copy_u8Data;
    2958:	ef e2       	ldi	r30, 0x2F	; 47
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	80 83       	st	Z, r24
	while( !(SPSR & (1<<SPIF)) );
    2960:	ee e2       	ldi	r30, 0x2E	; 46
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	88 23       	and	r24, r24
    2968:	dc f7       	brge	.-10     	; 0x2960 <SPI_u8TransmitReceive+0x14>
//	}
//	else
//	{
//		Local_u8ErrorState = STD_NOK;
//	}
	return SPDR;
    296a:	ef e2       	ldi	r30, 0x2F	; 47
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
}
    2970:	0f 90       	pop	r0
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIR_config.h"
#include "GIE_private.h"

void GIE_voidEnable(void)
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( SREG , GIE );
    2980:	af e5       	ldi	r26, 0x5F	; 95
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	ef e5       	ldi	r30, 0x5F	; 95
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	80 68       	ori	r24, 0x80	; 128
    298c:	8c 93       	st	X, r24
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( SREG , GIE );
    299c:	af e5       	ldi	r26, 0x5F	; 95
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	ef e5       	ldi	r30, 0x5F	; 95
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	8f 77       	andi	r24, 0x7F	; 127
    29a8:	8c 93       	st	X, r24
}
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <EEPROM_voidWriteByte>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_voidWriteByte	(u16 Copy_u16ByteAddress, u8 Copy_u8DataValue						)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <EEPROM_voidWriteByte+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	6b 83       	std	Y+3, r22	; 0x03
	/* wait for the EEPROM to be ready for the next Write  */
	while ( GET_BIT(EECR, EEWE) == 1);
    29c2:	ec e3       	ldi	r30, 0x3C	; 60
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	86 95       	lsr	r24
    29ca:	88 2f       	mov	r24, r24
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	81 70       	andi	r24, 0x01	; 1
    29d0:	90 70       	andi	r25, 0x00	; 0
    29d2:	88 23       	and	r24, r24
    29d4:	b1 f7       	brne	.-20     	; 0x29c2 <EEPROM_voidWriteByte+0x12>
	/* Set the address  */
	EEAR = (Copy_u16ByteAddress);
    29d6:	ee e3       	ldi	r30, 0x3E	; 62
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
	/* write the Data to the Data Register  */
	EEDR = Copy_u8DataValue;
    29e2:	ed e3       	ldi	r30, 0x3D	; 61
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	80 83       	st	Z, r24
	/* Write '1' to the EEMWE bit */
	asm("SBI 0x1C,2");
    29ea:	e2 9a       	sbi	0x1c, 2	; 28
	//EECR |= (1 << EEMWE); = //SET_BIT(EECR,EEMWE);

	/*Starting write operation*/
	/* Write '1' to the EEWE */
	asm("SBI 0x1C,1");
    29ec:	e1 9a       	sbi	0x1c, 1	; 28
	//EECR |= (1 << EEWE); = //SET_BIT(EECR,EEWE);

}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <EEPROM_voidWriteBlock>:

void EEPROM_voidWriteBlock	(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize, u8 * Copy_PtrData	)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	00 d0       	rcall	.+0      	; 0x2a00 <EEPROM_voidWriteBlock+0x6>
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <EEPROM_voidWriteBlock+0x8>
    2a02:	00 d0       	rcall	.+0      	; 0x2a04 <EEPROM_voidWriteBlock+0xa>
    2a04:	cd b7       	in	r28, 0x3d	; 61
    2a06:	de b7       	in	r29, 0x3e	; 62
    2a08:	9b 83       	std	Y+3, r25	; 0x03
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
    2a0c:	6c 83       	std	Y+4, r22	; 0x04
    2a0e:	5e 83       	std	Y+6, r21	; 0x06
    2a10:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOC_LoopIterartor = 0;
    2a12:	19 82       	std	Y+1, r1	; 0x01
	for(LOC_LoopIterartor = 0; LOC_LoopIterartor < Copy_u8BlockSize; LOC_LoopIterartor++)
    2a14:	19 82       	std	Y+1, r1	; 0x01
    2a16:	18 c0       	rjmp	.+48     	; 0x2a48 <EEPROM_voidWriteBlock+0x4e>
	{
		EEPROM_voidWriteByte( (Copy_u16ByteAddress + LOC_LoopIterartor), Copy_PtrData[LOC_LoopIterartor]);
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	9b 81       	ldd	r25, Y+3	; 0x03
    2a22:	a9 01       	movw	r20, r18
    2a24:	48 0f       	add	r20, r24
    2a26:	59 1f       	adc	r21, r25
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	28 2f       	mov	r18, r24
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	fc 01       	movw	r30, r24
    2a34:	e2 0f       	add	r30, r18
    2a36:	f3 1f       	adc	r31, r19
    2a38:	20 81       	ld	r18, Z
    2a3a:	ca 01       	movw	r24, r20
    2a3c:	62 2f       	mov	r22, r18
    2a3e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <EEPROM_voidWriteByte>
}

void EEPROM_voidWriteBlock	(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize, u8 * Copy_PtrData	)
{
	u8 LOC_LoopIterartor = 0;
	for(LOC_LoopIterartor = 0; LOC_LoopIterartor < Copy_u8BlockSize; LOC_LoopIterartor++)
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	99 81       	ldd	r25, Y+1	; 0x01
    2a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4c:	98 17       	cp	r25, r24
    2a4e:	20 f3       	brcs	.-56     	; 0x2a18 <EEPROM_voidWriteBlock+0x1e>
	{
		EEPROM_voidWriteByte( (Copy_u16ByteAddress + LOC_LoopIterartor), Copy_PtrData[LOC_LoopIterartor]);
	}

}
    2a50:	26 96       	adiw	r28, 0x06	; 6
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <EEPROM_voidReadByte>:

void EEPROM_voidReadByte		(u16 Copy_u16ByteAddress, u8 *Copy_ptrReturnDataValue				)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	00 d0       	rcall	.+0      	; 0x2a68 <EEPROM_voidReadByte+0x6>
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <EEPROM_voidReadByte+0x8>
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
    2a72:	7c 83       	std	Y+4, r23	; 0x04
    2a74:	6b 83       	std	Y+3, r22	; 0x03
	/* wait the previous write operation is done  */
	while(GET_BIT(EECR, EEWE) == 1);
    2a76:	ec e3       	ldi	r30, 0x3C	; 60
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	86 95       	lsr	r24
    2a7e:	88 2f       	mov	r24, r24
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	81 70       	andi	r24, 0x01	; 1
    2a84:	90 70       	andi	r25, 0x00	; 0
    2a86:	88 23       	and	r24, r24
    2a88:	b1 f7       	brne	.-20     	; 0x2a76 <EEPROM_voidReadByte+0x14>
	/* Write the address  */
	EEAR = Copy_u16ByteAddress ;
    2a8a:	ee e3       	ldi	r30, 0x3E	; 62
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
	/* Start Read Operation */
	EECR |= (1<<EERE);
    2a96:	ac e3       	ldi	r26, 0x3C	; 60
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	ec e3       	ldi	r30, 0x3C	; 60
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	81 60       	ori	r24, 0x01	; 1
    2aa2:	8c 93       	st	X, r24
	/* Return Data to the pointer */
	*Copy_ptrReturnDataValue = EEDR;
    2aa4:	ed e3       	ldi	r30, 0x3D	; 61
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2aac:	fc 81       	ldd	r31, Y+4	; 0x04
    2aae:	80 83       	st	Z, r24
}
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <EEPROM_voidReadBlock>:

void EEPROM_voidReadBlock		(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize , u8 *Copy_ptrReturnDataValue)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <EEPROM_voidReadBlock+0x6>
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <EEPROM_voidReadBlock+0x8>
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <EEPROM_voidReadBlock+0xa>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	9b 83       	std	Y+3, r25	; 0x03
    2ace:	8a 83       	std	Y+2, r24	; 0x02
    2ad0:	6c 83       	std	Y+4, r22	; 0x04
    2ad2:	5e 83       	std	Y+6, r21	; 0x06
    2ad4:	4d 83       	std	Y+5, r20	; 0x05
	u8 LOC_LoopIterator = 0;
    2ad6:	19 82       	std	Y+1, r1	; 0x01
	for(LOC_LoopIterator = 0; LOC_LoopIterator<Copy_u8BlockSize; LOC_LoopIterator++)
    2ad8:	19 82       	std	Y+1, r1	; 0x01
    2ada:	16 c0       	rjmp	.+44     	; 0x2b08 <EEPROM_voidReadBlock+0x4a>
	{
		EEPROM_voidReadByte( ( Copy_u16ByteAddress + LOC_LoopIterator ), ( Copy_ptrReturnDataValue + LOC_LoopIterator ) );
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae6:	a9 01       	movw	r20, r18
    2ae8:	48 0f       	add	r20, r24
    2aea:	59 1f       	adc	r21, r25
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8d 81       	ldd	r24, Y+5	; 0x05
    2af4:	9e 81       	ldd	r25, Y+6	; 0x06
    2af6:	28 0f       	add	r18, r24
    2af8:	39 1f       	adc	r19, r25
    2afa:	ca 01       	movw	r24, r20
    2afc:	b9 01       	movw	r22, r18
    2afe:	0e 94 31 15 	call	0x2a62	; 0x2a62 <EEPROM_voidReadByte>
}

void EEPROM_voidReadBlock		(u16 Copy_u16ByteAddress, u8 Copy_u8BlockSize , u8 *Copy_ptrReturnDataValue)
{
	u8 LOC_LoopIterator = 0;
	for(LOC_LoopIterator = 0; LOC_LoopIterator<Copy_u8BlockSize; LOC_LoopIterator++)
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	89 83       	std	Y+1, r24	; 0x01
    2b08:	99 81       	ldd	r25, Y+1	; 0x01
    2b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0c:	98 17       	cp	r25, r24
    2b0e:	30 f3       	brcs	.-52     	; 0x2adc <EEPROM_voidReadBlock+0x1e>
	{
		EEPROM_voidReadByte( ( Copy_u16ByteAddress + LOC_LoopIterator ), ( Copy_ptrReturnDataValue + LOC_LoopIterator ) );
	}
}
    2b10:	26 96       	adiw	r28, 0x06	; 6
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	08 95       	ret

00002b22 <GPIO_voidSetPinDir>:
/**         *@param[in]	u8 Copy_u8PinNum  { 0 to 7  }																*/
/**         *@param[in]	u8 Copy_u8Direction { INPUT , OUTPUT }														*/
/**         *@param[out] void																						*/
/*-----------------------------------------------------------------------------------------------------------------	*/
void GPIO_voidSetPinDir(u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8Direction)
{
    2b22:	df 93       	push	r29
    2b24:	cf 93       	push	r28
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	2d 97       	sbiw	r28, 0x0d	; 13
    2b2c:	0f b6       	in	r0, 0x3f	; 63
    2b2e:	f8 94       	cli
    2b30:	de bf       	out	0x3e, r29	; 62
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	cd bf       	out	0x3d, r28	; 61
    2b36:	89 83       	std	Y+1, r24	; 0x01
    2b38:	6a 83       	std	Y+2, r22	; 0x02
    2b3a:	4b 83       	std	Y+3, r20	; 0x03
	
	switch(Copy_u8PortNum)
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	3d 87       	std	Y+13, r19	; 0x0d
    2b44:	2c 87       	std	Y+12, r18	; 0x0c
    2b46:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b48:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <GPIO_voidSetPinDir+0x30>
    2b50:	4f c0       	rjmp	.+158    	; 0x2bf0 <GPIO_voidSetPinDir+0xce>
    2b52:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b54:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <GPIO_voidSetPinDir+0x44>
    2b5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b5e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	71 f0       	breq	.+28     	; 0x2b80 <GPIO_voidSetPinDir+0x5e>
    2b64:	ec c0       	rjmp	.+472    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
    2b66:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b68:	3d 85       	ldd	r19, Y+13	; 0x0d
    2b6a:	22 30       	cpi	r18, 0x02	; 2
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <GPIO_voidSetPinDir+0x50>
    2b70:	77 c0       	rjmp	.+238    	; 0x2c60 <GPIO_voidSetPinDir+0x13e>
    2b72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b74:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	91 05       	cpc	r25, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <GPIO_voidSetPinDir+0x5c>
    2b7c:	a9 c0       	rjmp	.+338    	; 0x2cd0 <GPIO_voidSetPinDir+0x1ae>
    2b7e:	df c0       	rjmp	.+446    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
	{
		
		case GPIOA :
			switch (Copy_u8Direction)  
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	28 2f       	mov	r18, r24
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	3b 87       	std	Y+11, r19	; 0x0b
    2b88:	2a 87       	std	Y+10, r18	; 0x0a
    2b8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b8e:	00 97       	sbiw	r24, 0x00	; 0
    2b90:	31 f0       	breq	.+12     	; 0x2b9e <GPIO_voidSetPinDir+0x7c>
    2b92:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b94:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b96:	21 30       	cpi	r18, 0x01	; 1
    2b98:	31 05       	cpc	r19, r1
    2b9a:	b1 f0       	breq	.+44     	; 0x2bc8 <GPIO_voidSetPinDir+0xa6>
    2b9c:	d0 c0       	rjmp	.+416    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
			{
				
				case INPUT  : CLR_BIT(DDRA,Copy_u8PinNum);  break;  
    2b9e:	aa e3       	ldi	r26, 0x3A	; 58
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	ea e3       	ldi	r30, 0x3A	; 58
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	48 2f       	mov	r20, r24
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	02 2e       	mov	r0, r18
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <GPIO_voidSetPinDir+0x9a>
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	0a 94       	dec	r0
    2bbe:	e2 f7       	brpl	.-8      	; 0x2bb8 <GPIO_voidSetPinDir+0x96>
    2bc0:	80 95       	com	r24
    2bc2:	84 23       	and	r24, r20
    2bc4:	8c 93       	st	X, r24
    2bc6:	bb c0       	rjmp	.+374    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRA,Copy_u8PinNum);  break;
    2bc8:	aa e3       	ldi	r26, 0x3A	; 58
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	ea e3       	ldi	r30, 0x3A	; 58
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	48 2f       	mov	r20, r24
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	02 2e       	mov	r0, r18
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <GPIO_voidSetPinDir+0xc4>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	0a 94       	dec	r0
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <GPIO_voidSetPinDir+0xc0>
    2bea:	84 2b       	or	r24, r20
    2bec:	8c 93       	st	X, r24
    2bee:	a7 c0       	rjmp	.+334    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				default     : /* return Error invalid option */ break;
			}
			break;
		case GPIOB :
			switch (Copy_u8Direction)
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	39 87       	std	Y+9, r19	; 0x09
    2bf8:	28 87       	std	Y+8, r18	; 0x08
    2bfa:	88 85       	ldd	r24, Y+8	; 0x08
    2bfc:	99 85       	ldd	r25, Y+9	; 0x09
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	31 f0       	breq	.+12     	; 0x2c0e <GPIO_voidSetPinDir+0xec>
    2c02:	28 85       	ldd	r18, Y+8	; 0x08
    2c04:	39 85       	ldd	r19, Y+9	; 0x09
    2c06:	21 30       	cpi	r18, 0x01	; 1
    2c08:	31 05       	cpc	r19, r1
    2c0a:	b1 f0       	breq	.+44     	; 0x2c38 <GPIO_voidSetPinDir+0x116>
    2c0c:	98 c0       	rjmp	.+304    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
			{
				case INPUT  : CLR_BIT(DDRB,Copy_u8PinNum); break;
    2c0e:	a7 e3       	ldi	r26, 0x37	; 55
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e7 e3       	ldi	r30, 0x37	; 55
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	48 2f       	mov	r20, r24
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	02 2e       	mov	r0, r18
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <GPIO_voidSetPinDir+0x10a>
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	0a 94       	dec	r0
    2c2e:	e2 f7       	brpl	.-8      	; 0x2c28 <GPIO_voidSetPinDir+0x106>
    2c30:	80 95       	com	r24
    2c32:	84 23       	and	r24, r20
    2c34:	8c 93       	st	X, r24
    2c36:	83 c0       	rjmp	.+262    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRB,Copy_u8PinNum); break;
    2c38:	a7 e3       	ldi	r26, 0x37	; 55
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	e7 e3       	ldi	r30, 0x37	; 55
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 81       	ld	r24, Z
    2c42:	48 2f       	mov	r20, r24
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 2e       	mov	r0, r18
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <GPIO_voidSetPinDir+0x134>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	0a 94       	dec	r0
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <GPIO_voidSetPinDir+0x130>
    2c5a:	84 2b       	or	r24, r20
    2c5c:	8c 93       	st	X, r24
    2c5e:	6f c0       	rjmp	.+222    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOC :
			switch (Copy_u8Direction)
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	3f 83       	std	Y+7, r19	; 0x07
    2c68:	2e 83       	std	Y+6, r18	; 0x06
    2c6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6e:	00 97       	sbiw	r24, 0x00	; 0
    2c70:	31 f0       	breq	.+12     	; 0x2c7e <GPIO_voidSetPinDir+0x15c>
    2c72:	2e 81       	ldd	r18, Y+6	; 0x06
    2c74:	3f 81       	ldd	r19, Y+7	; 0x07
    2c76:	21 30       	cpi	r18, 0x01	; 1
    2c78:	31 05       	cpc	r19, r1
    2c7a:	b1 f0       	breq	.+44     	; 0x2ca8 <GPIO_voidSetPinDir+0x186>
    2c7c:	60 c0       	rjmp	.+192    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
			{
				case INPUT  : CLR_BIT(DDRC,Copy_u8PinNum); break;
    2c7e:	a4 e3       	ldi	r26, 0x34	; 52
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e4 e3       	ldi	r30, 0x34	; 52
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	48 2f       	mov	r20, r24
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	02 2e       	mov	r0, r18
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <GPIO_voidSetPinDir+0x17a>
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	0a 94       	dec	r0
    2c9e:	e2 f7       	brpl	.-8      	; 0x2c98 <GPIO_voidSetPinDir+0x176>
    2ca0:	80 95       	com	r24
    2ca2:	84 23       	and	r24, r20
    2ca4:	8c 93       	st	X, r24
    2ca6:	4b c0       	rjmp	.+150    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRC,Copy_u8PinNum); break;
    2ca8:	a4 e3       	ldi	r26, 0x34	; 52
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e4 e3       	ldi	r30, 0x34	; 52
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	80 81       	ld	r24, Z
    2cb2:	48 2f       	mov	r20, r24
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	02 2e       	mov	r0, r18
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <GPIO_voidSetPinDir+0x1a4>
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	0a 94       	dec	r0
    2cc8:	e2 f7       	brpl	.-8      	; 0x2cc2 <GPIO_voidSetPinDir+0x1a0>
    2cca:	84 2b       	or	r24, r20
    2ccc:	8c 93       	st	X, r24
    2cce:	37 c0       	rjmp	.+110    	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOD :
			switch (Copy_u8Direction)
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	3d 83       	std	Y+5, r19	; 0x05
    2cd8:	2c 83       	std	Y+4, r18	; 0x04
    2cda:	8c 81       	ldd	r24, Y+4	; 0x04
    2cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	31 f0       	breq	.+12     	; 0x2cee <GPIO_voidSetPinDir+0x1cc>
    2ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce6:	21 30       	cpi	r18, 0x01	; 1
    2ce8:	31 05       	cpc	r19, r1
    2cea:	b1 f0       	breq	.+44     	; 0x2d18 <GPIO_voidSetPinDir+0x1f6>
    2cec:	28 c0       	rjmp	.+80     	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
			{
				case INPUT  : CLR_BIT(DDRD,Copy_u8PinNum); break;
    2cee:	a1 e3       	ldi	r26, 0x31	; 49
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e1 e3       	ldi	r30, 0x31	; 49
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 2e       	mov	r0, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <GPIO_voidSetPinDir+0x1ea>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	0a 94       	dec	r0
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <GPIO_voidSetPinDir+0x1e6>
    2d10:	80 95       	com	r24
    2d12:	84 23       	and	r24, r20
    2d14:	8c 93       	st	X, r24
    2d16:	13 c0       	rjmp	.+38     	; 0x2d3e <GPIO_voidSetPinDir+0x21c>
				case OUTPUT : SET_BIT(DDRD,Copy_u8PinNum); break;
    2d18:	a1 e3       	ldi	r26, 0x31	; 49
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e1 e3       	ldi	r30, 0x31	; 49
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	48 2f       	mov	r20, r24
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	02 2e       	mov	r0, r18
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <GPIO_voidSetPinDir+0x214>
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	0a 94       	dec	r0
    2d38:	e2 f7       	brpl	.-8      	; 0x2d32 <GPIO_voidSetPinDir+0x210>
    2d3a:	84 2b       	or	r24, r20
    2d3c:	8c 93       	st	X, r24
			break;
			
		default : /* return Error */ break;
	}
	
}
    2d3e:	2d 96       	adiw	r28, 0x0d	; 13
    2d40:	0f b6       	in	r0, 0x3f	; 63
    2d42:	f8 94       	cli
    2d44:	de bf       	out	0x3e, r29	; 62
    2d46:	0f be       	out	0x3f, r0	; 63
    2d48:	cd bf       	out	0x3d, r28	; 61
    2d4a:	cf 91       	pop	r28
    2d4c:	df 91       	pop	r29
    2d4e:	08 95       	ret

00002d50 <GPIO_voidSetPinVal>:
/* 		4- In case HIGH :write 1 to the corresponding pin num in PORTxn to make it input 							*/
/* 		The default if the direction was any thing other input or output it returns an error and break 				*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidSetPinVal(u8 Copy_u8PortNum ,u8 Copy_u8PinNum, u8 Copy_u8Value)
{
    2d50:	df 93       	push	r29
    2d52:	cf 93       	push	r28
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	2d 97       	sbiw	r28, 0x0d	; 13
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	89 83       	std	Y+1, r24	; 0x01
    2d66:	6a 83       	std	Y+2, r22	; 0x02
    2d68:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8PortNum)
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	3d 87       	std	Y+13, r19	; 0x0d
    2d72:	2c 87       	std	Y+12, r18	; 0x0c
    2d74:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d76:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d78:	81 30       	cpi	r24, 0x01	; 1
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <GPIO_voidSetPinVal+0x30>
    2d7e:	4f c0       	rjmp	.+158    	; 0x2e1e <GPIO_voidSetPinVal+0xce>
    2d80:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d82:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d84:	22 30       	cpi	r18, 0x02	; 2
    2d86:	31 05       	cpc	r19, r1
    2d88:	2c f4       	brge	.+10     	; 0x2d94 <GPIO_voidSetPinVal+0x44>
    2d8a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d8c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	71 f0       	breq	.+28     	; 0x2dae <GPIO_voidSetPinVal+0x5e>
    2d92:	ec c0       	rjmp	.+472    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
    2d94:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d96:	3d 85       	ldd	r19, Y+13	; 0x0d
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	09 f4       	brne	.+2      	; 0x2da0 <GPIO_voidSetPinVal+0x50>
    2d9e:	77 c0       	rjmp	.+238    	; 0x2e8e <GPIO_voidSetPinVal+0x13e>
    2da0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2da2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2da4:	83 30       	cpi	r24, 0x03	; 3
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <GPIO_voidSetPinVal+0x5c>
    2daa:	a9 c0       	rjmp	.+338    	; 0x2efe <GPIO_voidSetPinVal+0x1ae>
    2dac:	df c0       	rjmp	.+446    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
	{
		case GPIOA :
			switch (Copy_u8Value)
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3b 87       	std	Y+11, r19	; 0x0b
    2db6:	2a 87       	std	Y+10, r18	; 0x0a
    2db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	31 f0       	breq	.+12     	; 0x2dcc <GPIO_voidSetPinVal+0x7c>
    2dc0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2dc2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2dc4:	21 30       	cpi	r18, 0x01	; 1
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	b1 f0       	breq	.+44     	; 0x2df6 <GPIO_voidSetPinVal+0xa6>
    2dca:	d0 c0       	rjmp	.+416    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTA,Copy_u8PinNum); break;
    2dcc:	ab e3       	ldi	r26, 0x3B	; 59
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	eb e3       	ldi	r30, 0x3B	; 59
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	48 2f       	mov	r20, r24
    2dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	02 2e       	mov	r0, r18
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <GPIO_voidSetPinVal+0x9a>
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	0a 94       	dec	r0
    2dec:	e2 f7       	brpl	.-8      	; 0x2de6 <GPIO_voidSetPinVal+0x96>
    2dee:	80 95       	com	r24
    2df0:	84 23       	and	r24, r20
    2df2:	8c 93       	st	X, r24
    2df4:	bb c0       	rjmp	.+374    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTA,Copy_u8PinNum); break;
    2df6:	ab e3       	ldi	r26, 0x3B	; 59
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	eb e3       	ldi	r30, 0x3B	; 59
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	48 2f       	mov	r20, r24
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	02 2e       	mov	r0, r18
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <GPIO_voidSetPinVal+0xc4>
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	0a 94       	dec	r0
    2e16:	e2 f7       	brpl	.-8      	; 0x2e10 <GPIO_voidSetPinVal+0xc0>
    2e18:	84 2b       	or	r24, r20
    2e1a:	8c 93       	st	X, r24
    2e1c:	a7 c0       	rjmp	.+334    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOB :
			switch (Copy_u8Value)
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	28 2f       	mov	r18, r24
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	39 87       	std	Y+9, r19	; 0x09
    2e26:	28 87       	std	Y+8, r18	; 0x08
    2e28:	88 85       	ldd	r24, Y+8	; 0x08
    2e2a:	99 85       	ldd	r25, Y+9	; 0x09
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	31 f0       	breq	.+12     	; 0x2e3c <GPIO_voidSetPinVal+0xec>
    2e30:	28 85       	ldd	r18, Y+8	; 0x08
    2e32:	39 85       	ldd	r19, Y+9	; 0x09
    2e34:	21 30       	cpi	r18, 0x01	; 1
    2e36:	31 05       	cpc	r19, r1
    2e38:	b1 f0       	breq	.+44     	; 0x2e66 <GPIO_voidSetPinVal+0x116>
    2e3a:	98 c0       	rjmp	.+304    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTB,Copy_u8PinNum); break;
    2e3c:	a8 e3       	ldi	r26, 0x38	; 56
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e8 e3       	ldi	r30, 0x38	; 56
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	48 2f       	mov	r20, r24
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	02 2e       	mov	r0, r18
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <GPIO_voidSetPinVal+0x10a>
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	0a 94       	dec	r0
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <GPIO_voidSetPinVal+0x106>
    2e5e:	80 95       	com	r24
    2e60:	84 23       	and	r24, r20
    2e62:	8c 93       	st	X, r24
    2e64:	83 c0       	rjmp	.+262    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTB,Copy_u8PinNum); break;
    2e66:	a8 e3       	ldi	r26, 0x38	; 56
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e8 e3       	ldi	r30, 0x38	; 56
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	48 2f       	mov	r20, r24
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	02 2e       	mov	r0, r18
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <GPIO_voidSetPinVal+0x134>
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	0a 94       	dec	r0
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <GPIO_voidSetPinVal+0x130>
    2e88:	84 2b       	or	r24, r20
    2e8a:	8c 93       	st	X, r24
    2e8c:	6f c0       	rjmp	.+222    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOC :
			switch (Copy_u8Value)
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	3f 83       	std	Y+7, r19	; 0x07
    2e96:	2e 83       	std	Y+6, r18	; 0x06
    2e98:	8e 81       	ldd	r24, Y+6	; 0x06
    2e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	31 f0       	breq	.+12     	; 0x2eac <GPIO_voidSetPinVal+0x15c>
    2ea0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ea2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ea4:	21 30       	cpi	r18, 0x01	; 1
    2ea6:	31 05       	cpc	r19, r1
    2ea8:	b1 f0       	breq	.+44     	; 0x2ed6 <GPIO_voidSetPinVal+0x186>
    2eaa:	60 c0       	rjmp	.+192    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTC,Copy_u8PinNum); break;
    2eac:	a5 e3       	ldi	r26, 0x35	; 53
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	e5 e3       	ldi	r30, 0x35	; 53
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	48 2f       	mov	r20, r24
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	02 2e       	mov	r0, r18
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <GPIO_voidSetPinVal+0x17a>
    2ec6:	88 0f       	add	r24, r24
    2ec8:	99 1f       	adc	r25, r25
    2eca:	0a 94       	dec	r0
    2ecc:	e2 f7       	brpl	.-8      	; 0x2ec6 <GPIO_voidSetPinVal+0x176>
    2ece:	80 95       	com	r24
    2ed0:	84 23       	and	r24, r20
    2ed2:	8c 93       	st	X, r24
    2ed4:	4b c0       	rjmp	.+150    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTC,Copy_u8PinNum); break;
    2ed6:	a5 e3       	ldi	r26, 0x35	; 53
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e5 e3       	ldi	r30, 0x35	; 53
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	48 2f       	mov	r20, r24
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	02 2e       	mov	r0, r18
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <GPIO_voidSetPinVal+0x1a4>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	0a 94       	dec	r0
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <GPIO_voidSetPinVal+0x1a0>
    2ef8:	84 2b       	or	r24, r20
    2efa:	8c 93       	st	X, r24
    2efc:	37 c0       	rjmp	.+110    	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				default     : /* return Error */ break;
			}
			break;
		case GPIOD :
			switch (Copy_u8Value)
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	28 2f       	mov	r18, r24
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	3d 83       	std	Y+5, r19	; 0x05
    2f06:	2c 83       	std	Y+4, r18	; 0x04
    2f08:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	31 f0       	breq	.+12     	; 0x2f1c <GPIO_voidSetPinVal+0x1cc>
    2f10:	2c 81       	ldd	r18, Y+4	; 0x04
    2f12:	3d 81       	ldd	r19, Y+5	; 0x05
    2f14:	21 30       	cpi	r18, 0x01	; 1
    2f16:	31 05       	cpc	r19, r1
    2f18:	b1 f0       	breq	.+44     	; 0x2f46 <GPIO_voidSetPinVal+0x1f6>
    2f1a:	28 c0       	rjmp	.+80     	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
			{
				case LOW  : CLR_BIT(PORTD,Copy_u8PinNum); break;
    2f1c:	a2 e3       	ldi	r26, 0x32	; 50
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e2 e3       	ldi	r30, 0x32	; 50
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	48 2f       	mov	r20, r24
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	02 2e       	mov	r0, r18
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <GPIO_voidSetPinVal+0x1ea>
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	0a 94       	dec	r0
    2f3c:	e2 f7       	brpl	.-8      	; 0x2f36 <GPIO_voidSetPinVal+0x1e6>
    2f3e:	80 95       	com	r24
    2f40:	84 23       	and	r24, r20
    2f42:	8c 93       	st	X, r24
    2f44:	13 c0       	rjmp	.+38     	; 0x2f6c <GPIO_voidSetPinVal+0x21c>
				case HIGH : SET_BIT(PORTD,Copy_u8PinNum); break;
    2f46:	a2 e3       	ldi	r26, 0x32	; 50
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e2 e3       	ldi	r30, 0x32	; 50
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	48 2f       	mov	r20, r24
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	28 2f       	mov	r18, r24
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	02 2e       	mov	r0, r18
    2f5e:	02 c0       	rjmp	.+4      	; 0x2f64 <GPIO_voidSetPinVal+0x214>
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	0a 94       	dec	r0
    2f66:	e2 f7       	brpl	.-8      	; 0x2f60 <GPIO_voidSetPinVal+0x210>
    2f68:	84 2b       	or	r24, r20
    2f6a:	8c 93       	st	X, r24
			break;
			
		default : /* return Error */ break;
	}
	
}
    2f6c:	2d 96       	adiw	r28, 0x0d	; 13
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <GPIO_voidTogglePin>:
/* 		in case of PORTA : the register is PORTA  and so on to all ports 											*/
/*	 	then toggle the value of the given pin (Copy_u8PinNum)														*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidTogglePin(u8 Copy_u8PortNum  , u8 Copy_u8PinNum)
{
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <GPIO_voidTogglePin+0x6>
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <GPIO_voidTogglePin+0x8>
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	28 2f       	mov	r18, r24
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	3c 83       	std	Y+4, r19	; 0x04
    2f96:	2b 83       	std	Y+3, r18	; 0x03
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	81 30       	cpi	r24, 0x01	; 1
    2f9e:	91 05       	cpc	r25, r1
    2fa0:	49 f1       	breq	.+82     	; 0x2ff4 <GPIO_voidTogglePin+0x76>
    2fa2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa4:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa6:	22 30       	cpi	r18, 0x02	; 2
    2fa8:	31 05       	cpc	r19, r1
    2faa:	2c f4       	brge	.+10     	; 0x2fb6 <GPIO_voidTogglePin+0x38>
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	00 97       	sbiw	r24, 0x00	; 0
    2fb2:	61 f0       	breq	.+24     	; 0x2fcc <GPIO_voidTogglePin+0x4e>
    2fb4:	5a c0       	rjmp	.+180    	; 0x306a <GPIO_voidTogglePin+0xec>
    2fb6:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb8:	3c 81       	ldd	r19, Y+4	; 0x04
    2fba:	22 30       	cpi	r18, 0x02	; 2
    2fbc:	31 05       	cpc	r19, r1
    2fbe:	71 f1       	breq	.+92     	; 0x301c <GPIO_voidTogglePin+0x9e>
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	83 30       	cpi	r24, 0x03	; 3
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	e9 f1       	breq	.+122    	; 0x3044 <GPIO_voidTogglePin+0xc6>
    2fca:	4f c0       	rjmp	.+158    	; 0x306a <GPIO_voidTogglePin+0xec>
	{
		case GPIOA : TOGGLE_BIT(PORTA,Copy_u8PinNum); break;
    2fcc:	ab e3       	ldi	r26, 0x3B	; 59
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	eb e3       	ldi	r30, 0x3B	; 59
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	48 2f       	mov	r20, r24
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 2e       	mov	r0, r18
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <GPIO_voidTogglePin+0x6c>
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	0a 94       	dec	r0
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <GPIO_voidTogglePin+0x68>
    2fee:	84 27       	eor	r24, r20
    2ff0:	8c 93       	st	X, r24
    2ff2:	3b c0       	rjmp	.+118    	; 0x306a <GPIO_voidTogglePin+0xec>
		case GPIOB : TOGGLE_BIT(PORTB,Copy_u8PinNum); break;
    2ff4:	a8 e3       	ldi	r26, 0x38	; 56
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e8 e3       	ldi	r30, 0x38	; 56
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	48 2f       	mov	r20, r24
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	02 2e       	mov	r0, r18
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <GPIO_voidTogglePin+0x94>
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	0a 94       	dec	r0
    3014:	e2 f7       	brpl	.-8      	; 0x300e <GPIO_voidTogglePin+0x90>
    3016:	84 27       	eor	r24, r20
    3018:	8c 93       	st	X, r24
    301a:	27 c0       	rjmp	.+78     	; 0x306a <GPIO_voidTogglePin+0xec>
		case GPIOC : TOGGLE_BIT(PORTC,Copy_u8PinNum); break;
    301c:	a5 e3       	ldi	r26, 0x35	; 53
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e5 e3       	ldi	r30, 0x35	; 53
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	48 2f       	mov	r20, r24
    3028:	8a 81       	ldd	r24, Y+2	; 0x02
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	02 2e       	mov	r0, r18
    3034:	02 c0       	rjmp	.+4      	; 0x303a <GPIO_voidTogglePin+0xbc>
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	0a 94       	dec	r0
    303c:	e2 f7       	brpl	.-8      	; 0x3036 <GPIO_voidTogglePin+0xb8>
    303e:	84 27       	eor	r24, r20
    3040:	8c 93       	st	X, r24
    3042:	13 c0       	rjmp	.+38     	; 0x306a <GPIO_voidTogglePin+0xec>
		case GPIOD : TOGGLE_BIT(PORTD,Copy_u8PinNum); break;
    3044:	a2 e3       	ldi	r26, 0x32	; 50
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e2 e3       	ldi	r30, 0x32	; 50
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	48 2f       	mov	r20, r24
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	02 2e       	mov	r0, r18
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <GPIO_voidTogglePin+0xe4>
    305e:	88 0f       	add	r24, r24
    3060:	99 1f       	adc	r25, r25
    3062:	0a 94       	dec	r0
    3064:	e2 f7       	brpl	.-8      	; 0x305e <GPIO_voidTogglePin+0xe0>
    3066:	84 27       	eor	r24, r20
    3068:	8c 93       	st	X, r24
		default : /* return Error */ break;
	}
}
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <GPIO_voidSetPortDir>:
/*	 	2-Check the given value HIGH or LOW 																		*/
/* 		 write the given value to the port																			*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidSetPortDir(u8 Copy_u8PortNum , u8 Copy_u8Direction)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <GPIO_voidSetPortDir+0x6>
    307e:	00 d0       	rcall	.+0      	; 0x3080 <GPIO_voidSetPortDir+0x8>
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	89 83       	std	Y+1, r24	; 0x01
    3086:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	28 2f       	mov	r18, r24
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	3c 83       	std	Y+4, r19	; 0x04
    3090:	2b 83       	std	Y+3, r18	; 0x03
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
    3094:	9c 81       	ldd	r25, Y+4	; 0x04
    3096:	81 30       	cpi	r24, 0x01	; 1
    3098:	91 05       	cpc	r25, r1
    309a:	d1 f0       	breq	.+52     	; 0x30d0 <GPIO_voidSetPortDir+0x58>
    309c:	2b 81       	ldd	r18, Y+3	; 0x03
    309e:	3c 81       	ldd	r19, Y+4	; 0x04
    30a0:	22 30       	cpi	r18, 0x02	; 2
    30a2:	31 05       	cpc	r19, r1
    30a4:	2c f4       	brge	.+10     	; 0x30b0 <GPIO_voidSetPortDir+0x38>
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	9c 81       	ldd	r25, Y+4	; 0x04
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	61 f0       	breq	.+24     	; 0x30c6 <GPIO_voidSetPortDir+0x4e>
    30ae:	1e c0       	rjmp	.+60     	; 0x30ec <GPIO_voidSetPortDir+0x74>
    30b0:	2b 81       	ldd	r18, Y+3	; 0x03
    30b2:	3c 81       	ldd	r19, Y+4	; 0x04
    30b4:	22 30       	cpi	r18, 0x02	; 2
    30b6:	31 05       	cpc	r19, r1
    30b8:	81 f0       	breq	.+32     	; 0x30da <GPIO_voidSetPortDir+0x62>
    30ba:	8b 81       	ldd	r24, Y+3	; 0x03
    30bc:	9c 81       	ldd	r25, Y+4	; 0x04
    30be:	83 30       	cpi	r24, 0x03	; 3
    30c0:	91 05       	cpc	r25, r1
    30c2:	81 f0       	breq	.+32     	; 0x30e4 <GPIO_voidSetPortDir+0x6c>
    30c4:	13 c0       	rjmp	.+38     	; 0x30ec <GPIO_voidSetPortDir+0x74>
	{
		case GPIOA :  DDRA = Copy_u8Direction;   break;
    30c6:	ea e3       	ldi	r30, 0x3A	; 58
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	8a 81       	ldd	r24, Y+2	; 0x02
    30cc:	80 83       	st	Z, r24
    30ce:	0e c0       	rjmp	.+28     	; 0x30ec <GPIO_voidSetPortDir+0x74>
		case GPIOB :  DDRB = Copy_u8Direction;   break;
    30d0:	e7 e3       	ldi	r30, 0x37	; 55
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	80 83       	st	Z, r24
    30d8:	09 c0       	rjmp	.+18     	; 0x30ec <GPIO_voidSetPortDir+0x74>
		case GPIOC :  DDRC = Copy_u8Direction;   break;
    30da:	e4 e3       	ldi	r30, 0x34	; 52
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	80 83       	st	Z, r24
    30e2:	04 c0       	rjmp	.+8      	; 0x30ec <GPIO_voidSetPortDir+0x74>
		case GPIOD :  DDRD = Copy_u8Direction;   break;
    30e4:	e1 e3       	ldi	r30, 0x31	; 49
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	80 83       	st	Z, r24
		
		default : /* return Error */ break;
	}
}
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	0f 90       	pop	r0
    30f2:	0f 90       	pop	r0
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <GPIO_voidSetPortVal>:
/* 		in case of PORTA : the register is PORTA  and so on to all ports 											*/
/*       2- then Write the Passed value (Copy_u8Value) on the PORTx 												*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidSetPortVal(u8 Copy_u8PortNum , u8 Copy_u8Value)
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <GPIO_voidSetPortVal+0x6>
    3100:	00 d0       	rcall	.+0      	; 0x3102 <GPIO_voidSetPortVal+0x8>
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
    3106:	89 83       	std	Y+1, r24	; 0x01
    3108:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	3c 83       	std	Y+4, r19	; 0x04
    3112:	2b 83       	std	Y+3, r18	; 0x03
    3114:	8b 81       	ldd	r24, Y+3	; 0x03
    3116:	9c 81       	ldd	r25, Y+4	; 0x04
    3118:	81 30       	cpi	r24, 0x01	; 1
    311a:	91 05       	cpc	r25, r1
    311c:	d1 f0       	breq	.+52     	; 0x3152 <GPIO_voidSetPortVal+0x58>
    311e:	2b 81       	ldd	r18, Y+3	; 0x03
    3120:	3c 81       	ldd	r19, Y+4	; 0x04
    3122:	22 30       	cpi	r18, 0x02	; 2
    3124:	31 05       	cpc	r19, r1
    3126:	2c f4       	brge	.+10     	; 0x3132 <GPIO_voidSetPortVal+0x38>
    3128:	8b 81       	ldd	r24, Y+3	; 0x03
    312a:	9c 81       	ldd	r25, Y+4	; 0x04
    312c:	00 97       	sbiw	r24, 0x00	; 0
    312e:	61 f0       	breq	.+24     	; 0x3148 <GPIO_voidSetPortVal+0x4e>
    3130:	1e c0       	rjmp	.+60     	; 0x316e <GPIO_voidSetPortVal+0x74>
    3132:	2b 81       	ldd	r18, Y+3	; 0x03
    3134:	3c 81       	ldd	r19, Y+4	; 0x04
    3136:	22 30       	cpi	r18, 0x02	; 2
    3138:	31 05       	cpc	r19, r1
    313a:	81 f0       	breq	.+32     	; 0x315c <GPIO_voidSetPortVal+0x62>
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	83 30       	cpi	r24, 0x03	; 3
    3142:	91 05       	cpc	r25, r1
    3144:	81 f0       	breq	.+32     	; 0x3166 <GPIO_voidSetPortVal+0x6c>
    3146:	13 c0       	rjmp	.+38     	; 0x316e <GPIO_voidSetPortVal+0x74>
	{
		case GPIOA : PORTA = Copy_u8Value;        break;
    3148:	eb e3       	ldi	r30, 0x3B	; 59
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	80 83       	st	Z, r24
    3150:	0e c0       	rjmp	.+28     	; 0x316e <GPIO_voidSetPortVal+0x74>
		case GPIOB : PORTB = Copy_u8Value;        break;
    3152:	e8 e3       	ldi	r30, 0x38	; 56
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	80 83       	st	Z, r24
    315a:	09 c0       	rjmp	.+18     	; 0x316e <GPIO_voidSetPortVal+0x74>
		case GPIOC : PORTC = Copy_u8Value;        break;
    315c:	e5 e3       	ldi	r30, 0x35	; 53
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	80 83       	st	Z, r24
    3164:	04 c0       	rjmp	.+8      	; 0x316e <GPIO_voidSetPortVal+0x74>
		case GPIOD : PORTD = Copy_u8Value;        break;
    3166:	e2 e3       	ldi	r30, 0x32	; 50
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	8a 81       	ldd	r24, Y+2	; 0x02
    316c:	80 83       	st	Z, r24
		default : /* return Error */ break;
	}
}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <GPIO_voidTogglePort>:
/* 		in case of PORTA : the register is PORTA  and so on to all ports 											*/
/*	 	then toggle the value of the given prrt num (u8 Copy_u8PortNum)												*/
/* 		The default if the port num was any thing other (GPIOA,GPIOB,GPIOC,GPIOD) it returns an error and break  	*/
/*------------------------------------------------------------------------------------------------------------------*/
void GPIO_voidTogglePort(u8 Copy_u8PortNum)
{
    317c:	df 93       	push	r29
    317e:	cf 93       	push	r28
    3180:	00 d0       	rcall	.+0      	; 0x3182 <GPIO_voidTogglePort+0x6>
    3182:	0f 92       	push	r0
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNum)
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	3b 83       	std	Y+3, r19	; 0x03
    3192:	2a 83       	std	Y+2, r18	; 0x02
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	9b 81       	ldd	r25, Y+3	; 0x03
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	91 05       	cpc	r25, r1
    319c:	e9 f0       	breq	.+58     	; 0x31d8 <GPIO_voidTogglePort+0x5c>
    319e:	2a 81       	ldd	r18, Y+2	; 0x02
    31a0:	3b 81       	ldd	r19, Y+3	; 0x03
    31a2:	22 30       	cpi	r18, 0x02	; 2
    31a4:	31 05       	cpc	r19, r1
    31a6:	2c f4       	brge	.+10     	; 0x31b2 <GPIO_voidTogglePort+0x36>
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	61 f0       	breq	.+24     	; 0x31c8 <GPIO_voidTogglePort+0x4c>
    31b0:	2a c0       	rjmp	.+84     	; 0x3206 <GPIO_voidTogglePort+0x8a>
    31b2:	2a 81       	ldd	r18, Y+2	; 0x02
    31b4:	3b 81       	ldd	r19, Y+3	; 0x03
    31b6:	22 30       	cpi	r18, 0x02	; 2
    31b8:	31 05       	cpc	r19, r1
    31ba:	b1 f0       	breq	.+44     	; 0x31e8 <GPIO_voidTogglePort+0x6c>
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	9b 81       	ldd	r25, Y+3	; 0x03
    31c0:	83 30       	cpi	r24, 0x03	; 3
    31c2:	91 05       	cpc	r25, r1
    31c4:	c9 f0       	breq	.+50     	; 0x31f8 <GPIO_voidTogglePort+0x7c>
    31c6:	1f c0       	rjmp	.+62     	; 0x3206 <GPIO_voidTogglePort+0x8a>
	{
		case GPIOA : PORTA = ~PORTA ; break;
    31c8:	ab e3       	ldi	r26, 0x3B	; 59
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	eb e3       	ldi	r30, 0x3B	; 59
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	80 95       	com	r24
    31d4:	8c 93       	st	X, r24
    31d6:	17 c0       	rjmp	.+46     	; 0x3206 <GPIO_voidTogglePort+0x8a>
		case GPIOB : PORTB = ~PORTB ; break;
    31d8:	a8 e3       	ldi	r26, 0x38	; 56
    31da:	b0 e0       	ldi	r27, 0x00	; 0
    31dc:	e8 e3       	ldi	r30, 0x38	; 56
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	80 81       	ld	r24, Z
    31e2:	80 95       	com	r24
    31e4:	8c 93       	st	X, r24
    31e6:	0f c0       	rjmp	.+30     	; 0x3206 <GPIO_voidTogglePort+0x8a>
		case GPIOC : PORTC = ~PORTC ; break;
    31e8:	a5 e3       	ldi	r26, 0x35	; 53
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	e5 e3       	ldi	r30, 0x35	; 53
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	80 95       	com	r24
    31f4:	8c 93       	st	X, r24
    31f6:	07 c0       	rjmp	.+14     	; 0x3206 <GPIO_voidTogglePort+0x8a>
		case GPIOD : PORTD = ~PORTD ; break;
    31f8:	a2 e3       	ldi	r26, 0x32	; 50
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e2 e3       	ldi	r30, 0x32	; 50
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	80 95       	com	r24
    3204:	8c 93       	st	X, r24
		default : /* Return Error */  break;
	}
}
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	0f 90       	pop	r0
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <GPIO_u8ReadPin>:
u8 GPIO_u8ReadPin(u8 Copy_u8PortNum, u8 Copy_u8PinNum)
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	00 d0       	rcall	.+0      	; 0x3218 <GPIO_u8ReadPin+0x6>
    3218:	00 d0       	rcall	.+0      	; 0x321a <GPIO_u8ReadPin+0x8>
    321a:	0f 92       	push	r0
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	8a 83       	std	Y+2, r24	; 0x02
    3222:	6b 83       	std	Y+3, r22	; 0x03
	u8 LocalResult ;
	switch(Copy_u8PortNum)
    3224:	8a 81       	ldd	r24, Y+2	; 0x02
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	3d 83       	std	Y+5, r19	; 0x05
    322c:	2c 83       	std	Y+4, r18	; 0x04
    322e:	4c 81       	ldd	r20, Y+4	; 0x04
    3230:	5d 81       	ldd	r21, Y+5	; 0x05
    3232:	41 30       	cpi	r20, 0x01	; 1
    3234:	51 05       	cpc	r21, r1
    3236:	41 f1       	breq	.+80     	; 0x3288 <GPIO_u8ReadPin+0x76>
    3238:	8c 81       	ldd	r24, Y+4	; 0x04
    323a:	9d 81       	ldd	r25, Y+5	; 0x05
    323c:	82 30       	cpi	r24, 0x02	; 2
    323e:	91 05       	cpc	r25, r1
    3240:	34 f4       	brge	.+12     	; 0x324e <GPIO_u8ReadPin+0x3c>
    3242:	2c 81       	ldd	r18, Y+4	; 0x04
    3244:	3d 81       	ldd	r19, Y+5	; 0x05
    3246:	21 15       	cp	r18, r1
    3248:	31 05       	cpc	r19, r1
    324a:	61 f0       	breq	.+24     	; 0x3264 <GPIO_u8ReadPin+0x52>
    324c:	52 c0       	rjmp	.+164    	; 0x32f2 <GPIO_u8ReadPin+0xe0>
    324e:	4c 81       	ldd	r20, Y+4	; 0x04
    3250:	5d 81       	ldd	r21, Y+5	; 0x05
    3252:	42 30       	cpi	r20, 0x02	; 2
    3254:	51 05       	cpc	r21, r1
    3256:	51 f1       	breq	.+84     	; 0x32ac <GPIO_u8ReadPin+0x9a>
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	9d 81       	ldd	r25, Y+5	; 0x05
    325c:	83 30       	cpi	r24, 0x03	; 3
    325e:	91 05       	cpc	r25, r1
    3260:	b9 f1       	breq	.+110    	; 0x32d0 <GPIO_u8ReadPin+0xbe>
    3262:	47 c0       	rjmp	.+142    	; 0x32f2 <GPIO_u8ReadPin+0xe0>
	{
		case GPIOA : LocalResult = GET_BIT(PINA,Copy_u8PinNum);  break;
    3264:	e9 e3       	ldi	r30, 0x39	; 57
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	a9 01       	movw	r20, r18
    3276:	02 c0       	rjmp	.+4      	; 0x327c <GPIO_u8ReadPin+0x6a>
    3278:	55 95       	asr	r21
    327a:	47 95       	ror	r20
    327c:	8a 95       	dec	r24
    327e:	e2 f7       	brpl	.-8      	; 0x3278 <GPIO_u8ReadPin+0x66>
    3280:	ca 01       	movw	r24, r20
    3282:	81 70       	andi	r24, 0x01	; 1
    3284:	89 83       	std	Y+1, r24	; 0x01
    3286:	35 c0       	rjmp	.+106    	; 0x32f2 <GPIO_u8ReadPin+0xe0>
		case GPIOB : LocalResult = GET_BIT(PINB,Copy_u8PinNum);  break;
    3288:	e6 e3       	ldi	r30, 0x36	; 54
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	28 2f       	mov	r18, r24
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	88 2f       	mov	r24, r24
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	a9 01       	movw	r20, r18
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <GPIO_u8ReadPin+0x8e>
    329c:	55 95       	asr	r21
    329e:	47 95       	ror	r20
    32a0:	8a 95       	dec	r24
    32a2:	e2 f7       	brpl	.-8      	; 0x329c <GPIO_u8ReadPin+0x8a>
    32a4:	ca 01       	movw	r24, r20
    32a6:	81 70       	andi	r24, 0x01	; 1
    32a8:	89 83       	std	Y+1, r24	; 0x01
    32aa:	23 c0       	rjmp	.+70     	; 0x32f2 <GPIO_u8ReadPin+0xe0>
		case GPIOC : LocalResult = GET_BIT(PINC,Copy_u8PinNum);  break;
    32ac:	e3 e3       	ldi	r30, 0x33	; 51
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	28 2f       	mov	r18, r24
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	88 2f       	mov	r24, r24
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a9 01       	movw	r20, r18
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <GPIO_u8ReadPin+0xb2>
    32c0:	55 95       	asr	r21
    32c2:	47 95       	ror	r20
    32c4:	8a 95       	dec	r24
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <GPIO_u8ReadPin+0xae>
    32c8:	ca 01       	movw	r24, r20
    32ca:	81 70       	andi	r24, 0x01	; 1
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	11 c0       	rjmp	.+34     	; 0x32f2 <GPIO_u8ReadPin+0xe0>
		case GPIOD : LocalResult = GET_BIT(PIND,Copy_u8PinNum);  break;
    32d0:	e0 e3       	ldi	r30, 0x30	; 48
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a9 01       	movw	r20, r18
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <GPIO_u8ReadPin+0xd6>
    32e4:	55 95       	asr	r21
    32e6:	47 95       	ror	r20
    32e8:	8a 95       	dec	r24
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <GPIO_u8ReadPin+0xd2>
    32ec:	ca 01       	movw	r24, r20
    32ee:	81 70       	andi	r24, 0x01	; 1
    32f0:	89 83       	std	Y+1, r24	; 0x01
		default : /* Return Error */                             break;
	}
	
	return LocalResult;
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <GPIO_u8ReadPort>:

u8 GPIO_u8ReadPort(u8 Copy_u8PortNum)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	00 d0       	rcall	.+0      	; 0x330a <GPIO_u8ReadPort+0x6>
    330a:	00 d0       	rcall	.+0      	; 0x330c <GPIO_u8ReadPort+0x8>
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	8a 83       	std	Y+2, r24	; 0x02
	u8 LocalResult;
	switch(Copy_u8PortNum)
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	28 2f       	mov	r18, r24
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	3c 83       	std	Y+4, r19	; 0x04
    331a:	2b 83       	std	Y+3, r18	; 0x03
    331c:	8b 81       	ldd	r24, Y+3	; 0x03
    331e:	9c 81       	ldd	r25, Y+4	; 0x04
    3320:	81 30       	cpi	r24, 0x01	; 1
    3322:	91 05       	cpc	r25, r1
    3324:	d1 f0       	breq	.+52     	; 0x335a <GPIO_u8ReadPort+0x56>
    3326:	2b 81       	ldd	r18, Y+3	; 0x03
    3328:	3c 81       	ldd	r19, Y+4	; 0x04
    332a:	22 30       	cpi	r18, 0x02	; 2
    332c:	31 05       	cpc	r19, r1
    332e:	2c f4       	brge	.+10     	; 0x333a <GPIO_u8ReadPort+0x36>
    3330:	8b 81       	ldd	r24, Y+3	; 0x03
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	61 f0       	breq	.+24     	; 0x3350 <GPIO_u8ReadPort+0x4c>
    3338:	1e c0       	rjmp	.+60     	; 0x3376 <GPIO_u8ReadPort+0x72>
    333a:	2b 81       	ldd	r18, Y+3	; 0x03
    333c:	3c 81       	ldd	r19, Y+4	; 0x04
    333e:	22 30       	cpi	r18, 0x02	; 2
    3340:	31 05       	cpc	r19, r1
    3342:	81 f0       	breq	.+32     	; 0x3364 <GPIO_u8ReadPort+0x60>
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	9c 81       	ldd	r25, Y+4	; 0x04
    3348:	83 30       	cpi	r24, 0x03	; 3
    334a:	91 05       	cpc	r25, r1
    334c:	81 f0       	breq	.+32     	; 0x336e <GPIO_u8ReadPort+0x6a>
    334e:	13 c0       	rjmp	.+38     	; 0x3376 <GPIO_u8ReadPort+0x72>
	{
		case GPIOA : LocalResult = PINA; break;
    3350:	e9 e3       	ldi	r30, 0x39	; 57
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	80 81       	ld	r24, Z
    3356:	89 83       	std	Y+1, r24	; 0x01
    3358:	0e c0       	rjmp	.+28     	; 0x3376 <GPIO_u8ReadPort+0x72>
		case GPIOB : LocalResult = PINB; break;
    335a:	e6 e3       	ldi	r30, 0x36	; 54
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	09 c0       	rjmp	.+18     	; 0x3376 <GPIO_u8ReadPort+0x72>
		case GPIOC : LocalResult = PINC; break;
    3364:	e3 e3       	ldi	r30, 0x33	; 51
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	04 c0       	rjmp	.+8      	; 0x3376 <GPIO_u8ReadPort+0x72>
		case GPIOD : LocalResult = PIND; break;
    336e:	e0 e3       	ldi	r30, 0x30	; 48
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	80 81       	ld	r24, Z
    3374:	89 83       	std	Y+1, r24	; 0x01
		default : /* Return Error */ break;
	}
	return LocalResult;
    3376:	89 81       	ldd	r24, Y+1	; 0x01
}
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <GPIO_voidSet_LOW_NibbleDir>:

void GPIO_voidSet_LOW_NibbleDir(u8 Copy_u8PortNum, u8 Copy_u8Dir)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	2c 97       	sbiw	r28, 0x0c	; 12
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	89 83       	std	Y+1, r24	; 0x01
    339c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	28 2f       	mov	r18, r24
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	3c 87       	std	Y+12, r19	; 0x0c
    33a6:	2b 87       	std	Y+11, r18	; 0x0b
    33a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    33aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	91 05       	cpc	r25, r1
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <GPIO_voidSet_LOW_NibbleDir+0x2e>
    33b2:	50 c0       	rjmp	.+160    	; 0x3454 <GPIO_voidSet_LOW_NibbleDir+0xce>
    33b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    33b6:	3c 85       	ldd	r19, Y+12	; 0x0c
    33b8:	22 30       	cpi	r18, 0x02	; 2
    33ba:	31 05       	cpc	r19, r1
    33bc:	2c f4       	brge	.+10     	; 0x33c8 <GPIO_voidSet_LOW_NibbleDir+0x42>
    33be:	8b 85       	ldd	r24, Y+11	; 0x0b
    33c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33c2:	00 97       	sbiw	r24, 0x00	; 0
    33c4:	71 f0       	breq	.+28     	; 0x33e2 <GPIO_voidSet_LOW_NibbleDir+0x5c>
    33c6:	f0 c0       	rjmp	.+480    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
    33c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    33ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    33cc:	22 30       	cpi	r18, 0x02	; 2
    33ce:	31 05       	cpc	r19, r1
    33d0:	09 f4       	brne	.+2      	; 0x33d4 <GPIO_voidSet_LOW_NibbleDir+0x4e>
    33d2:	79 c0       	rjmp	.+242    	; 0x34c6 <GPIO_voidSet_LOW_NibbleDir+0x140>
    33d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    33d8:	83 30       	cpi	r24, 0x03	; 3
    33da:	91 05       	cpc	r25, r1
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <GPIO_voidSet_LOW_NibbleDir+0x5a>
    33de:	ac c0       	rjmp	.+344    	; 0x3538 <GPIO_voidSet_LOW_NibbleDir+0x1b2>
    33e0:	e3 c0       	rjmp	.+454    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
	{
		case GPIOA : 
			switch(Copy_u8Dir)
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	28 2f       	mov	r18, r24
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	3a 87       	std	Y+10, r19	; 0x0a
    33ea:	29 87       	std	Y+9, r18	; 0x09
    33ec:	89 85       	ldd	r24, Y+9	; 0x09
    33ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f0:	00 97       	sbiw	r24, 0x00	; 0
    33f2:	31 f0       	breq	.+12     	; 0x3400 <GPIO_voidSet_LOW_NibbleDir+0x7a>
    33f4:	29 85       	ldd	r18, Y+9	; 0x09
    33f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    33f8:	21 30       	cpi	r18, 0x01	; 1
    33fa:	31 05       	cpc	r19, r1
    33fc:	b1 f0       	breq	.+44     	; 0x342a <GPIO_voidSet_LOW_NibbleDir+0xa4>
    33fe:	d4 c0       	rjmp	.+424    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOA,PIN0,INPUT);
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	40 e0       	ldi	r20, 0x00	; 0
    3406:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN1,INPUT);
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	61 e0       	ldi	r22, 0x01	; 1
    340e:	40 e0       	ldi	r20, 0x00	; 0
    3410:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN2,INPUT);
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	62 e0       	ldi	r22, 0x02	; 2
    3418:	40 e0       	ldi	r20, 0x00	; 0
    341a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN3,INPUT);
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	63 e0       	ldi	r22, 0x03	; 3
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    3428:	bf c0       	rjmp	.+382    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
							  
				case OUTPUT : GPIO_voidSetPinDir(GPIOA,PIN0,OUTPUT);
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	41 e0       	ldi	r20, 0x01	; 1
    3430:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN1,OUTPUT);
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	61 e0       	ldi	r22, 0x01	; 1
    3438:	41 e0       	ldi	r20, 0x01	; 1
    343a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN2,OUTPUT);
    343e:	80 e0       	ldi	r24, 0x00	; 0
    3440:	62 e0       	ldi	r22, 0x02	; 2
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN3,OUTPUT);
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	63 e0       	ldi	r22, 0x03	; 3
    344c:	41 e0       	ldi	r20, 0x01	; 1
    344e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    3452:	aa c0       	rjmp	.+340    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				default: /* return error */ break;
			}				
				break;
		case GPIOB :
			switch(Copy_u8Dir)
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	28 2f       	mov	r18, r24
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	38 87       	std	Y+8, r19	; 0x08
    345c:	2f 83       	std	Y+7, r18	; 0x07
    345e:	8f 81       	ldd	r24, Y+7	; 0x07
    3460:	98 85       	ldd	r25, Y+8	; 0x08
    3462:	00 97       	sbiw	r24, 0x00	; 0
    3464:	31 f0       	breq	.+12     	; 0x3472 <GPIO_voidSet_LOW_NibbleDir+0xec>
    3466:	2f 81       	ldd	r18, Y+7	; 0x07
    3468:	38 85       	ldd	r19, Y+8	; 0x08
    346a:	21 30       	cpi	r18, 0x01	; 1
    346c:	31 05       	cpc	r19, r1
    346e:	b1 f0       	breq	.+44     	; 0x349c <GPIO_voidSet_LOW_NibbleDir+0x116>
    3470:	9b c0       	rjmp	.+310    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOB,PIN0,INPUT);
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	40 e0       	ldi	r20, 0x00	; 0
    3478:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN1,INPUT);
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	61 e0       	ldi	r22, 0x01	; 1
    3480:	40 e0       	ldi	r20, 0x00	; 0
    3482:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN2,INPUT);
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	62 e0       	ldi	r22, 0x02	; 2
    348a:	40 e0       	ldi	r20, 0x00	; 0
    348c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN3,INPUT);
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	63 e0       	ldi	r22, 0x03	; 3
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    349a:	86 c0       	rjmp	.+268    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOB,PIN0,OUTPUT);
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	41 e0       	ldi	r20, 0x01	; 1
    34a2:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN1,OUTPUT);
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	61 e0       	ldi	r22, 0x01	; 1
    34aa:	41 e0       	ldi	r20, 0x01	; 1
    34ac:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN2,OUTPUT);
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	62 e0       	ldi	r22, 0x02	; 2
    34b4:	41 e0       	ldi	r20, 0x01	; 1
    34b6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN3,OUTPUT);
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	63 e0       	ldi	r22, 0x03	; 3
    34be:	41 e0       	ldi	r20, 0x01	; 1
    34c0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    34c4:	71 c0       	rjmp	.+226    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
				default: /* return Error */ break;
			}
			break;
			 
		case GPIOC :
			switch(Copy_u8Dir)
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	28 2f       	mov	r18, r24
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	3e 83       	std	Y+6, r19	; 0x06
    34ce:	2d 83       	std	Y+5, r18	; 0x05
    34d0:	8d 81       	ldd	r24, Y+5	; 0x05
    34d2:	9e 81       	ldd	r25, Y+6	; 0x06
    34d4:	00 97       	sbiw	r24, 0x00	; 0
    34d6:	31 f0       	breq	.+12     	; 0x34e4 <GPIO_voidSet_LOW_NibbleDir+0x15e>
    34d8:	2d 81       	ldd	r18, Y+5	; 0x05
    34da:	3e 81       	ldd	r19, Y+6	; 0x06
    34dc:	21 30       	cpi	r18, 0x01	; 1
    34de:	31 05       	cpc	r19, r1
    34e0:	b1 f0       	breq	.+44     	; 0x350e <GPIO_voidSet_LOW_NibbleDir+0x188>
    34e2:	62 c0       	rjmp	.+196    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOC,PIN0,INPUT);
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	40 e0       	ldi	r20, 0x00	; 0
    34ea:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN1,INPUT);
    34ee:	82 e0       	ldi	r24, 0x02	; 2
    34f0:	61 e0       	ldi	r22, 0x01	; 1
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN2,INPUT);
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	62 e0       	ldi	r22, 0x02	; 2
    34fc:	40 e0       	ldi	r20, 0x00	; 0
    34fe:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN3,INPUT);
    3502:	82 e0       	ldi	r24, 0x02	; 2
    3504:	63 e0       	ldi	r22, 0x03	; 3
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    350c:	4d c0       	rjmp	.+154    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOC,PIN0,OUTPUT);
    350e:	82 e0       	ldi	r24, 0x02	; 2
    3510:	60 e0       	ldi	r22, 0x00	; 0
    3512:	41 e0       	ldi	r20, 0x01	; 1
    3514:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN1,OUTPUT);
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	61 e0       	ldi	r22, 0x01	; 1
    351c:	41 e0       	ldi	r20, 0x01	; 1
    351e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN2,OUTPUT);
    3522:	82 e0       	ldi	r24, 0x02	; 2
    3524:	62 e0       	ldi	r22, 0x02	; 2
    3526:	41 e0       	ldi	r20, 0x01	; 1
    3528:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN3,OUTPUT);
    352c:	82 e0       	ldi	r24, 0x02	; 2
    352e:	63 e0       	ldi	r22, 0x03	; 3
    3530:	41 e0       	ldi	r20, 0x01	; 1
    3532:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    3536:	38 c0       	rjmp	.+112    	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
				default: /* return Error */ break;
			}
		break;
		
		case GPIOD :
			switch(Copy_u8Dir)
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	28 2f       	mov	r18, r24
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	3c 83       	std	Y+4, r19	; 0x04
    3540:	2b 83       	std	Y+3, r18	; 0x03
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	9c 81       	ldd	r25, Y+4	; 0x04
    3546:	00 97       	sbiw	r24, 0x00	; 0
    3548:	31 f0       	breq	.+12     	; 0x3556 <GPIO_voidSet_LOW_NibbleDir+0x1d0>
    354a:	2b 81       	ldd	r18, Y+3	; 0x03
    354c:	3c 81       	ldd	r19, Y+4	; 0x04
    354e:	21 30       	cpi	r18, 0x01	; 1
    3550:	31 05       	cpc	r19, r1
    3552:	b1 f0       	breq	.+44     	; 0x3580 <GPIO_voidSet_LOW_NibbleDir+0x1fa>
    3554:	29 c0       	rjmp	.+82     	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOD,PIN0,INPUT);
    3556:	83 e0       	ldi	r24, 0x03	; 3
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN1,INPUT);
    3560:	83 e0       	ldi	r24, 0x03	; 3
    3562:	61 e0       	ldi	r22, 0x01	; 1
    3564:	40 e0       	ldi	r20, 0x00	; 0
    3566:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN2,INPUT);
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	62 e0       	ldi	r22, 0x02	; 2
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN3,INPUT);
    3574:	83 e0       	ldi	r24, 0x03	; 3
    3576:	63 e0       	ldi	r22, 0x03	; 3
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    357e:	14 c0       	rjmp	.+40     	; 0x35a8 <GPIO_voidSet_LOW_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOD,PIN0,OUTPUT);
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	60 e0       	ldi	r22, 0x00	; 0
    3584:	41 e0       	ldi	r20, 0x01	; 1
    3586:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN1,OUTPUT);
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	61 e0       	ldi	r22, 0x01	; 1
    358e:	41 e0       	ldi	r20, 0x01	; 1
    3590:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN2,OUTPUT);
    3594:	83 e0       	ldi	r24, 0x03	; 3
    3596:	62 e0       	ldi	r22, 0x02	; 2
    3598:	41 e0       	ldi	r20, 0x01	; 1
    359a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN3,OUTPUT);
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	63 e0       	ldi	r22, 0x03	; 3
    35a2:	41 e0       	ldi	r20, 0x01	; 1
    35a4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
			}
		break;
		default: /* return error */ break;
		
	}
}
    35a8:	2c 96       	adiw	r28, 0x0c	; 12
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	f8 94       	cli
    35ae:	de bf       	out	0x3e, r29	; 62
    35b0:	0f be       	out	0x3f, r0	; 63
    35b2:	cd bf       	out	0x3d, r28	; 61
    35b4:	cf 91       	pop	r28
    35b6:	df 91       	pop	r29
    35b8:	08 95       	ret

000035ba <GPIO_voidSet_HIGH_NibbleDir>:

void GPIO_voidSet_HIGH_NibbleDir(u8 Copy_u8PortNum, u8 Copy_u8Dir)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	2c 97       	sbiw	r28, 0x0c	; 12
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
    35ce:	89 83       	std	Y+1, r24	; 0x01
    35d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	28 2f       	mov	r18, r24
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	3c 87       	std	Y+12, r19	; 0x0c
    35da:	2b 87       	std	Y+11, r18	; 0x0b
    35dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    35de:	9c 85       	ldd	r25, Y+12	; 0x0c
    35e0:	81 30       	cpi	r24, 0x01	; 1
    35e2:	91 05       	cpc	r25, r1
    35e4:	09 f4       	brne	.+2      	; 0x35e8 <GPIO_voidSet_HIGH_NibbleDir+0x2e>
    35e6:	50 c0       	rjmp	.+160    	; 0x3688 <GPIO_voidSet_HIGH_NibbleDir+0xce>
    35e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    35ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    35ec:	22 30       	cpi	r18, 0x02	; 2
    35ee:	31 05       	cpc	r19, r1
    35f0:	2c f4       	brge	.+10     	; 0x35fc <GPIO_voidSet_HIGH_NibbleDir+0x42>
    35f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    35f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    35f6:	00 97       	sbiw	r24, 0x00	; 0
    35f8:	71 f0       	breq	.+28     	; 0x3616 <GPIO_voidSet_HIGH_NibbleDir+0x5c>
    35fa:	f0 c0       	rjmp	.+480    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
    35fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    35fe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3600:	22 30       	cpi	r18, 0x02	; 2
    3602:	31 05       	cpc	r19, r1
    3604:	09 f4       	brne	.+2      	; 0x3608 <GPIO_voidSet_HIGH_NibbleDir+0x4e>
    3606:	79 c0       	rjmp	.+242    	; 0x36fa <GPIO_voidSet_HIGH_NibbleDir+0x140>
    3608:	8b 85       	ldd	r24, Y+11	; 0x0b
    360a:	9c 85       	ldd	r25, Y+12	; 0x0c
    360c:	83 30       	cpi	r24, 0x03	; 3
    360e:	91 05       	cpc	r25, r1
    3610:	09 f4       	brne	.+2      	; 0x3614 <GPIO_voidSet_HIGH_NibbleDir+0x5a>
    3612:	ac c0       	rjmp	.+344    	; 0x376c <GPIO_voidSet_HIGH_NibbleDir+0x1b2>
    3614:	e3 c0       	rjmp	.+454    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
	{
		case GPIOA :
			switch(Copy_u8Dir)
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	28 2f       	mov	r18, r24
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	3a 87       	std	Y+10, r19	; 0x0a
    361e:	29 87       	std	Y+9, r18	; 0x09
    3620:	89 85       	ldd	r24, Y+9	; 0x09
    3622:	9a 85       	ldd	r25, Y+10	; 0x0a
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	31 f0       	breq	.+12     	; 0x3634 <GPIO_voidSet_HIGH_NibbleDir+0x7a>
    3628:	29 85       	ldd	r18, Y+9	; 0x09
    362a:	3a 85       	ldd	r19, Y+10	; 0x0a
    362c:	21 30       	cpi	r18, 0x01	; 1
    362e:	31 05       	cpc	r19, r1
    3630:	b1 f0       	breq	.+44     	; 0x365e <GPIO_voidSet_HIGH_NibbleDir+0xa4>
    3632:	d4 c0       	rjmp	.+424    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOA,PIN4,INPUT);
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	64 e0       	ldi	r22, 0x04	; 4
    3638:	40 e0       	ldi	r20, 0x00	; 0
    363a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN5,INPUT);
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	65 e0       	ldi	r22, 0x05	; 5
    3642:	40 e0       	ldi	r20, 0x00	; 0
    3644:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN6,INPUT);
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	66 e0       	ldi	r22, 0x06	; 6
    364c:	40 e0       	ldi	r20, 0x00	; 0
    364e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN7,INPUT);
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	67 e0       	ldi	r22, 0x07	; 7
    3656:	40 e0       	ldi	r20, 0x00	; 0
    3658:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    365c:	bf c0       	rjmp	.+382    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOA,PIN4,OUTPUT);
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	64 e0       	ldi	r22, 0x04	; 4
    3662:	41 e0       	ldi	r20, 0x01	; 1
    3664:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN5,OUTPUT);
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	65 e0       	ldi	r22, 0x05	; 5
    366c:	41 e0       	ldi	r20, 0x01	; 1
    366e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN6,OUTPUT);
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	66 e0       	ldi	r22, 0x06	; 6
    3676:	41 e0       	ldi	r20, 0x01	; 1
    3678:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOA,PIN7,OUTPUT);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	67 e0       	ldi	r22, 0x07	; 7
    3680:	41 e0       	ldi	r20, 0x01	; 1
    3682:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    3686:	aa c0       	rjmp	.+340    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				default: /* return error */ break;
			}
		break;
		case GPIOB :
			switch(Copy_u8Dir)
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	38 87       	std	Y+8, r19	; 0x08
    3690:	2f 83       	std	Y+7, r18	; 0x07
    3692:	8f 81       	ldd	r24, Y+7	; 0x07
    3694:	98 85       	ldd	r25, Y+8	; 0x08
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	31 f0       	breq	.+12     	; 0x36a6 <GPIO_voidSet_HIGH_NibbleDir+0xec>
    369a:	2f 81       	ldd	r18, Y+7	; 0x07
    369c:	38 85       	ldd	r19, Y+8	; 0x08
    369e:	21 30       	cpi	r18, 0x01	; 1
    36a0:	31 05       	cpc	r19, r1
    36a2:	b1 f0       	breq	.+44     	; 0x36d0 <GPIO_voidSet_HIGH_NibbleDir+0x116>
    36a4:	9b c0       	rjmp	.+310    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOB,PIN4,INPUT);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	64 e0       	ldi	r22, 0x04	; 4
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN5,INPUT);
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	65 e0       	ldi	r22, 0x05	; 5
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN6,INPUT);
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	66 e0       	ldi	r22, 0x06	; 6
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN7,INPUT);
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	67 e0       	ldi	r22, 0x07	; 7
    36c8:	40 e0       	ldi	r20, 0x00	; 0
    36ca:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    36ce:	86 c0       	rjmp	.+268    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
						      break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOB,PIN4,OUTPUT);
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	64 e0       	ldi	r22, 0x04	; 4
    36d4:	41 e0       	ldi	r20, 0x01	; 1
    36d6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN5,OUTPUT);
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	65 e0       	ldi	r22, 0x05	; 5
    36de:	41 e0       	ldi	r20, 0x01	; 1
    36e0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN6,OUTPUT);
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	66 e0       	ldi	r22, 0x06	; 6
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOB,PIN7,OUTPUT);
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	67 e0       	ldi	r22, 0x07	; 7
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    36f8:	71 c0       	rjmp	.+226    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
				default: /* return Error */ break;
			}
		break;
		
		case GPIOC :
			switch(Copy_u8Dir)
    36fa:	8a 81       	ldd	r24, Y+2	; 0x02
    36fc:	28 2f       	mov	r18, r24
    36fe:	30 e0       	ldi	r19, 0x00	; 0
    3700:	3e 83       	std	Y+6, r19	; 0x06
    3702:	2d 83       	std	Y+5, r18	; 0x05
    3704:	8d 81       	ldd	r24, Y+5	; 0x05
    3706:	9e 81       	ldd	r25, Y+6	; 0x06
    3708:	00 97       	sbiw	r24, 0x00	; 0
    370a:	31 f0       	breq	.+12     	; 0x3718 <GPIO_voidSet_HIGH_NibbleDir+0x15e>
    370c:	2d 81       	ldd	r18, Y+5	; 0x05
    370e:	3e 81       	ldd	r19, Y+6	; 0x06
    3710:	21 30       	cpi	r18, 0x01	; 1
    3712:	31 05       	cpc	r19, r1
    3714:	b1 f0       	breq	.+44     	; 0x3742 <GPIO_voidSet_HIGH_NibbleDir+0x188>
    3716:	62 c0       	rjmp	.+196    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOC,PIN4,INPUT);
    3718:	82 e0       	ldi	r24, 0x02	; 2
    371a:	64 e0       	ldi	r22, 0x04	; 4
    371c:	40 e0       	ldi	r20, 0x00	; 0
    371e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN5,INPUT);
    3722:	82 e0       	ldi	r24, 0x02	; 2
    3724:	65 e0       	ldi	r22, 0x05	; 5
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN6,INPUT);
    372c:	82 e0       	ldi	r24, 0x02	; 2
    372e:	66 e0       	ldi	r22, 0x06	; 6
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN7,INPUT);
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	67 e0       	ldi	r22, 0x07	; 7
    373a:	40 e0       	ldi	r20, 0x00	; 0
    373c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    3740:	4d c0       	rjmp	.+154    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOC,PIN4,OUTPUT);
    3742:	82 e0       	ldi	r24, 0x02	; 2
    3744:	64 e0       	ldi	r22, 0x04	; 4
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN5,OUTPUT);
    374c:	82 e0       	ldi	r24, 0x02	; 2
    374e:	65 e0       	ldi	r22, 0x05	; 5
    3750:	41 e0       	ldi	r20, 0x01	; 1
    3752:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN6,OUTPUT);
    3756:	82 e0       	ldi	r24, 0x02	; 2
    3758:	66 e0       	ldi	r22, 0x06	; 6
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOC,PIN7,OUTPUT);
    3760:	82 e0       	ldi	r24, 0x02	; 2
    3762:	67 e0       	ldi	r22, 0x07	; 7
    3764:	41 e0       	ldi	r20, 0x01	; 1
    3766:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    376a:	38 c0       	rjmp	.+112    	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
				default: /* return Error */ break;
			}
		break;
		
		case GPIOD :
			switch(Copy_u8Dir)
    376c:	8a 81       	ldd	r24, Y+2	; 0x02
    376e:	28 2f       	mov	r18, r24
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	3c 83       	std	Y+4, r19	; 0x04
    3774:	2b 83       	std	Y+3, r18	; 0x03
    3776:	8b 81       	ldd	r24, Y+3	; 0x03
    3778:	9c 81       	ldd	r25, Y+4	; 0x04
    377a:	00 97       	sbiw	r24, 0x00	; 0
    377c:	31 f0       	breq	.+12     	; 0x378a <GPIO_voidSet_HIGH_NibbleDir+0x1d0>
    377e:	2b 81       	ldd	r18, Y+3	; 0x03
    3780:	3c 81       	ldd	r19, Y+4	; 0x04
    3782:	21 30       	cpi	r18, 0x01	; 1
    3784:	31 05       	cpc	r19, r1
    3786:	b1 f0       	breq	.+44     	; 0x37b4 <GPIO_voidSet_HIGH_NibbleDir+0x1fa>
    3788:	29 c0       	rjmp	.+82     	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
			{
				case INPUT  : GPIO_voidSetPinDir(GPIOD,PIN4,INPUT);
    378a:	83 e0       	ldi	r24, 0x03	; 3
    378c:	64 e0       	ldi	r22, 0x04	; 4
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN5,INPUT);
    3794:	83 e0       	ldi	r24, 0x03	; 3
    3796:	65 e0       	ldi	r22, 0x05	; 5
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN6,INPUT);
    379e:	83 e0       	ldi	r24, 0x03	; 3
    37a0:	66 e0       	ldi	r22, 0x06	; 6
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN7,INPUT);
    37a8:	83 e0       	ldi	r24, 0x03	; 3
    37aa:	67 e0       	ldi	r22, 0x07	; 7
    37ac:	40 e0       	ldi	r20, 0x00	; 0
    37ae:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    37b2:	14 c0       	rjmp	.+40     	; 0x37dc <GPIO_voidSet_HIGH_NibbleDir+0x222>
							  break;
				
				case OUTPUT : GPIO_voidSetPinDir(GPIOD,PIN4,OUTPUT);
    37b4:	83 e0       	ldi	r24, 0x03	; 3
    37b6:	64 e0       	ldi	r22, 0x04	; 4
    37b8:	41 e0       	ldi	r20, 0x01	; 1
    37ba:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN5,OUTPUT);
    37be:	83 e0       	ldi	r24, 0x03	; 3
    37c0:	65 e0       	ldi	r22, 0x05	; 5
    37c2:	41 e0       	ldi	r20, 0x01	; 1
    37c4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN6,OUTPUT);
    37c8:	83 e0       	ldi	r24, 0x03	; 3
    37ca:	66 e0       	ldi	r22, 0x06	; 6
    37cc:	41 e0       	ldi	r20, 0x01	; 1
    37ce:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
							  GPIO_voidSetPinDir(GPIOD,PIN7,OUTPUT);
    37d2:	83 e0       	ldi	r24, 0x03	; 3
    37d4:	67 e0       	ldi	r22, 0x07	; 7
    37d6:	41 e0       	ldi	r20, 0x01	; 1
    37d8:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
			}
		break;
		default: /* return error */ break;
		
	}
}
    37dc:	2c 96       	adiw	r28, 0x0c	; 12
    37de:	0f b6       	in	r0, 0x3f	; 63
    37e0:	f8 94       	cli
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	0f be       	out	0x3f, r0	; 63
    37e6:	cd bf       	out	0x3d, r28	; 61
    37e8:	cf 91       	pop	r28
    37ea:	df 91       	pop	r29
    37ec:	08 95       	ret

000037ee <GPIO_voidSet_LOW_NibbleVal>:

void GPIO_voidSet_LOW_NibbleVal(u8 Copy_u8portnum, u8 Copy_u8value)
{
    37ee:	df 93       	push	r29
    37f0:	cf 93       	push	r28
    37f2:	00 d0       	rcall	.+0      	; 0x37f4 <GPIO_voidSet_LOW_NibbleVal+0x6>
    37f4:	00 d0       	rcall	.+0      	; 0x37f6 <GPIO_voidSet_LOW_NibbleVal+0x8>
    37f6:	0f 92       	push	r0
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	8a 83       	std	Y+2, r24	; 0x02
    37fe:	6b 83       	std	Y+3, r22	; 0x03
	u8 temp_data = Copy_u8value & 0x0F ;
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	8f 70       	andi	r24, 0x0F	; 15
    3804:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8portnum)
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	3d 83       	std	Y+5, r19	; 0x05
    380e:	2c 83       	std	Y+4, r18	; 0x04
    3810:	8c 81       	ldd	r24, Y+4	; 0x04
    3812:	9d 81       	ldd	r25, Y+5	; 0x05
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	91 05       	cpc	r25, r1
    3818:	29 f1       	breq	.+74     	; 0x3864 <GPIO_voidSet_LOW_NibbleVal+0x76>
    381a:	2c 81       	ldd	r18, Y+4	; 0x04
    381c:	3d 81       	ldd	r19, Y+5	; 0x05
    381e:	22 30       	cpi	r18, 0x02	; 2
    3820:	31 05       	cpc	r19, r1
    3822:	2c f4       	brge	.+10     	; 0x382e <GPIO_voidSet_LOW_NibbleVal+0x40>
    3824:	8c 81       	ldd	r24, Y+4	; 0x04
    3826:	9d 81       	ldd	r25, Y+5	; 0x05
    3828:	00 97       	sbiw	r24, 0x00	; 0
    382a:	61 f0       	breq	.+24     	; 0x3844 <GPIO_voidSet_LOW_NibbleVal+0x56>
    382c:	4a c0       	rjmp	.+148    	; 0x38c2 <GPIO_voidSet_LOW_NibbleVal+0xd4>
    382e:	2c 81       	ldd	r18, Y+4	; 0x04
    3830:	3d 81       	ldd	r19, Y+5	; 0x05
    3832:	22 30       	cpi	r18, 0x02	; 2
    3834:	31 05       	cpc	r19, r1
    3836:	31 f1       	breq	.+76     	; 0x3884 <GPIO_voidSet_LOW_NibbleVal+0x96>
    3838:	8c 81       	ldd	r24, Y+4	; 0x04
    383a:	9d 81       	ldd	r25, Y+5	; 0x05
    383c:	83 30       	cpi	r24, 0x03	; 3
    383e:	91 05       	cpc	r25, r1
    3840:	89 f1       	breq	.+98     	; 0x38a4 <GPIO_voidSet_LOW_NibbleVal+0xb6>
    3842:	3f c0       	rjmp	.+126    	; 0x38c2 <GPIO_voidSet_LOW_NibbleVal+0xd4>
	{
	case GPIOA :	PORTA &= 0xF0 ;   
    3844:	ab e3       	ldi	r26, 0x3B	; 59
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	eb e3       	ldi	r30, 0x3B	; 59
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	80 7f       	andi	r24, 0xF0	; 240
    3850:	8c 93       	st	X, r24
					PORTA |= temp_data;
    3852:	ab e3       	ldi	r26, 0x3B	; 59
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	eb e3       	ldi	r30, 0x3B	; 59
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	90 81       	ld	r25, Z
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	89 2b       	or	r24, r25
    3860:	8c 93       	st	X, r24
    3862:	2f c0       	rjmp	.+94     	; 0x38c2 <GPIO_voidSet_LOW_NibbleVal+0xd4>
					break;
					
	case GPIOB :	PORTB &= 0xF0 ;
    3864:	a8 e3       	ldi	r26, 0x38	; 56
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	e8 e3       	ldi	r30, 0x38	; 56
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
    386e:	80 7f       	andi	r24, 0xF0	; 240
    3870:	8c 93       	st	X, r24
					PORTB |= temp_data;
    3872:	a8 e3       	ldi	r26, 0x38	; 56
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	e8 e3       	ldi	r30, 0x38	; 56
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	90 81       	ld	r25, Z
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	89 2b       	or	r24, r25
    3880:	8c 93       	st	X, r24
    3882:	1f c0       	rjmp	.+62     	; 0x38c2 <GPIO_voidSet_LOW_NibbleVal+0xd4>
					break;
					
	case GPIOC :    PORTC &= 0xF0 ;
    3884:	a5 e3       	ldi	r26, 0x35	; 53
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e5 e3       	ldi	r30, 0x35	; 53
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	80 7f       	andi	r24, 0xF0	; 240
    3890:	8c 93       	st	X, r24
					PORTC |= temp_data;
    3892:	a5 e3       	ldi	r26, 0x35	; 53
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e5 e3       	ldi	r30, 0x35	; 53
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	90 81       	ld	r25, Z
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	89 2b       	or	r24, r25
    38a0:	8c 93       	st	X, r24
    38a2:	0f c0       	rjmp	.+30     	; 0x38c2 <GPIO_voidSet_LOW_NibbleVal+0xd4>
					break;
					
	case GPIOD :	PORTD &= 0xF0 ;
    38a4:	a2 e3       	ldi	r26, 0x32	; 50
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	e2 e3       	ldi	r30, 0x32	; 50
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	80 7f       	andi	r24, 0xF0	; 240
    38b0:	8c 93       	st	X, r24
					PORTD |= temp_data;
    38b2:	a2 e3       	ldi	r26, 0x32	; 50
    38b4:	b0 e0       	ldi	r27, 0x00	; 0
    38b6:	e2 e3       	ldi	r30, 0x32	; 50
    38b8:	f0 e0       	ldi	r31, 0x00	; 0
    38ba:	90 81       	ld	r25, Z
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	89 2b       	or	r24, r25
    38c0:	8c 93       	st	X, r24
					break;
	default: /* return error */break; 
		
	}
	
}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	cf 91       	pop	r28
    38ce:	df 91       	pop	r29
    38d0:	08 95       	ret

000038d2 <GPIO_voidSet_HIGH_NibbleVal>:

void GPIO_voidSet_HIGH_NibbleVal(u8 Copy_u8portnum, u8 Copy_u8value)
{
    38d2:	df 93       	push	r29
    38d4:	cf 93       	push	r28
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <GPIO_voidSet_HIGH_NibbleVal+0x6>
    38d8:	00 d0       	rcall	.+0      	; 0x38da <GPIO_voidSet_HIGH_NibbleVal+0x8>
    38da:	0f 92       	push	r0
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	8a 83       	std	Y+2, r24	; 0x02
    38e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 temp_data = ( Copy_u8value << 4 ) ;
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	82 95       	swap	r24
    38e8:	80 7f       	andi	r24, 0xF0	; 240
    38ea:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8portnum)
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
    38ee:	28 2f       	mov	r18, r24
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	3d 83       	std	Y+5, r19	; 0x05
    38f4:	2c 83       	std	Y+4, r18	; 0x04
    38f6:	8c 81       	ldd	r24, Y+4	; 0x04
    38f8:	9d 81       	ldd	r25, Y+5	; 0x05
    38fa:	81 30       	cpi	r24, 0x01	; 1
    38fc:	91 05       	cpc	r25, r1
    38fe:	29 f1       	breq	.+74     	; 0x394a <GPIO_voidSet_HIGH_NibbleVal+0x78>
    3900:	2c 81       	ldd	r18, Y+4	; 0x04
    3902:	3d 81       	ldd	r19, Y+5	; 0x05
    3904:	22 30       	cpi	r18, 0x02	; 2
    3906:	31 05       	cpc	r19, r1
    3908:	2c f4       	brge	.+10     	; 0x3914 <GPIO_voidSet_HIGH_NibbleVal+0x42>
    390a:	8c 81       	ldd	r24, Y+4	; 0x04
    390c:	9d 81       	ldd	r25, Y+5	; 0x05
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	61 f0       	breq	.+24     	; 0x392a <GPIO_voidSet_HIGH_NibbleVal+0x58>
    3912:	4a c0       	rjmp	.+148    	; 0x39a8 <GPIO_voidSet_HIGH_NibbleVal+0xd6>
    3914:	2c 81       	ldd	r18, Y+4	; 0x04
    3916:	3d 81       	ldd	r19, Y+5	; 0x05
    3918:	22 30       	cpi	r18, 0x02	; 2
    391a:	31 05       	cpc	r19, r1
    391c:	31 f1       	breq	.+76     	; 0x396a <GPIO_voidSet_HIGH_NibbleVal+0x98>
    391e:	8c 81       	ldd	r24, Y+4	; 0x04
    3920:	9d 81       	ldd	r25, Y+5	; 0x05
    3922:	83 30       	cpi	r24, 0x03	; 3
    3924:	91 05       	cpc	r25, r1
    3926:	89 f1       	breq	.+98     	; 0x398a <GPIO_voidSet_HIGH_NibbleVal+0xb8>
    3928:	3f c0       	rjmp	.+126    	; 0x39a8 <GPIO_voidSet_HIGH_NibbleVal+0xd6>
	{
		case GPIOA :	PORTA &= 0x0F ;
    392a:	ab e3       	ldi	r26, 0x3B	; 59
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	eb e3       	ldi	r30, 0x3B	; 59
    3930:	f0 e0       	ldi	r31, 0x00	; 0
    3932:	80 81       	ld	r24, Z
    3934:	8f 70       	andi	r24, 0x0F	; 15
    3936:	8c 93       	st	X, r24
						PORTA |= temp_data;
    3938:	ab e3       	ldi	r26, 0x3B	; 59
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	eb e3       	ldi	r30, 0x3B	; 59
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	90 81       	ld	r25, Z
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	89 2b       	or	r24, r25
    3946:	8c 93       	st	X, r24
    3948:	2f c0       	rjmp	.+94     	; 0x39a8 <GPIO_voidSet_HIGH_NibbleVal+0xd6>
						break;
		
		case GPIOB :	PORTB &= 0x0F ;
    394a:	a8 e3       	ldi	r26, 0x38	; 56
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	e8 e3       	ldi	r30, 0x38	; 56
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	8f 70       	andi	r24, 0x0F	; 15
    3956:	8c 93       	st	X, r24
						PORTB |= temp_data;
    3958:	a8 e3       	ldi	r26, 0x38	; 56
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e8 e3       	ldi	r30, 0x38	; 56
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	90 81       	ld	r25, Z
    3962:	89 81       	ldd	r24, Y+1	; 0x01
    3964:	89 2b       	or	r24, r25
    3966:	8c 93       	st	X, r24
    3968:	1f c0       	rjmp	.+62     	; 0x39a8 <GPIO_voidSet_HIGH_NibbleVal+0xd6>
						break;
		
		case GPIOC :    PORTC &= 0x0F ;
    396a:	a5 e3       	ldi	r26, 0x35	; 53
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e5 e3       	ldi	r30, 0x35	; 53
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	8f 70       	andi	r24, 0x0F	; 15
    3976:	8c 93       	st	X, r24
						PORTC |= temp_data;
    3978:	a5 e3       	ldi	r26, 0x35	; 53
    397a:	b0 e0       	ldi	r27, 0x00	; 0
    397c:	e5 e3       	ldi	r30, 0x35	; 53
    397e:	f0 e0       	ldi	r31, 0x00	; 0
    3980:	90 81       	ld	r25, Z
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	89 2b       	or	r24, r25
    3986:	8c 93       	st	X, r24
    3988:	0f c0       	rjmp	.+30     	; 0x39a8 <GPIO_voidSet_HIGH_NibbleVal+0xd6>
						break;
		
		case GPIOD :	PORTD &= 0x0F;
    398a:	a2 e3       	ldi	r26, 0x32	; 50
    398c:	b0 e0       	ldi	r27, 0x00	; 0
    398e:	e2 e3       	ldi	r30, 0x32	; 50
    3990:	f0 e0       	ldi	r31, 0x00	; 0
    3992:	80 81       	ld	r24, Z
    3994:	8f 70       	andi	r24, 0x0F	; 15
    3996:	8c 93       	st	X, r24
						PORTD |= temp_data;
    3998:	a2 e3       	ldi	r26, 0x32	; 50
    399a:	b0 e0       	ldi	r27, 0x00	; 0
    399c:	e2 e3       	ldi	r30, 0x32	; 50
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	90 81       	ld	r25, Z
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	89 2b       	or	r24, r25
    39a6:	8c 93       	st	X, r24
						break;
		default: /* return error */break;
		
	}
	
}
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	0f 90       	pop	r0
    39b0:	0f 90       	pop	r0
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	08 95       	ret

000039b8 <CLCD_voidInit>:
#include "CLCD_private.h"
#include "util/delay.h"


void CLCD_voidInit(void)
{
    39b8:	df 93       	push	r29
    39ba:	cf 93       	push	r28
    39bc:	cd b7       	in	r28, 0x3d	; 61
    39be:	de b7       	in	r29, 0x3e	; 62
    39c0:	e8 97       	sbiw	r28, 0x38	; 56
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidSetPortDir	(	CLCD_DATA_PORT	, 	0xFF	);
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	6f ef       	ldi	r22, 0xFF	; 255
    39d0:	0e 94 3c 18 	call	0x3078	; 0x3078 <GPIO_voidSetPortDir>
	GPIO_voidSetPinDir	(	CLCD_RW			,	OUTPUT	);
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	61 e0       	ldi	r22, 0x01	; 1
    39d8:	41 e0       	ldi	r20, 0x01	; 1
    39da:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir	(	CLCD_EN			,	OUTPUT	);
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	62 e0       	ldi	r22, 0x02	; 2
    39e2:	41 e0       	ldi	r20, 0x01	; 1
    39e4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir	(	CLCD_RS			,	OUTPUT	);
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
    39f2:	80 e0       	ldi	r24, 0x00	; 0
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	a8 e4       	ldi	r26, 0x48	; 72
    39f8:	b2 e4       	ldi	r27, 0x42	; 66
    39fa:	8d ab       	std	Y+53, r24	; 0x35
    39fc:	9e ab       	std	Y+54, r25	; 0x36
    39fe:	af ab       	std	Y+55, r26	; 0x37
    3a00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a02:	6d a9       	ldd	r22, Y+53	; 0x35
    3a04:	7e a9       	ldd	r23, Y+54	; 0x36
    3a06:	8f a9       	ldd	r24, Y+55	; 0x37
    3a08:	98 ad       	ldd	r25, Y+56	; 0x38
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	4a ef       	ldi	r20, 0xFA	; 250
    3a10:	54 e4       	ldi	r21, 0x44	; 68
    3a12:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	89 ab       	std	Y+49, r24	; 0x31
    3a1c:	9a ab       	std	Y+50, r25	; 0x32
    3a1e:	ab ab       	std	Y+51, r26	; 0x33
    3a20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a22:	69 a9       	ldd	r22, Y+49	; 0x31
    3a24:	7a a9       	ldd	r23, Y+50	; 0x32
    3a26:	8b a9       	ldd	r24, Y+51	; 0x33
    3a28:	9c a9       	ldd	r25, Y+52	; 0x34
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	30 e0       	ldi	r19, 0x00	; 0
    3a2e:	40 e8       	ldi	r20, 0x80	; 128
    3a30:	5f e3       	ldi	r21, 0x3F	; 63
    3a32:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3a36:	88 23       	and	r24, r24
    3a38:	2c f4       	brge	.+10     	; 0x3a44 <CLCD_voidInit+0x8c>
		__ticks = 1;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	98 ab       	std	Y+48, r25	; 0x30
    3a40:	8f a7       	std	Y+47, r24	; 0x2f
    3a42:	3f c0       	rjmp	.+126    	; 0x3ac2 <CLCD_voidInit+0x10a>
	else if (__tmp > 65535)
    3a44:	69 a9       	ldd	r22, Y+49	; 0x31
    3a46:	7a a9       	ldd	r23, Y+50	; 0x32
    3a48:	8b a9       	ldd	r24, Y+51	; 0x33
    3a4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a4c:	20 e0       	ldi	r18, 0x00	; 0
    3a4e:	3f ef       	ldi	r19, 0xFF	; 255
    3a50:	4f e7       	ldi	r20, 0x7F	; 127
    3a52:	57 e4       	ldi	r21, 0x47	; 71
    3a54:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3a58:	18 16       	cp	r1, r24
    3a5a:	4c f5       	brge	.+82     	; 0x3aae <CLCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5c:	6d a9       	ldd	r22, Y+53	; 0x35
    3a5e:	7e a9       	ldd	r23, Y+54	; 0x36
    3a60:	8f a9       	ldd	r24, Y+55	; 0x37
    3a62:	98 ad       	ldd	r25, Y+56	; 0x38
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	30 e0       	ldi	r19, 0x00	; 0
    3a68:	40 e2       	ldi	r20, 0x20	; 32
    3a6a:	51 e4       	ldi	r21, 0x41	; 65
    3a6c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	bc 01       	movw	r22, r24
    3a76:	cd 01       	movw	r24, r26
    3a78:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	98 ab       	std	Y+48, r25	; 0x30
    3a82:	8f a7       	std	Y+47, r24	; 0x2f
    3a84:	0f c0       	rjmp	.+30     	; 0x3aa4 <CLCD_voidInit+0xec>
    3a86:	88 ec       	ldi	r24, 0xC8	; 200
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	9e a7       	std	Y+46, r25	; 0x2e
    3a8c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a90:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <CLCD_voidInit+0xda>
    3a96:	9e a7       	std	Y+46, r25	; 0x2e
    3a98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a9c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a9e:	01 97       	sbiw	r24, 0x01	; 1
    3aa0:	98 ab       	std	Y+48, r25	; 0x30
    3aa2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	69 f7       	brne	.-38     	; 0x3a86 <CLCD_voidInit+0xce>
    3aac:	14 c0       	rjmp	.+40     	; 0x3ad6 <CLCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aae:	69 a9       	ldd	r22, Y+49	; 0x31
    3ab0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ab2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ab4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ab6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3aba:	dc 01       	movw	r26, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	98 ab       	std	Y+48, r25	; 0x30
    3ac0:	8f a7       	std	Y+47, r24	; 0x2f
    3ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ac4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ac6:	9c a7       	std	Y+44, r25	; 0x2c
    3ac8:	8b a7       	std	Y+43, r24	; 0x2b
    3aca:	8b a5       	ldd	r24, Y+43	; 0x2b
    3acc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <CLCD_voidInit+0x116>
    3ad2:	9c a7       	std	Y+44, r25	; 0x2c
    3ad4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	CLCD_voidSendCommand	( CLCD_EIGHT_BIT_TWO_LINE_5_8 );
    3ad6:	8c e3       	ldi	r24, 0x3C	; 60
    3ad8:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	a0 e8       	ldi	r26, 0x80	; 128
    3ae2:	bf e3       	ldi	r27, 0x3F	; 63
    3ae4:	8f a3       	std	Y+39, r24	; 0x27
    3ae6:	98 a7       	std	Y+40, r25	; 0x28
    3ae8:	a9 a7       	std	Y+41, r26	; 0x29
    3aea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aec:	6f a1       	ldd	r22, Y+39	; 0x27
    3aee:	78 a5       	ldd	r23, Y+40	; 0x28
    3af0:	89 a5       	ldd	r24, Y+41	; 0x29
    3af2:	9a a5       	ldd	r25, Y+42	; 0x2a
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	4a ef       	ldi	r20, 0xFA	; 250
    3afa:	54 e4       	ldi	r21, 0x44	; 68
    3afc:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3b00:	dc 01       	movw	r26, r24
    3b02:	cb 01       	movw	r24, r22
    3b04:	8b a3       	std	Y+35, r24	; 0x23
    3b06:	9c a3       	std	Y+36, r25	; 0x24
    3b08:	ad a3       	std	Y+37, r26	; 0x25
    3b0a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b10:	8d a1       	ldd	r24, Y+37	; 0x25
    3b12:	9e a1       	ldd	r25, Y+38	; 0x26
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	40 e8       	ldi	r20, 0x80	; 128
    3b1a:	5f e3       	ldi	r21, 0x3F	; 63
    3b1c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3b20:	88 23       	and	r24, r24
    3b22:	2c f4       	brge	.+10     	; 0x3b2e <CLCD_voidInit+0x176>
		__ticks = 1;
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	9a a3       	std	Y+34, r25	; 0x22
    3b2a:	89 a3       	std	Y+33, r24	; 0x21
    3b2c:	3f c0       	rjmp	.+126    	; 0x3bac <CLCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    3b2e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b30:	7c a1       	ldd	r23, Y+36	; 0x24
    3b32:	8d a1       	ldd	r24, Y+37	; 0x25
    3b34:	9e a1       	ldd	r25, Y+38	; 0x26
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	3f ef       	ldi	r19, 0xFF	; 255
    3b3a:	4f e7       	ldi	r20, 0x7F	; 127
    3b3c:	57 e4       	ldi	r21, 0x47	; 71
    3b3e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3b42:	18 16       	cp	r1, r24
    3b44:	4c f5       	brge	.+82     	; 0x3b98 <CLCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b46:	6f a1       	ldd	r22, Y+39	; 0x27
    3b48:	78 a5       	ldd	r23, Y+40	; 0x28
    3b4a:	89 a5       	ldd	r24, Y+41	; 0x29
    3b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e2       	ldi	r20, 0x20	; 32
    3b54:	51 e4       	ldi	r21, 0x41	; 65
    3b56:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	bc 01       	movw	r22, r24
    3b60:	cd 01       	movw	r24, r26
    3b62:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b66:	dc 01       	movw	r26, r24
    3b68:	cb 01       	movw	r24, r22
    3b6a:	9a a3       	std	Y+34, r25	; 0x22
    3b6c:	89 a3       	std	Y+33, r24	; 0x21
    3b6e:	0f c0       	rjmp	.+30     	; 0x3b8e <CLCD_voidInit+0x1d6>
    3b70:	88 ec       	ldi	r24, 0xC8	; 200
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	98 a3       	std	Y+32, r25	; 0x20
    3b76:	8f 8f       	std	Y+31, r24	; 0x1f
    3b78:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b7a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	f1 f7       	brne	.-4      	; 0x3b7c <CLCD_voidInit+0x1c4>
    3b80:	98 a3       	std	Y+32, r25	; 0x20
    3b82:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b84:	89 a1       	ldd	r24, Y+33	; 0x21
    3b86:	9a a1       	ldd	r25, Y+34	; 0x22
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	9a a3       	std	Y+34, r25	; 0x22
    3b8c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b90:	9a a1       	ldd	r25, Y+34	; 0x22
    3b92:	00 97       	sbiw	r24, 0x00	; 0
    3b94:	69 f7       	brne	.-38     	; 0x3b70 <CLCD_voidInit+0x1b8>
    3b96:	14 c0       	rjmp	.+40     	; 0x3bc0 <CLCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b98:	6b a1       	ldd	r22, Y+35	; 0x23
    3b9a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3ba0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	9a a3       	std	Y+34, r25	; 0x22
    3baa:	89 a3       	std	Y+33, r24	; 0x21
    3bac:	89 a1       	ldd	r24, Y+33	; 0x21
    3bae:	9a a1       	ldd	r25, Y+34	; 0x22
    3bb0:	9e 8f       	std	Y+30, r25	; 0x1e
    3bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    3bb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bb6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	f1 f7       	brne	.-4      	; 0x3bb8 <CLCD_voidInit+0x200>
    3bbc:	9e 8f       	std	Y+30, r25	; 0x1e
    3bbe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand	( CLCD_DISPLAY_ON_CURSOR_ON   );
    3bc0:	8f e0       	ldi	r24, 0x0F	; 15
    3bc2:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	90 e0       	ldi	r25, 0x00	; 0
    3bca:	a0 e8       	ldi	r26, 0x80	; 128
    3bcc:	bf e3       	ldi	r27, 0x3F	; 63
    3bce:	89 8f       	std	Y+25, r24	; 0x19
    3bd0:	9a 8f       	std	Y+26, r25	; 0x1a
    3bd2:	ab 8f       	std	Y+27, r26	; 0x1b
    3bd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	4a ef       	ldi	r20, 0xFA	; 250
    3be4:	54 e4       	ldi	r21, 0x44	; 68
    3be6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	8d 8b       	std	Y+21, r24	; 0x15
    3bf0:	9e 8b       	std	Y+22, r25	; 0x16
    3bf2:	af 8b       	std	Y+23, r26	; 0x17
    3bf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bfe:	20 e0       	ldi	r18, 0x00	; 0
    3c00:	30 e0       	ldi	r19, 0x00	; 0
    3c02:	40 e8       	ldi	r20, 0x80	; 128
    3c04:	5f e3       	ldi	r21, 0x3F	; 63
    3c06:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3c0a:	88 23       	and	r24, r24
    3c0c:	2c f4       	brge	.+10     	; 0x3c18 <CLCD_voidInit+0x260>
		__ticks = 1;
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	9c 8b       	std	Y+20, r25	; 0x14
    3c14:	8b 8b       	std	Y+19, r24	; 0x13
    3c16:	3f c0       	rjmp	.+126    	; 0x3c96 <CLCD_voidInit+0x2de>
	else if (__tmp > 65535)
    3c18:	6d 89       	ldd	r22, Y+21	; 0x15
    3c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	3f ef       	ldi	r19, 0xFF	; 255
    3c24:	4f e7       	ldi	r20, 0x7F	; 127
    3c26:	57 e4       	ldi	r21, 0x47	; 71
    3c28:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3c2c:	18 16       	cp	r1, r24
    3c2e:	4c f5       	brge	.+82     	; 0x3c82 <CLCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c30:	69 8d       	ldd	r22, Y+25	; 0x19
    3c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c38:	20 e0       	ldi	r18, 0x00	; 0
    3c3a:	30 e0       	ldi	r19, 0x00	; 0
    3c3c:	40 e2       	ldi	r20, 0x20	; 32
    3c3e:	51 e4       	ldi	r21, 0x41	; 65
    3c40:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3c44:	dc 01       	movw	r26, r24
    3c46:	cb 01       	movw	r24, r22
    3c48:	bc 01       	movw	r22, r24
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	9c 8b       	std	Y+20, r25	; 0x14
    3c56:	8b 8b       	std	Y+19, r24	; 0x13
    3c58:	0f c0       	rjmp	.+30     	; 0x3c78 <CLCD_voidInit+0x2c0>
    3c5a:	88 ec       	ldi	r24, 0xC8	; 200
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	9a 8b       	std	Y+18, r25	; 0x12
    3c60:	89 8b       	std	Y+17, r24	; 0x11
    3c62:	89 89       	ldd	r24, Y+17	; 0x11
    3c64:	9a 89       	ldd	r25, Y+18	; 0x12
    3c66:	01 97       	sbiw	r24, 0x01	; 1
    3c68:	f1 f7       	brne	.-4      	; 0x3c66 <CLCD_voidInit+0x2ae>
    3c6a:	9a 8b       	std	Y+18, r25	; 0x12
    3c6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c70:	9c 89       	ldd	r25, Y+20	; 0x14
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	9c 8b       	std	Y+20, r25	; 0x14
    3c76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c78:	8b 89       	ldd	r24, Y+19	; 0x13
    3c7a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c7c:	00 97       	sbiw	r24, 0x00	; 0
    3c7e:	69 f7       	brne	.-38     	; 0x3c5a <CLCD_voidInit+0x2a2>
    3c80:	14 c0       	rjmp	.+40     	; 0x3caa <CLCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c82:	6d 89       	ldd	r22, Y+21	; 0x15
    3c84:	7e 89       	ldd	r23, Y+22	; 0x16
    3c86:	8f 89       	ldd	r24, Y+23	; 0x17
    3c88:	98 8d       	ldd	r25, Y+24	; 0x18
    3c8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	9c 8b       	std	Y+20, r25	; 0x14
    3c94:	8b 8b       	std	Y+19, r24	; 0x13
    3c96:	8b 89       	ldd	r24, Y+19	; 0x13
    3c98:	9c 89       	ldd	r25, Y+20	; 0x14
    3c9a:	98 8b       	std	Y+16, r25	; 0x10
    3c9c:	8f 87       	std	Y+15, r24	; 0x0f
    3c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ca0:	98 89       	ldd	r25, Y+16	; 0x10
    3ca2:	01 97       	sbiw	r24, 0x01	; 1
    3ca4:	f1 f7       	brne	.-4      	; 0x3ca2 <CLCD_voidInit+0x2ea>
    3ca6:	98 8b       	std	Y+16, r25	; 0x10
    3ca8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand	( CLCD_DISPLAY_CLEAR          );
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
    3cb0:	80 e0       	ldi	r24, 0x00	; 0
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	a0 e0       	ldi	r26, 0x00	; 0
    3cb6:	b0 e4       	ldi	r27, 0x40	; 64
    3cb8:	8b 87       	std	Y+11, r24	; 0x0b
    3cba:	9c 87       	std	Y+12, r25	; 0x0c
    3cbc:	ad 87       	std	Y+13, r26	; 0x0d
    3cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	30 e0       	ldi	r19, 0x00	; 0
    3ccc:	4a ef       	ldi	r20, 0xFA	; 250
    3cce:	54 e4       	ldi	r21, 0x44	; 68
    3cd0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3cd4:	dc 01       	movw	r26, r24
    3cd6:	cb 01       	movw	r24, r22
    3cd8:	8f 83       	std	Y+7, r24	; 0x07
    3cda:	98 87       	std	Y+8, r25	; 0x08
    3cdc:	a9 87       	std	Y+9, r26	; 0x09
    3cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce2:	78 85       	ldd	r23, Y+8	; 0x08
    3ce4:	89 85       	ldd	r24, Y+9	; 0x09
    3ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e8       	ldi	r20, 0x80	; 128
    3cee:	5f e3       	ldi	r21, 0x3F	; 63
    3cf0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    3cf4:	88 23       	and	r24, r24
    3cf6:	2c f4       	brge	.+10     	; 0x3d02 <CLCD_voidInit+0x34a>
		__ticks = 1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	9e 83       	std	Y+6, r25	; 0x06
    3cfe:	8d 83       	std	Y+5, r24	; 0x05
    3d00:	3f c0       	rjmp	.+126    	; 0x3d80 <CLCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    3d02:	6f 81       	ldd	r22, Y+7	; 0x07
    3d04:	78 85       	ldd	r23, Y+8	; 0x08
    3d06:	89 85       	ldd	r24, Y+9	; 0x09
    3d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	3f ef       	ldi	r19, 0xFF	; 255
    3d0e:	4f e7       	ldi	r20, 0x7F	; 127
    3d10:	57 e4       	ldi	r21, 0x47	; 71
    3d12:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    3d16:	18 16       	cp	r1, r24
    3d18:	4c f5       	brge	.+82     	; 0x3d6c <CLCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e2       	ldi	r20, 0x20	; 32
    3d28:	51 e4       	ldi	r21, 0x41	; 65
    3d2a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    3d2e:	dc 01       	movw	r26, r24
    3d30:	cb 01       	movw	r24, r22
    3d32:	bc 01       	movw	r22, r24
    3d34:	cd 01       	movw	r24, r26
    3d36:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	9e 83       	std	Y+6, r25	; 0x06
    3d40:	8d 83       	std	Y+5, r24	; 0x05
    3d42:	0f c0       	rjmp	.+30     	; 0x3d62 <CLCD_voidInit+0x3aa>
    3d44:	88 ec       	ldi	r24, 0xC8	; 200
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	9c 83       	std	Y+4, r25	; 0x04
    3d4a:	8b 83       	std	Y+3, r24	; 0x03
    3d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	f1 f7       	brne	.-4      	; 0x3d50 <CLCD_voidInit+0x398>
    3d54:	9c 83       	std	Y+4, r25	; 0x04
    3d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	9e 83       	std	Y+6, r25	; 0x06
    3d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d62:	8d 81       	ldd	r24, Y+5	; 0x05
    3d64:	9e 81       	ldd	r25, Y+6	; 0x06
    3d66:	00 97       	sbiw	r24, 0x00	; 0
    3d68:	69 f7       	brne	.-38     	; 0x3d44 <CLCD_voidInit+0x38c>
    3d6a:	14 c0       	rjmp	.+40     	; 0x3d94 <CLCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6e:	78 85       	ldd	r23, Y+8	; 0x08
    3d70:	89 85       	ldd	r24, Y+9	; 0x09
    3d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d74:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9e 83       	std	Y+6, r25	; 0x06
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	8d 81       	ldd	r24, Y+5	; 0x05
    3d82:	9e 81       	ldd	r25, Y+6	; 0x06
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	89 83       	std	Y+1, r24	; 0x01
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	f1 f7       	brne	.-4      	; 0x3d8c <CLCD_voidInit+0x3d4>
    3d90:	9a 83       	std	Y+2, r25	; 0x02
    3d92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	CLCD_voidSendCommand	( CLCD_SHIFT_DISABEL          );
    3d94:	86 e0       	ldi	r24, 0x06	; 6
    3d96:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>

}
    3d9a:	e8 96       	adiw	r28, 0x38	; 56
    3d9c:	0f b6       	in	r0, 0x3f	; 63
    3d9e:	f8 94       	cli
    3da0:	de bf       	out	0x3e, r29	; 62
    3da2:	0f be       	out	0x3f, r0	; 63
    3da4:	cd bf       	out	0x3d, r28	; 61
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	08 95       	ret

00003dac <CLCD_voidSendCommand>:

void CLCD_voidSendCommand	( u8 Copy_u8Command		)
{
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	0f 92       	push	r0
    3db2:	cd b7       	in	r28, 0x3d	; 61
    3db4:	de b7       	in	r29, 0x3e	; 62
    3db6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Send Command --> Write '0' to the RS Pin of LCD
	 * Writing to the LCD --> Write '0' to  RW Pin of the LCD
	 *   */
	GPIO_voidSetPortVal	(	CLCD_DATA_PORT	, Copy_u8Command	);
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	69 81       	ldd	r22, Y+1	; 0x01
    3dbc:	0e 94 7d 18 	call	0x30fa	; 0x30fa <GPIO_voidSetPortVal>
	GPIO_voidSetPinVal	(	CLCD_RS			, LOW				);
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	60 e0       	ldi	r22, 0x00	; 0
    3dc4:	40 e0       	ldi	r20, 0x00	; 0
    3dc6:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal	(	CLCD_RW			, LOW				);
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	61 e0       	ldi	r22, 0x01	; 1
    3dce:	40 e0       	ldi	r20, 0x00	; 0
    3dd0:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>

	/*Send Trigger to EN Pin*/
	CLCD_voidSendEnableTrigger();
    3dd4:	0e 94 6f 23 	call	0x46de	; 0x46de <CLCD_voidSendEnableTrigger>
}
    3dd8:	0f 90       	pop	r0
    3dda:	cf 91       	pop	r28
    3ddc:	df 91       	pop	r29
    3dde:	08 95       	ret

00003de0 <CLCD_voidSendCharacter>:
void CLCD_voidSendCharacter	( u8 Copy_u8Char		)
{
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	0f 92       	push	r0
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
    3dea:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Send Data --> Write '1' to the RS Pin of LCD
	 * Writing to the LCD --> Write '0' to  RW Pin of the LCD
	 *  */
	GPIO_voidSetPortVal ( 	CLCD_DATA_PORT	, Copy_u8Char	);
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	69 81       	ldd	r22, Y+1	; 0x01
    3df0:	0e 94 7d 18 	call	0x30fa	; 0x30fa <GPIO_voidSetPortVal>
	GPIO_voidSetPinVal 	( 	CLCD_RS       	, HIGH			);
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	60 e0       	ldi	r22, 0x00	; 0
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal 	( 	CLCD_RW			, LOW			);
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	/*Send Trigger to EN Pin*/
	CLCD_voidSendEnableTrigger();
    3e08:	0e 94 6f 23 	call	0x46de	; 0x46de <CLCD_voidSendEnableTrigger>
}
    3e0c:	0f 90       	pop	r0
    3e0e:	cf 91       	pop	r28
    3e10:	df 91       	pop	r29
    3e12:	08 95       	ret

00003e14 <CLCD_voidSendString>:
void CLCD_voidSendString	( u8 * Copy_ptrString	)
{
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	00 d0       	rcall	.+0      	; 0x3e1a <CLCD_voidSendString+0x6>
    3e1a:	0f 92       	push	r0
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	9b 83       	std	Y+3, r25	; 0x03
    3e22:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8CharCounter = 0;
    3e24:	19 82       	std	Y+1, r1	; 0x01
    3e26:	0f c0       	rjmp	.+30     	; 0x3e46 <CLCD_voidSendString+0x32>
	while( Copy_ptrString[LOC_u8CharCounter] != '\0')
	{
		CLCD_voidSendCharacter(Copy_ptrString[LOC_u8CharCounter++]);
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	9b 81       	ldd	r25, Y+3	; 0x03
    3e32:	fc 01       	movw	r30, r24
    3e34:	e2 0f       	add	r30, r18
    3e36:	f3 1f       	adc	r31, r19
    3e38:	90 81       	ld	r25, Z
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	8f 5f       	subi	r24, 0xFF	; 255
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	89 2f       	mov	r24, r25
    3e42:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
	CLCD_voidSendEnableTrigger();
}
void CLCD_voidSendString	( u8 * Copy_ptrString	)
{
	u8 LOC_u8CharCounter = 0;
	while( Copy_ptrString[LOC_u8CharCounter] != '\0')
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	28 2f       	mov	r18, r24
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e50:	fc 01       	movw	r30, r24
    3e52:	e2 0f       	add	r30, r18
    3e54:	f3 1f       	adc	r31, r19
    3e56:	80 81       	ld	r24, Z
    3e58:	88 23       	and	r24, r24
    3e5a:	31 f7       	brne	.-52     	; 0x3e28 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendCharacter(Copy_ptrString[LOC_u8CharCounter++]);
	}
}
    3e5c:	0f 90       	pop	r0
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <CLCD_voidSendNumber>:
void CLCD_voidSendNumber	( u64 Copy_u64Number	)
{
    3e68:	af 92       	push	r10
    3e6a:	bf 92       	push	r11
    3e6c:	cf 92       	push	r12
    3e6e:	df 92       	push	r13
    3e70:	ef 92       	push	r14
    3e72:	ff 92       	push	r15
    3e74:	0f 93       	push	r16
    3e76:	1f 93       	push	r17
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	cd b7       	in	r28, 0x3d	; 61
    3e7e:	de b7       	in	r29, 0x3e	; 62
    3e80:	c6 56       	subi	r28, 0x66	; 102
    3e82:	d0 40       	sbci	r29, 0x00	; 0
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	f8 94       	cli
    3e88:	de bf       	out	0x3e, r29	; 62
    3e8a:	0f be       	out	0x3f, r0	; 63
    3e8c:	cd bf       	out	0x3d, r28	; 61
    3e8e:	29 87       	std	Y+9, r18	; 0x09
    3e90:	3a 87       	std	Y+10, r19	; 0x0a
    3e92:	4b 87       	std	Y+11, r20	; 0x0b
    3e94:	5c 87       	std	Y+12, r21	; 0x0c
    3e96:	6d 87       	std	Y+13, r22	; 0x0d
    3e98:	7e 87       	std	Y+14, r23	; 0x0e
    3e9a:	8f 87       	std	Y+15, r24	; 0x0f
    3e9c:	98 8b       	std	Y+16, r25	; 0x10
	u64 LOC_u64Reversed = 1;
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	1a 82       	std	Y+2, r1	; 0x02
    3ea4:	1b 82       	std	Y+3, r1	; 0x03
    3ea6:	1c 82       	std	Y+4, r1	; 0x04
    3ea8:	1d 82       	std	Y+5, r1	; 0x05
    3eaa:	1e 82       	std	Y+6, r1	; 0x06
    3eac:	1f 82       	std	Y+7, r1	; 0x07
    3eae:	18 86       	std	Y+8, r1	; 0x08
	if(Copy_u64Number == 0)
    3eb0:	89 85       	ldd	r24, Y+9	; 0x09
    3eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3eb4:	89 2b       	or	r24, r25
    3eb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3eb8:	89 2b       	or	r24, r25
    3eba:	9c 85       	ldd	r25, Y+12	; 0x0c
    3ebc:	89 2b       	or	r24, r25
    3ebe:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ec0:	89 2b       	or	r24, r25
    3ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ec4:	89 2b       	or	r24, r25
    3ec6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ec8:	89 2b       	or	r24, r25
    3eca:	98 89       	ldd	r25, Y+16	; 0x10
    3ecc:	89 2b       	or	r24, r25
    3ece:	88 23       	and	r24, r24
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <CLCD_voidSendNumber+0x6c>
    3ed2:	62 c3       	rjmp	.+1732   	; 0x4598 <CLCD_voidSendNumber+0x730>
	{
		CLCD_voidSendCharacter('0');
    3ed4:	80 e3       	ldi	r24, 0x30	; 48
    3ed6:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
    3eda:	ef c3       	rjmp	.+2014   	; 0x46ba <CLCD_voidSendNumber+0x852>
	else
	{

		while(Copy_u64Number != 0)
		{
			LOC_u64Reversed = (LOC_u64Reversed*10) + (Copy_u64Number%10);
    3edc:	29 81       	ldd	r18, Y+1	; 0x01
    3ede:	3a 81       	ldd	r19, Y+2	; 0x02
    3ee0:	4b 81       	ldd	r20, Y+3	; 0x03
    3ee2:	5c 81       	ldd	r21, Y+4	; 0x04
    3ee4:	6d 81       	ldd	r22, Y+5	; 0x05
    3ee6:	7e 81       	ldd	r23, Y+6	; 0x06
    3ee8:	8f 81       	ldd	r24, Y+7	; 0x07
    3eea:	98 85       	ldd	r25, Y+8	; 0x08
    3eec:	a2 2e       	mov	r10, r18
    3eee:	b3 2e       	mov	r11, r19
    3ef0:	c4 2e       	mov	r12, r20
    3ef2:	d5 2e       	mov	r13, r21
    3ef4:	e6 2e       	mov	r14, r22
    3ef6:	f7 2e       	mov	r15, r23
    3ef8:	08 2f       	mov	r16, r24
    3efa:	19 2f       	mov	r17, r25
    3efc:	2a 2d       	mov	r18, r10
    3efe:	3b 2d       	mov	r19, r11
    3f00:	4c 2d       	mov	r20, r12
    3f02:	5d 2d       	mov	r21, r13
    3f04:	6e 2d       	mov	r22, r14
    3f06:	7f 2d       	mov	r23, r15
    3f08:	80 2f       	mov	r24, r16
    3f0a:	91 2f       	mov	r25, r17
    3f0c:	01 e0       	ldi	r16, 0x01	; 1
    3f0e:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3f12:	29 a3       	std	Y+33, r18	; 0x21
    3f14:	3a a3       	std	Y+34, r19	; 0x22
    3f16:	4b a3       	std	Y+35, r20	; 0x23
    3f18:	5c a3       	std	Y+36, r21	; 0x24
    3f1a:	6d a3       	std	Y+37, r22	; 0x25
    3f1c:	7e a3       	std	Y+38, r23	; 0x26
    3f1e:	8f a3       	std	Y+39, r24	; 0x27
    3f20:	98 a7       	std	Y+40, r25	; 0x28
    3f22:	29 a1       	ldd	r18, Y+33	; 0x21
    3f24:	3a a1       	ldd	r19, Y+34	; 0x22
    3f26:	4b a1       	ldd	r20, Y+35	; 0x23
    3f28:	5c a1       	ldd	r21, Y+36	; 0x24
    3f2a:	6d a1       	ldd	r22, Y+37	; 0x25
    3f2c:	7e a1       	ldd	r23, Y+38	; 0x26
    3f2e:	8f a1       	ldd	r24, Y+39	; 0x27
    3f30:	98 a5       	ldd	r25, Y+40	; 0x28
    3f32:	02 e0       	ldi	r16, 0x02	; 2
    3f34:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3f38:	29 a7       	std	Y+41, r18	; 0x29
    3f3a:	3a a7       	std	Y+42, r19	; 0x2a
    3f3c:	4b a7       	std	Y+43, r20	; 0x2b
    3f3e:	5c a7       	std	Y+44, r21	; 0x2c
    3f40:	6d a7       	std	Y+45, r22	; 0x2d
    3f42:	7e a7       	std	Y+46, r23	; 0x2e
    3f44:	8f a7       	std	Y+47, r24	; 0x2f
    3f46:	98 ab       	std	Y+48, r25	; 0x30
    3f48:	89 a1       	ldd	r24, Y+33	; 0x21
    3f4a:	99 a5       	ldd	r25, Y+41	; 0x29
    3f4c:	89 0f       	add	r24, r25
    3f4e:	89 ab       	std	Y+49, r24	; 0x31
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	89 af       	std	Y+57, r24	; 0x39
    3f54:	99 a9       	ldd	r25, Y+49	; 0x31
    3f56:	89 a1       	ldd	r24, Y+33	; 0x21
    3f58:	98 17       	cp	r25, r24
    3f5a:	08 f0       	brcs	.+2      	; 0x3f5e <CLCD_voidSendNumber+0xf6>
    3f5c:	19 ae       	std	Y+57, r1	; 0x39
    3f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    3f60:	8a a5       	ldd	r24, Y+42	; 0x2a
    3f62:	98 0f       	add	r25, r24
    3f64:	9a ab       	std	Y+50, r25	; 0x32
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	9a af       	std	Y+58, r25	; 0x3a
    3f6a:	8a a9       	ldd	r24, Y+50	; 0x32
    3f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f6e:	89 17       	cp	r24, r25
    3f70:	08 f0       	brcs	.+2      	; 0x3f74 <CLCD_voidSendNumber+0x10c>
    3f72:	1a ae       	std	Y+58, r1	; 0x3a
    3f74:	89 ad       	ldd	r24, Y+57	; 0x39
    3f76:	9a a9       	ldd	r25, Y+50	; 0x32
    3f78:	89 0f       	add	r24, r25
    3f7a:	8b af       	std	Y+59, r24	; 0x3b
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	8c af       	std	Y+60, r24	; 0x3c
    3f80:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f82:	8a a9       	ldd	r24, Y+50	; 0x32
    3f84:	98 17       	cp	r25, r24
    3f86:	08 f0       	brcs	.+2      	; 0x3f8a <CLCD_voidSendNumber+0x122>
    3f88:	1c ae       	std	Y+60, r1	; 0x3c
    3f8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f8c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f8e:	98 2b       	or	r25, r24
    3f90:	9a af       	std	Y+58, r25	; 0x3a
    3f92:	9b ad       	ldd	r25, Y+59	; 0x3b
    3f94:	9a ab       	std	Y+50, r25	; 0x32
    3f96:	8b a1       	ldd	r24, Y+35	; 0x23
    3f98:	9b a5       	ldd	r25, Y+43	; 0x2b
    3f9a:	89 0f       	add	r24, r25
    3f9c:	8b ab       	std	Y+51, r24	; 0x33
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	8d af       	std	Y+61, r24	; 0x3d
    3fa2:	9b a9       	ldd	r25, Y+51	; 0x33
    3fa4:	8b a1       	ldd	r24, Y+35	; 0x23
    3fa6:	98 17       	cp	r25, r24
    3fa8:	08 f0       	brcs	.+2      	; 0x3fac <CLCD_voidSendNumber+0x144>
    3faa:	1d ae       	std	Y+61, r1	; 0x3d
    3fac:	9a ad       	ldd	r25, Y+58	; 0x3a
    3fae:	8b a9       	ldd	r24, Y+51	; 0x33
    3fb0:	98 0f       	add	r25, r24
    3fb2:	9e af       	std	Y+62, r25	; 0x3e
    3fb4:	91 e0       	ldi	r25, 0x01	; 1
    3fb6:	9f af       	std	Y+63, r25	; 0x3f
    3fb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fba:	9b a9       	ldd	r25, Y+51	; 0x33
    3fbc:	89 17       	cp	r24, r25
    3fbe:	08 f0       	brcs	.+2      	; 0x3fc2 <CLCD_voidSendNumber+0x15a>
    3fc0:	1f ae       	std	Y+63, r1	; 0x3f
    3fc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fc6:	89 2b       	or	r24, r25
    3fc8:	8d af       	std	Y+61, r24	; 0x3d
    3fca:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fcc:	8b ab       	std	Y+51, r24	; 0x33
    3fce:	9c a1       	ldd	r25, Y+36	; 0x24
    3fd0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3fd2:	98 0f       	add	r25, r24
    3fd4:	9c ab       	std	Y+52, r25	; 0x34
    3fd6:	91 e0       	ldi	r25, 0x01	; 1
    3fd8:	21 96       	adiw	r28, 0x01	; 1
    3fda:	9f af       	std	Y+63, r25	; 0x3f
    3fdc:	21 97       	sbiw	r28, 0x01	; 1
    3fde:	8c a9       	ldd	r24, Y+52	; 0x34
    3fe0:	9c a1       	ldd	r25, Y+36	; 0x24
    3fe2:	89 17       	cp	r24, r25
    3fe4:	18 f0       	brcs	.+6      	; 0x3fec <CLCD_voidSendNumber+0x184>
    3fe6:	21 96       	adiw	r28, 0x01	; 1
    3fe8:	1f ae       	std	Y+63, r1	; 0x3f
    3fea:	21 97       	sbiw	r28, 0x01	; 1
    3fec:	8d ad       	ldd	r24, Y+61	; 0x3d
    3fee:	9c a9       	ldd	r25, Y+52	; 0x34
    3ff0:	89 0f       	add	r24, r25
    3ff2:	22 96       	adiw	r28, 0x02	; 2
    3ff4:	8f af       	std	Y+63, r24	; 0x3f
    3ff6:	22 97       	sbiw	r28, 0x02	; 2
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	23 96       	adiw	r28, 0x03	; 3
    3ffc:	8f af       	std	Y+63, r24	; 0x3f
    3ffe:	23 97       	sbiw	r28, 0x03	; 3
    4000:	22 96       	adiw	r28, 0x02	; 2
    4002:	9f ad       	ldd	r25, Y+63	; 0x3f
    4004:	22 97       	sbiw	r28, 0x02	; 2
    4006:	8c a9       	ldd	r24, Y+52	; 0x34
    4008:	98 17       	cp	r25, r24
    400a:	18 f0       	brcs	.+6      	; 0x4012 <CLCD_voidSendNumber+0x1aa>
    400c:	23 96       	adiw	r28, 0x03	; 3
    400e:	1f ae       	std	Y+63, r1	; 0x3f
    4010:	23 97       	sbiw	r28, 0x03	; 3
    4012:	21 96       	adiw	r28, 0x01	; 1
    4014:	9f ad       	ldd	r25, Y+63	; 0x3f
    4016:	21 97       	sbiw	r28, 0x01	; 1
    4018:	23 96       	adiw	r28, 0x03	; 3
    401a:	8f ad       	ldd	r24, Y+63	; 0x3f
    401c:	23 97       	sbiw	r28, 0x03	; 3
    401e:	98 2b       	or	r25, r24
    4020:	21 96       	adiw	r28, 0x01	; 1
    4022:	9f af       	std	Y+63, r25	; 0x3f
    4024:	21 97       	sbiw	r28, 0x01	; 1
    4026:	22 96       	adiw	r28, 0x02	; 2
    4028:	9f ad       	ldd	r25, Y+63	; 0x3f
    402a:	22 97       	sbiw	r28, 0x02	; 2
    402c:	9c ab       	std	Y+52, r25	; 0x34
    402e:	8d a1       	ldd	r24, Y+37	; 0x25
    4030:	9d a5       	ldd	r25, Y+45	; 0x2d
    4032:	89 0f       	add	r24, r25
    4034:	8d ab       	std	Y+53, r24	; 0x35
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	24 96       	adiw	r28, 0x04	; 4
    403a:	8f af       	std	Y+63, r24	; 0x3f
    403c:	24 97       	sbiw	r28, 0x04	; 4
    403e:	9d a9       	ldd	r25, Y+53	; 0x35
    4040:	8d a1       	ldd	r24, Y+37	; 0x25
    4042:	98 17       	cp	r25, r24
    4044:	18 f0       	brcs	.+6      	; 0x404c <CLCD_voidSendNumber+0x1e4>
    4046:	24 96       	adiw	r28, 0x04	; 4
    4048:	1f ae       	std	Y+63, r1	; 0x3f
    404a:	24 97       	sbiw	r28, 0x04	; 4
    404c:	21 96       	adiw	r28, 0x01	; 1
    404e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4050:	21 97       	sbiw	r28, 0x01	; 1
    4052:	8d a9       	ldd	r24, Y+53	; 0x35
    4054:	98 0f       	add	r25, r24
    4056:	25 96       	adiw	r28, 0x05	; 5
    4058:	9f af       	std	Y+63, r25	; 0x3f
    405a:	25 97       	sbiw	r28, 0x05	; 5
    405c:	91 e0       	ldi	r25, 0x01	; 1
    405e:	26 96       	adiw	r28, 0x06	; 6
    4060:	9f af       	std	Y+63, r25	; 0x3f
    4062:	26 97       	sbiw	r28, 0x06	; 6
    4064:	25 96       	adiw	r28, 0x05	; 5
    4066:	8f ad       	ldd	r24, Y+63	; 0x3f
    4068:	25 97       	sbiw	r28, 0x05	; 5
    406a:	9d a9       	ldd	r25, Y+53	; 0x35
    406c:	89 17       	cp	r24, r25
    406e:	18 f0       	brcs	.+6      	; 0x4076 <CLCD_voidSendNumber+0x20e>
    4070:	26 96       	adiw	r28, 0x06	; 6
    4072:	1f ae       	std	Y+63, r1	; 0x3f
    4074:	26 97       	sbiw	r28, 0x06	; 6
    4076:	24 96       	adiw	r28, 0x04	; 4
    4078:	8f ad       	ldd	r24, Y+63	; 0x3f
    407a:	24 97       	sbiw	r28, 0x04	; 4
    407c:	26 96       	adiw	r28, 0x06	; 6
    407e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4080:	26 97       	sbiw	r28, 0x06	; 6
    4082:	89 2b       	or	r24, r25
    4084:	24 96       	adiw	r28, 0x04	; 4
    4086:	8f af       	std	Y+63, r24	; 0x3f
    4088:	24 97       	sbiw	r28, 0x04	; 4
    408a:	25 96       	adiw	r28, 0x05	; 5
    408c:	8f ad       	ldd	r24, Y+63	; 0x3f
    408e:	25 97       	sbiw	r28, 0x05	; 5
    4090:	8d ab       	std	Y+53, r24	; 0x35
    4092:	9e a1       	ldd	r25, Y+38	; 0x26
    4094:	8e a5       	ldd	r24, Y+46	; 0x2e
    4096:	98 0f       	add	r25, r24
    4098:	9e ab       	std	Y+54, r25	; 0x36
    409a:	91 e0       	ldi	r25, 0x01	; 1
    409c:	27 96       	adiw	r28, 0x07	; 7
    409e:	9f af       	std	Y+63, r25	; 0x3f
    40a0:	27 97       	sbiw	r28, 0x07	; 7
    40a2:	8e a9       	ldd	r24, Y+54	; 0x36
    40a4:	9e a1       	ldd	r25, Y+38	; 0x26
    40a6:	89 17       	cp	r24, r25
    40a8:	18 f0       	brcs	.+6      	; 0x40b0 <CLCD_voidSendNumber+0x248>
    40aa:	27 96       	adiw	r28, 0x07	; 7
    40ac:	1f ae       	std	Y+63, r1	; 0x3f
    40ae:	27 97       	sbiw	r28, 0x07	; 7
    40b0:	24 96       	adiw	r28, 0x04	; 4
    40b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    40b4:	24 97       	sbiw	r28, 0x04	; 4
    40b6:	9e a9       	ldd	r25, Y+54	; 0x36
    40b8:	89 0f       	add	r24, r25
    40ba:	28 96       	adiw	r28, 0x08	; 8
    40bc:	8f af       	std	Y+63, r24	; 0x3f
    40be:	28 97       	sbiw	r28, 0x08	; 8
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	29 96       	adiw	r28, 0x09	; 9
    40c4:	8f af       	std	Y+63, r24	; 0x3f
    40c6:	29 97       	sbiw	r28, 0x09	; 9
    40c8:	28 96       	adiw	r28, 0x08	; 8
    40ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    40cc:	28 97       	sbiw	r28, 0x08	; 8
    40ce:	8e a9       	ldd	r24, Y+54	; 0x36
    40d0:	98 17       	cp	r25, r24
    40d2:	18 f0       	brcs	.+6      	; 0x40da <CLCD_voidSendNumber+0x272>
    40d4:	29 96       	adiw	r28, 0x09	; 9
    40d6:	1f ae       	std	Y+63, r1	; 0x3f
    40d8:	29 97       	sbiw	r28, 0x09	; 9
    40da:	27 96       	adiw	r28, 0x07	; 7
    40dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    40de:	27 97       	sbiw	r28, 0x07	; 7
    40e0:	29 96       	adiw	r28, 0x09	; 9
    40e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    40e4:	29 97       	sbiw	r28, 0x09	; 9
    40e6:	98 2b       	or	r25, r24
    40e8:	27 96       	adiw	r28, 0x07	; 7
    40ea:	9f af       	std	Y+63, r25	; 0x3f
    40ec:	27 97       	sbiw	r28, 0x07	; 7
    40ee:	28 96       	adiw	r28, 0x08	; 8
    40f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    40f2:	28 97       	sbiw	r28, 0x08	; 8
    40f4:	9e ab       	std	Y+54, r25	; 0x36
    40f6:	8f a1       	ldd	r24, Y+39	; 0x27
    40f8:	9f a5       	ldd	r25, Y+47	; 0x2f
    40fa:	89 0f       	add	r24, r25
    40fc:	8f ab       	std	Y+55, r24	; 0x37
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	2a 96       	adiw	r28, 0x0a	; 10
    4102:	8f af       	std	Y+63, r24	; 0x3f
    4104:	2a 97       	sbiw	r28, 0x0a	; 10
    4106:	9f a9       	ldd	r25, Y+55	; 0x37
    4108:	8f a1       	ldd	r24, Y+39	; 0x27
    410a:	98 17       	cp	r25, r24
    410c:	18 f0       	brcs	.+6      	; 0x4114 <CLCD_voidSendNumber+0x2ac>
    410e:	2a 96       	adiw	r28, 0x0a	; 10
    4110:	1f ae       	std	Y+63, r1	; 0x3f
    4112:	2a 97       	sbiw	r28, 0x0a	; 10
    4114:	27 96       	adiw	r28, 0x07	; 7
    4116:	9f ad       	ldd	r25, Y+63	; 0x3f
    4118:	27 97       	sbiw	r28, 0x07	; 7
    411a:	8f a9       	ldd	r24, Y+55	; 0x37
    411c:	98 0f       	add	r25, r24
    411e:	2b 96       	adiw	r28, 0x0b	; 11
    4120:	9f af       	std	Y+63, r25	; 0x3f
    4122:	2b 97       	sbiw	r28, 0x0b	; 11
    4124:	91 e0       	ldi	r25, 0x01	; 1
    4126:	2c 96       	adiw	r28, 0x0c	; 12
    4128:	9f af       	std	Y+63, r25	; 0x3f
    412a:	2c 97       	sbiw	r28, 0x0c	; 12
    412c:	2b 96       	adiw	r28, 0x0b	; 11
    412e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4130:	2b 97       	sbiw	r28, 0x0b	; 11
    4132:	9f a9       	ldd	r25, Y+55	; 0x37
    4134:	89 17       	cp	r24, r25
    4136:	18 f0       	brcs	.+6      	; 0x413e <CLCD_voidSendNumber+0x2d6>
    4138:	2c 96       	adiw	r28, 0x0c	; 12
    413a:	1f ae       	std	Y+63, r1	; 0x3f
    413c:	2c 97       	sbiw	r28, 0x0c	; 12
    413e:	2a 96       	adiw	r28, 0x0a	; 10
    4140:	8f ad       	ldd	r24, Y+63	; 0x3f
    4142:	2a 97       	sbiw	r28, 0x0a	; 10
    4144:	2c 96       	adiw	r28, 0x0c	; 12
    4146:	9f ad       	ldd	r25, Y+63	; 0x3f
    4148:	2c 97       	sbiw	r28, 0x0c	; 12
    414a:	89 2b       	or	r24, r25
    414c:	2a 96       	adiw	r28, 0x0a	; 10
    414e:	8f af       	std	Y+63, r24	; 0x3f
    4150:	2a 97       	sbiw	r28, 0x0a	; 10
    4152:	2b 96       	adiw	r28, 0x0b	; 11
    4154:	8f ad       	ldd	r24, Y+63	; 0x3f
    4156:	2b 97       	sbiw	r28, 0x0b	; 11
    4158:	8f ab       	std	Y+55, r24	; 0x37
    415a:	98 a5       	ldd	r25, Y+40	; 0x28
    415c:	88 a9       	ldd	r24, Y+48	; 0x30
    415e:	98 0f       	add	r25, r24
    4160:	98 af       	std	Y+56, r25	; 0x38
    4162:	2a 96       	adiw	r28, 0x0a	; 10
    4164:	8f ad       	ldd	r24, Y+63	; 0x3f
    4166:	2a 97       	sbiw	r28, 0x0a	; 10
    4168:	98 ad       	ldd	r25, Y+56	; 0x38
    416a:	89 0f       	add	r24, r25
    416c:	88 af       	std	Y+56, r24	; 0x38
    416e:	89 a9       	ldd	r24, Y+49	; 0x31
    4170:	89 8f       	std	Y+25, r24	; 0x19
    4172:	9a a9       	ldd	r25, Y+50	; 0x32
    4174:	9a 8f       	std	Y+26, r25	; 0x1a
    4176:	8b a9       	ldd	r24, Y+51	; 0x33
    4178:	8b 8f       	std	Y+27, r24	; 0x1b
    417a:	9c a9       	ldd	r25, Y+52	; 0x34
    417c:	9c 8f       	std	Y+28, r25	; 0x1c
    417e:	8d a9       	ldd	r24, Y+53	; 0x35
    4180:	8d 8f       	std	Y+29, r24	; 0x1d
    4182:	9e a9       	ldd	r25, Y+54	; 0x36
    4184:	9e 8f       	std	Y+30, r25	; 0x1e
    4186:	8f a9       	ldd	r24, Y+55	; 0x37
    4188:	8f 8f       	std	Y+31, r24	; 0x1f
    418a:	98 ad       	ldd	r25, Y+56	; 0x38
    418c:	98 a3       	std	Y+32, r25	; 0x20
    418e:	a9 84       	ldd	r10, Y+9	; 0x09
    4190:	ba 84       	ldd	r11, Y+10	; 0x0a
    4192:	cb 84       	ldd	r12, Y+11	; 0x0b
    4194:	dc 84       	ldd	r13, Y+12	; 0x0c
    4196:	ed 84       	ldd	r14, Y+13	; 0x0d
    4198:	fe 84       	ldd	r15, Y+14	; 0x0e
    419a:	0f 85       	ldd	r16, Y+15	; 0x0f
    419c:	18 89       	ldd	r17, Y+16	; 0x10
    419e:	2a 2d       	mov	r18, r10
    41a0:	3b 2d       	mov	r19, r11
    41a2:	4c 2d       	mov	r20, r12
    41a4:	5d 2d       	mov	r21, r13
    41a6:	6e 2d       	mov	r22, r14
    41a8:	7f 2d       	mov	r23, r15
    41aa:	80 2f       	mov	r24, r16
    41ac:	91 2f       	mov	r25, r17
    41ae:	0f 2e       	mov	r0, r31
    41b0:	fa e0       	ldi	r31, 0x0A	; 10
    41b2:	af 2e       	mov	r10, r31
    41b4:	f0 2d       	mov	r31, r0
    41b6:	bb 24       	eor	r11, r11
    41b8:	cc 24       	eor	r12, r12
    41ba:	dd 24       	eor	r13, r13
    41bc:	ee 24       	eor	r14, r14
    41be:	ff 24       	eor	r15, r15
    41c0:	00 e0       	ldi	r16, 0x00	; 0
    41c2:	10 e0       	ldi	r17, 0x00	; 0
    41c4:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    41c8:	a2 2e       	mov	r10, r18
    41ca:	b3 2e       	mov	r11, r19
    41cc:	c4 2e       	mov	r12, r20
    41ce:	d5 2e       	mov	r13, r21
    41d0:	e6 2e       	mov	r14, r22
    41d2:	f7 2e       	mov	r15, r23
    41d4:	08 2f       	mov	r16, r24
    41d6:	19 2f       	mov	r17, r25
    41d8:	a9 8a       	std	Y+17, r10	; 0x11
    41da:	ba 8a       	std	Y+18, r11	; 0x12
    41dc:	cb 8a       	std	Y+19, r12	; 0x13
    41de:	dc 8a       	std	Y+20, r13	; 0x14
    41e0:	ed 8a       	std	Y+21, r14	; 0x15
    41e2:	fe 8a       	std	Y+22, r15	; 0x16
    41e4:	0f 8b       	std	Y+23, r16	; 0x17
    41e6:	18 8f       	std	Y+24, r17	; 0x18
    41e8:	89 8d       	ldd	r24, Y+25	; 0x19
    41ea:	99 89       	ldd	r25, Y+17	; 0x11
    41ec:	89 0f       	add	r24, r25
    41ee:	2d 96       	adiw	r28, 0x0d	; 13
    41f0:	8f af       	std	Y+63, r24	; 0x3f
    41f2:	2d 97       	sbiw	r28, 0x0d	; 13
    41f4:	81 e0       	ldi	r24, 0x01	; 1
    41f6:	65 96       	adiw	r28, 0x15	; 21
    41f8:	8f af       	std	Y+63, r24	; 0x3f
    41fa:	65 97       	sbiw	r28, 0x15	; 21
    41fc:	2d 96       	adiw	r28, 0x0d	; 13
    41fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    4200:	2d 97       	sbiw	r28, 0x0d	; 13
    4202:	89 8d       	ldd	r24, Y+25	; 0x19
    4204:	98 17       	cp	r25, r24
    4206:	18 f0       	brcs	.+6      	; 0x420e <CLCD_voidSendNumber+0x3a6>
    4208:	65 96       	adiw	r28, 0x15	; 21
    420a:	1f ae       	std	Y+63, r1	; 0x3f
    420c:	65 97       	sbiw	r28, 0x15	; 21
    420e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4210:	8a 89       	ldd	r24, Y+18	; 0x12
    4212:	98 0f       	add	r25, r24
    4214:	2e 96       	adiw	r28, 0x0e	; 14
    4216:	9f af       	std	Y+63, r25	; 0x3f
    4218:	2e 97       	sbiw	r28, 0x0e	; 14
    421a:	91 e0       	ldi	r25, 0x01	; 1
    421c:	66 96       	adiw	r28, 0x16	; 22
    421e:	9f af       	std	Y+63, r25	; 0x3f
    4220:	66 97       	sbiw	r28, 0x16	; 22
    4222:	2e 96       	adiw	r28, 0x0e	; 14
    4224:	8f ad       	ldd	r24, Y+63	; 0x3f
    4226:	2e 97       	sbiw	r28, 0x0e	; 14
    4228:	9a 8d       	ldd	r25, Y+26	; 0x1a
    422a:	89 17       	cp	r24, r25
    422c:	18 f0       	brcs	.+6      	; 0x4234 <CLCD_voidSendNumber+0x3cc>
    422e:	66 96       	adiw	r28, 0x16	; 22
    4230:	1f ae       	std	Y+63, r1	; 0x3f
    4232:	66 97       	sbiw	r28, 0x16	; 22
    4234:	65 96       	adiw	r28, 0x15	; 21
    4236:	8f ad       	ldd	r24, Y+63	; 0x3f
    4238:	65 97       	sbiw	r28, 0x15	; 21
    423a:	2e 96       	adiw	r28, 0x0e	; 14
    423c:	9f ad       	ldd	r25, Y+63	; 0x3f
    423e:	2e 97       	sbiw	r28, 0x0e	; 14
    4240:	89 0f       	add	r24, r25
    4242:	67 96       	adiw	r28, 0x17	; 23
    4244:	8f af       	std	Y+63, r24	; 0x3f
    4246:	67 97       	sbiw	r28, 0x17	; 23
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	68 96       	adiw	r28, 0x18	; 24
    424c:	8f af       	std	Y+63, r24	; 0x3f
    424e:	68 97       	sbiw	r28, 0x18	; 24
    4250:	67 96       	adiw	r28, 0x17	; 23
    4252:	9f ad       	ldd	r25, Y+63	; 0x3f
    4254:	67 97       	sbiw	r28, 0x17	; 23
    4256:	2e 96       	adiw	r28, 0x0e	; 14
    4258:	8f ad       	ldd	r24, Y+63	; 0x3f
    425a:	2e 97       	sbiw	r28, 0x0e	; 14
    425c:	98 17       	cp	r25, r24
    425e:	18 f0       	brcs	.+6      	; 0x4266 <CLCD_voidSendNumber+0x3fe>
    4260:	68 96       	adiw	r28, 0x18	; 24
    4262:	1f ae       	std	Y+63, r1	; 0x3f
    4264:	68 97       	sbiw	r28, 0x18	; 24
    4266:	66 96       	adiw	r28, 0x16	; 22
    4268:	9f ad       	ldd	r25, Y+63	; 0x3f
    426a:	66 97       	sbiw	r28, 0x16	; 22
    426c:	68 96       	adiw	r28, 0x18	; 24
    426e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4270:	68 97       	sbiw	r28, 0x18	; 24
    4272:	98 2b       	or	r25, r24
    4274:	66 96       	adiw	r28, 0x16	; 22
    4276:	9f af       	std	Y+63, r25	; 0x3f
    4278:	66 97       	sbiw	r28, 0x16	; 22
    427a:	67 96       	adiw	r28, 0x17	; 23
    427c:	9f ad       	ldd	r25, Y+63	; 0x3f
    427e:	67 97       	sbiw	r28, 0x17	; 23
    4280:	2e 96       	adiw	r28, 0x0e	; 14
    4282:	9f af       	std	Y+63, r25	; 0x3f
    4284:	2e 97       	sbiw	r28, 0x0e	; 14
    4286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4288:	9b 89       	ldd	r25, Y+19	; 0x13
    428a:	89 0f       	add	r24, r25
    428c:	2f 96       	adiw	r28, 0x0f	; 15
    428e:	8f af       	std	Y+63, r24	; 0x3f
    4290:	2f 97       	sbiw	r28, 0x0f	; 15
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	69 96       	adiw	r28, 0x19	; 25
    4296:	8f af       	std	Y+63, r24	; 0x3f
    4298:	69 97       	sbiw	r28, 0x19	; 25
    429a:	2f 96       	adiw	r28, 0x0f	; 15
    429c:	9f ad       	ldd	r25, Y+63	; 0x3f
    429e:	2f 97       	sbiw	r28, 0x0f	; 15
    42a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42a2:	98 17       	cp	r25, r24
    42a4:	18 f0       	brcs	.+6      	; 0x42ac <CLCD_voidSendNumber+0x444>
    42a6:	69 96       	adiw	r28, 0x19	; 25
    42a8:	1f ae       	std	Y+63, r1	; 0x3f
    42aa:	69 97       	sbiw	r28, 0x19	; 25
    42ac:	66 96       	adiw	r28, 0x16	; 22
    42ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    42b0:	66 97       	sbiw	r28, 0x16	; 22
    42b2:	2f 96       	adiw	r28, 0x0f	; 15
    42b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    42b6:	2f 97       	sbiw	r28, 0x0f	; 15
    42b8:	98 0f       	add	r25, r24
    42ba:	6a 96       	adiw	r28, 0x1a	; 26
    42bc:	9f af       	std	Y+63, r25	; 0x3f
    42be:	6a 97       	sbiw	r28, 0x1a	; 26
    42c0:	91 e0       	ldi	r25, 0x01	; 1
    42c2:	6b 96       	adiw	r28, 0x1b	; 27
    42c4:	9f af       	std	Y+63, r25	; 0x3f
    42c6:	6b 97       	sbiw	r28, 0x1b	; 27
    42c8:	6a 96       	adiw	r28, 0x1a	; 26
    42ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    42cc:	6a 97       	sbiw	r28, 0x1a	; 26
    42ce:	2f 96       	adiw	r28, 0x0f	; 15
    42d0:	9f ad       	ldd	r25, Y+63	; 0x3f
    42d2:	2f 97       	sbiw	r28, 0x0f	; 15
    42d4:	89 17       	cp	r24, r25
    42d6:	18 f0       	brcs	.+6      	; 0x42de <CLCD_voidSendNumber+0x476>
    42d8:	6b 96       	adiw	r28, 0x1b	; 27
    42da:	1f ae       	std	Y+63, r1	; 0x3f
    42dc:	6b 97       	sbiw	r28, 0x1b	; 27
    42de:	69 96       	adiw	r28, 0x19	; 25
    42e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    42e2:	69 97       	sbiw	r28, 0x19	; 25
    42e4:	6b 96       	adiw	r28, 0x1b	; 27
    42e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    42e8:	6b 97       	sbiw	r28, 0x1b	; 27
    42ea:	89 2b       	or	r24, r25
    42ec:	69 96       	adiw	r28, 0x19	; 25
    42ee:	8f af       	std	Y+63, r24	; 0x3f
    42f0:	69 97       	sbiw	r28, 0x19	; 25
    42f2:	6a 96       	adiw	r28, 0x1a	; 26
    42f4:	8f ad       	ldd	r24, Y+63	; 0x3f
    42f6:	6a 97       	sbiw	r28, 0x1a	; 26
    42f8:	2f 96       	adiw	r28, 0x0f	; 15
    42fa:	8f af       	std	Y+63, r24	; 0x3f
    42fc:	2f 97       	sbiw	r28, 0x0f	; 15
    42fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4300:	8c 89       	ldd	r24, Y+20	; 0x14
    4302:	98 0f       	add	r25, r24
    4304:	60 96       	adiw	r28, 0x10	; 16
    4306:	9f af       	std	Y+63, r25	; 0x3f
    4308:	60 97       	sbiw	r28, 0x10	; 16
    430a:	91 e0       	ldi	r25, 0x01	; 1
    430c:	6c 96       	adiw	r28, 0x1c	; 28
    430e:	9f af       	std	Y+63, r25	; 0x3f
    4310:	6c 97       	sbiw	r28, 0x1c	; 28
    4312:	60 96       	adiw	r28, 0x10	; 16
    4314:	8f ad       	ldd	r24, Y+63	; 0x3f
    4316:	60 97       	sbiw	r28, 0x10	; 16
    4318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    431a:	89 17       	cp	r24, r25
    431c:	18 f0       	brcs	.+6      	; 0x4324 <CLCD_voidSendNumber+0x4bc>
    431e:	6c 96       	adiw	r28, 0x1c	; 28
    4320:	1f ae       	std	Y+63, r1	; 0x3f
    4322:	6c 97       	sbiw	r28, 0x1c	; 28
    4324:	69 96       	adiw	r28, 0x19	; 25
    4326:	8f ad       	ldd	r24, Y+63	; 0x3f
    4328:	69 97       	sbiw	r28, 0x19	; 25
    432a:	60 96       	adiw	r28, 0x10	; 16
    432c:	9f ad       	ldd	r25, Y+63	; 0x3f
    432e:	60 97       	sbiw	r28, 0x10	; 16
    4330:	89 0f       	add	r24, r25
    4332:	6d 96       	adiw	r28, 0x1d	; 29
    4334:	8f af       	std	Y+63, r24	; 0x3f
    4336:	6d 97       	sbiw	r28, 0x1d	; 29
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	6e 96       	adiw	r28, 0x1e	; 30
    433c:	8f af       	std	Y+63, r24	; 0x3f
    433e:	6e 97       	sbiw	r28, 0x1e	; 30
    4340:	6d 96       	adiw	r28, 0x1d	; 29
    4342:	9f ad       	ldd	r25, Y+63	; 0x3f
    4344:	6d 97       	sbiw	r28, 0x1d	; 29
    4346:	60 96       	adiw	r28, 0x10	; 16
    4348:	8f ad       	ldd	r24, Y+63	; 0x3f
    434a:	60 97       	sbiw	r28, 0x10	; 16
    434c:	98 17       	cp	r25, r24
    434e:	18 f0       	brcs	.+6      	; 0x4356 <CLCD_voidSendNumber+0x4ee>
    4350:	6e 96       	adiw	r28, 0x1e	; 30
    4352:	1f ae       	std	Y+63, r1	; 0x3f
    4354:	6e 97       	sbiw	r28, 0x1e	; 30
    4356:	6c 96       	adiw	r28, 0x1c	; 28
    4358:	9f ad       	ldd	r25, Y+63	; 0x3f
    435a:	6c 97       	sbiw	r28, 0x1c	; 28
    435c:	6e 96       	adiw	r28, 0x1e	; 30
    435e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4360:	6e 97       	sbiw	r28, 0x1e	; 30
    4362:	98 2b       	or	r25, r24
    4364:	6c 96       	adiw	r28, 0x1c	; 28
    4366:	9f af       	std	Y+63, r25	; 0x3f
    4368:	6c 97       	sbiw	r28, 0x1c	; 28
    436a:	6d 96       	adiw	r28, 0x1d	; 29
    436c:	9f ad       	ldd	r25, Y+63	; 0x3f
    436e:	6d 97       	sbiw	r28, 0x1d	; 29
    4370:	60 96       	adiw	r28, 0x10	; 16
    4372:	9f af       	std	Y+63, r25	; 0x3f
    4374:	60 97       	sbiw	r28, 0x10	; 16
    4376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4378:	9d 89       	ldd	r25, Y+21	; 0x15
    437a:	89 0f       	add	r24, r25
    437c:	61 96       	adiw	r28, 0x11	; 17
    437e:	8f af       	std	Y+63, r24	; 0x3f
    4380:	61 97       	sbiw	r28, 0x11	; 17
    4382:	81 e0       	ldi	r24, 0x01	; 1
    4384:	6f 96       	adiw	r28, 0x1f	; 31
    4386:	8f af       	std	Y+63, r24	; 0x3f
    4388:	6f 97       	sbiw	r28, 0x1f	; 31
    438a:	61 96       	adiw	r28, 0x11	; 17
    438c:	9f ad       	ldd	r25, Y+63	; 0x3f
    438e:	61 97       	sbiw	r28, 0x11	; 17
    4390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4392:	98 17       	cp	r25, r24
    4394:	18 f0       	brcs	.+6      	; 0x439c <CLCD_voidSendNumber+0x534>
    4396:	6f 96       	adiw	r28, 0x1f	; 31
    4398:	1f ae       	std	Y+63, r1	; 0x3f
    439a:	6f 97       	sbiw	r28, 0x1f	; 31
    439c:	6c 96       	adiw	r28, 0x1c	; 28
    439e:	9f ad       	ldd	r25, Y+63	; 0x3f
    43a0:	6c 97       	sbiw	r28, 0x1c	; 28
    43a2:	61 96       	adiw	r28, 0x11	; 17
    43a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    43a6:	61 97       	sbiw	r28, 0x11	; 17
    43a8:	98 0f       	add	r25, r24
    43aa:	a0 96       	adiw	r28, 0x20	; 32
    43ac:	9f af       	std	Y+63, r25	; 0x3f
    43ae:	a0 97       	sbiw	r28, 0x20	; 32
    43b0:	91 e0       	ldi	r25, 0x01	; 1
    43b2:	a1 96       	adiw	r28, 0x21	; 33
    43b4:	9f af       	std	Y+63, r25	; 0x3f
    43b6:	a1 97       	sbiw	r28, 0x21	; 33
    43b8:	a0 96       	adiw	r28, 0x20	; 32
    43ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    43bc:	a0 97       	sbiw	r28, 0x20	; 32
    43be:	61 96       	adiw	r28, 0x11	; 17
    43c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    43c2:	61 97       	sbiw	r28, 0x11	; 17
    43c4:	89 17       	cp	r24, r25
    43c6:	18 f0       	brcs	.+6      	; 0x43ce <CLCD_voidSendNumber+0x566>
    43c8:	a1 96       	adiw	r28, 0x21	; 33
    43ca:	1f ae       	std	Y+63, r1	; 0x3f
    43cc:	a1 97       	sbiw	r28, 0x21	; 33
    43ce:	6f 96       	adiw	r28, 0x1f	; 31
    43d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    43d2:	6f 97       	sbiw	r28, 0x1f	; 31
    43d4:	a1 96       	adiw	r28, 0x21	; 33
    43d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    43d8:	a1 97       	sbiw	r28, 0x21	; 33
    43da:	89 2b       	or	r24, r25
    43dc:	6f 96       	adiw	r28, 0x1f	; 31
    43de:	8f af       	std	Y+63, r24	; 0x3f
    43e0:	6f 97       	sbiw	r28, 0x1f	; 31
    43e2:	a0 96       	adiw	r28, 0x20	; 32
    43e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    43e6:	a0 97       	sbiw	r28, 0x20	; 32
    43e8:	61 96       	adiw	r28, 0x11	; 17
    43ea:	8f af       	std	Y+63, r24	; 0x3f
    43ec:	61 97       	sbiw	r28, 0x11	; 17
    43ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43f0:	8e 89       	ldd	r24, Y+22	; 0x16
    43f2:	98 0f       	add	r25, r24
    43f4:	62 96       	adiw	r28, 0x12	; 18
    43f6:	9f af       	std	Y+63, r25	; 0x3f
    43f8:	62 97       	sbiw	r28, 0x12	; 18
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	a2 96       	adiw	r28, 0x22	; 34
    43fe:	9f af       	std	Y+63, r25	; 0x3f
    4400:	a2 97       	sbiw	r28, 0x22	; 34
    4402:	62 96       	adiw	r28, 0x12	; 18
    4404:	8f ad       	ldd	r24, Y+63	; 0x3f
    4406:	62 97       	sbiw	r28, 0x12	; 18
    4408:	9e 8d       	ldd	r25, Y+30	; 0x1e
    440a:	89 17       	cp	r24, r25
    440c:	18 f0       	brcs	.+6      	; 0x4414 <CLCD_voidSendNumber+0x5ac>
    440e:	a2 96       	adiw	r28, 0x22	; 34
    4410:	1f ae       	std	Y+63, r1	; 0x3f
    4412:	a2 97       	sbiw	r28, 0x22	; 34
    4414:	6f 96       	adiw	r28, 0x1f	; 31
    4416:	8f ad       	ldd	r24, Y+63	; 0x3f
    4418:	6f 97       	sbiw	r28, 0x1f	; 31
    441a:	62 96       	adiw	r28, 0x12	; 18
    441c:	9f ad       	ldd	r25, Y+63	; 0x3f
    441e:	62 97       	sbiw	r28, 0x12	; 18
    4420:	89 0f       	add	r24, r25
    4422:	a3 96       	adiw	r28, 0x23	; 35
    4424:	8f af       	std	Y+63, r24	; 0x3f
    4426:	a3 97       	sbiw	r28, 0x23	; 35
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	a4 96       	adiw	r28, 0x24	; 36
    442c:	8f af       	std	Y+63, r24	; 0x3f
    442e:	a4 97       	sbiw	r28, 0x24	; 36
    4430:	a3 96       	adiw	r28, 0x23	; 35
    4432:	9f ad       	ldd	r25, Y+63	; 0x3f
    4434:	a3 97       	sbiw	r28, 0x23	; 35
    4436:	62 96       	adiw	r28, 0x12	; 18
    4438:	8f ad       	ldd	r24, Y+63	; 0x3f
    443a:	62 97       	sbiw	r28, 0x12	; 18
    443c:	98 17       	cp	r25, r24
    443e:	18 f0       	brcs	.+6      	; 0x4446 <CLCD_voidSendNumber+0x5de>
    4440:	a4 96       	adiw	r28, 0x24	; 36
    4442:	1f ae       	std	Y+63, r1	; 0x3f
    4444:	a4 97       	sbiw	r28, 0x24	; 36
    4446:	a2 96       	adiw	r28, 0x22	; 34
    4448:	9f ad       	ldd	r25, Y+63	; 0x3f
    444a:	a2 97       	sbiw	r28, 0x22	; 34
    444c:	a4 96       	adiw	r28, 0x24	; 36
    444e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4450:	a4 97       	sbiw	r28, 0x24	; 36
    4452:	98 2b       	or	r25, r24
    4454:	a2 96       	adiw	r28, 0x22	; 34
    4456:	9f af       	std	Y+63, r25	; 0x3f
    4458:	a2 97       	sbiw	r28, 0x22	; 34
    445a:	a3 96       	adiw	r28, 0x23	; 35
    445c:	9f ad       	ldd	r25, Y+63	; 0x3f
    445e:	a3 97       	sbiw	r28, 0x23	; 35
    4460:	62 96       	adiw	r28, 0x12	; 18
    4462:	9f af       	std	Y+63, r25	; 0x3f
    4464:	62 97       	sbiw	r28, 0x12	; 18
    4466:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4468:	9f 89       	ldd	r25, Y+23	; 0x17
    446a:	89 0f       	add	r24, r25
    446c:	63 96       	adiw	r28, 0x13	; 19
    446e:	8f af       	std	Y+63, r24	; 0x3f
    4470:	63 97       	sbiw	r28, 0x13	; 19
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	a5 96       	adiw	r28, 0x25	; 37
    4476:	8f af       	std	Y+63, r24	; 0x3f
    4478:	a5 97       	sbiw	r28, 0x25	; 37
    447a:	63 96       	adiw	r28, 0x13	; 19
    447c:	9f ad       	ldd	r25, Y+63	; 0x3f
    447e:	63 97       	sbiw	r28, 0x13	; 19
    4480:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4482:	98 17       	cp	r25, r24
    4484:	18 f0       	brcs	.+6      	; 0x448c <CLCD_voidSendNumber+0x624>
    4486:	a5 96       	adiw	r28, 0x25	; 37
    4488:	1f ae       	std	Y+63, r1	; 0x3f
    448a:	a5 97       	sbiw	r28, 0x25	; 37
    448c:	a2 96       	adiw	r28, 0x22	; 34
    448e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4490:	a2 97       	sbiw	r28, 0x22	; 34
    4492:	63 96       	adiw	r28, 0x13	; 19
    4494:	8f ad       	ldd	r24, Y+63	; 0x3f
    4496:	63 97       	sbiw	r28, 0x13	; 19
    4498:	98 0f       	add	r25, r24
    449a:	a6 96       	adiw	r28, 0x26	; 38
    449c:	9f af       	std	Y+63, r25	; 0x3f
    449e:	a6 97       	sbiw	r28, 0x26	; 38
    44a0:	91 e0       	ldi	r25, 0x01	; 1
    44a2:	a7 96       	adiw	r28, 0x27	; 39
    44a4:	9f af       	std	Y+63, r25	; 0x3f
    44a6:	a7 97       	sbiw	r28, 0x27	; 39
    44a8:	a6 96       	adiw	r28, 0x26	; 38
    44aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    44ac:	a6 97       	sbiw	r28, 0x26	; 38
    44ae:	63 96       	adiw	r28, 0x13	; 19
    44b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    44b2:	63 97       	sbiw	r28, 0x13	; 19
    44b4:	89 17       	cp	r24, r25
    44b6:	18 f0       	brcs	.+6      	; 0x44be <CLCD_voidSendNumber+0x656>
    44b8:	a7 96       	adiw	r28, 0x27	; 39
    44ba:	1f ae       	std	Y+63, r1	; 0x3f
    44bc:	a7 97       	sbiw	r28, 0x27	; 39
    44be:	a5 96       	adiw	r28, 0x25	; 37
    44c0:	8f ad       	ldd	r24, Y+63	; 0x3f
    44c2:	a5 97       	sbiw	r28, 0x25	; 37
    44c4:	a7 96       	adiw	r28, 0x27	; 39
    44c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    44c8:	a7 97       	sbiw	r28, 0x27	; 39
    44ca:	89 2b       	or	r24, r25
    44cc:	a5 96       	adiw	r28, 0x25	; 37
    44ce:	8f af       	std	Y+63, r24	; 0x3f
    44d0:	a5 97       	sbiw	r28, 0x25	; 37
    44d2:	a6 96       	adiw	r28, 0x26	; 38
    44d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    44d6:	a6 97       	sbiw	r28, 0x26	; 38
    44d8:	63 96       	adiw	r28, 0x13	; 19
    44da:	8f af       	std	Y+63, r24	; 0x3f
    44dc:	63 97       	sbiw	r28, 0x13	; 19
    44de:	98 a1       	ldd	r25, Y+32	; 0x20
    44e0:	88 8d       	ldd	r24, Y+24	; 0x18
    44e2:	98 0f       	add	r25, r24
    44e4:	64 96       	adiw	r28, 0x14	; 20
    44e6:	9f af       	std	Y+63, r25	; 0x3f
    44e8:	64 97       	sbiw	r28, 0x14	; 20
    44ea:	a5 96       	adiw	r28, 0x25	; 37
    44ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    44ee:	a5 97       	sbiw	r28, 0x25	; 37
    44f0:	64 96       	adiw	r28, 0x14	; 20
    44f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    44f4:	64 97       	sbiw	r28, 0x14	; 20
    44f6:	89 0f       	add	r24, r25
    44f8:	64 96       	adiw	r28, 0x14	; 20
    44fa:	8f af       	std	Y+63, r24	; 0x3f
    44fc:	64 97       	sbiw	r28, 0x14	; 20
    44fe:	2d 96       	adiw	r28, 0x0d	; 13
    4500:	8f ad       	ldd	r24, Y+63	; 0x3f
    4502:	2d 97       	sbiw	r28, 0x0d	; 13
    4504:	89 83       	std	Y+1, r24	; 0x01
    4506:	2e 96       	adiw	r28, 0x0e	; 14
    4508:	9f ad       	ldd	r25, Y+63	; 0x3f
    450a:	2e 97       	sbiw	r28, 0x0e	; 14
    450c:	9a 83       	std	Y+2, r25	; 0x02
    450e:	2f 96       	adiw	r28, 0x0f	; 15
    4510:	8f ad       	ldd	r24, Y+63	; 0x3f
    4512:	2f 97       	sbiw	r28, 0x0f	; 15
    4514:	8b 83       	std	Y+3, r24	; 0x03
    4516:	60 96       	adiw	r28, 0x10	; 16
    4518:	9f ad       	ldd	r25, Y+63	; 0x3f
    451a:	60 97       	sbiw	r28, 0x10	; 16
    451c:	9c 83       	std	Y+4, r25	; 0x04
    451e:	61 96       	adiw	r28, 0x11	; 17
    4520:	8f ad       	ldd	r24, Y+63	; 0x3f
    4522:	61 97       	sbiw	r28, 0x11	; 17
    4524:	8d 83       	std	Y+5, r24	; 0x05
    4526:	62 96       	adiw	r28, 0x12	; 18
    4528:	9f ad       	ldd	r25, Y+63	; 0x3f
    452a:	62 97       	sbiw	r28, 0x12	; 18
    452c:	9e 83       	std	Y+6, r25	; 0x06
    452e:	63 96       	adiw	r28, 0x13	; 19
    4530:	8f ad       	ldd	r24, Y+63	; 0x3f
    4532:	63 97       	sbiw	r28, 0x13	; 19
    4534:	8f 83       	std	Y+7, r24	; 0x07
    4536:	64 96       	adiw	r28, 0x14	; 20
    4538:	9f ad       	ldd	r25, Y+63	; 0x3f
    453a:	64 97       	sbiw	r28, 0x14	; 20
    453c:	98 87       	std	Y+8, r25	; 0x08
			Copy_u64Number/=10;
    453e:	a9 84       	ldd	r10, Y+9	; 0x09
    4540:	ba 84       	ldd	r11, Y+10	; 0x0a
    4542:	cb 84       	ldd	r12, Y+11	; 0x0b
    4544:	dc 84       	ldd	r13, Y+12	; 0x0c
    4546:	ed 84       	ldd	r14, Y+13	; 0x0d
    4548:	fe 84       	ldd	r15, Y+14	; 0x0e
    454a:	0f 85       	ldd	r16, Y+15	; 0x0f
    454c:	18 89       	ldd	r17, Y+16	; 0x10
    454e:	2a 2d       	mov	r18, r10
    4550:	3b 2d       	mov	r19, r11
    4552:	4c 2d       	mov	r20, r12
    4554:	5d 2d       	mov	r21, r13
    4556:	6e 2d       	mov	r22, r14
    4558:	7f 2d       	mov	r23, r15
    455a:	80 2f       	mov	r24, r16
    455c:	91 2f       	mov	r25, r17
    455e:	0f 2e       	mov	r0, r31
    4560:	fa e0       	ldi	r31, 0x0A	; 10
    4562:	af 2e       	mov	r10, r31
    4564:	f0 2d       	mov	r31, r0
    4566:	bb 24       	eor	r11, r11
    4568:	cc 24       	eor	r12, r12
    456a:	dd 24       	eor	r13, r13
    456c:	ee 24       	eor	r14, r14
    456e:	ff 24       	eor	r15, r15
    4570:	00 e0       	ldi	r16, 0x00	; 0
    4572:	10 e0       	ldi	r17, 0x00	; 0
    4574:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    4578:	a2 2e       	mov	r10, r18
    457a:	b3 2e       	mov	r11, r19
    457c:	c4 2e       	mov	r12, r20
    457e:	d5 2e       	mov	r13, r21
    4580:	e6 2e       	mov	r14, r22
    4582:	f7 2e       	mov	r15, r23
    4584:	08 2f       	mov	r16, r24
    4586:	19 2f       	mov	r17, r25
    4588:	a9 86       	std	Y+9, r10	; 0x09
    458a:	ba 86       	std	Y+10, r11	; 0x0a
    458c:	cb 86       	std	Y+11, r12	; 0x0b
    458e:	dc 86       	std	Y+12, r13	; 0x0c
    4590:	ed 86       	std	Y+13, r14	; 0x0d
    4592:	fe 86       	std	Y+14, r15	; 0x0e
    4594:	0f 87       	std	Y+15, r16	; 0x0f
    4596:	18 8b       	std	Y+16, r17	; 0x10
		CLCD_voidSendCharacter('0');
	}
	else
	{

		while(Copy_u64Number != 0)
    4598:	89 85       	ldd	r24, Y+9	; 0x09
    459a:	9a 85       	ldd	r25, Y+10	; 0x0a
    459c:	89 2b       	or	r24, r25
    459e:	9b 85       	ldd	r25, Y+11	; 0x0b
    45a0:	89 2b       	or	r24, r25
    45a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    45a4:	89 2b       	or	r24, r25
    45a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    45a8:	89 2b       	or	r24, r25
    45aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    45ac:	89 2b       	or	r24, r25
    45ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    45b0:	89 2b       	or	r24, r25
    45b2:	98 89       	ldd	r25, Y+16	; 0x10
    45b4:	89 2b       	or	r24, r25
    45b6:	88 23       	and	r24, r24
    45b8:	09 f0       	breq	.+2      	; 0x45bc <CLCD_voidSendNumber+0x754>
    45ba:	90 cc       	rjmp	.-1760   	; 0x3edc <CLCD_voidSendNumber+0x74>
    45bc:	5e c0       	rjmp	.+188    	; 0x467a <CLCD_voidSendNumber+0x812>
			LOC_u64Reversed = (LOC_u64Reversed*10) + (Copy_u64Number%10);
			Copy_u64Number/=10;
		}
		while(LOC_u64Reversed != 1)
		{
			CLCD_voidSendCharacter( ( LOC_u64Reversed%10) + 48 );
    45be:	a9 80       	ldd	r10, Y+1	; 0x01
    45c0:	ba 80       	ldd	r11, Y+2	; 0x02
    45c2:	cb 80       	ldd	r12, Y+3	; 0x03
    45c4:	dc 80       	ldd	r13, Y+4	; 0x04
    45c6:	ed 80       	ldd	r14, Y+5	; 0x05
    45c8:	fe 80       	ldd	r15, Y+6	; 0x06
    45ca:	0f 81       	ldd	r16, Y+7	; 0x07
    45cc:	18 85       	ldd	r17, Y+8	; 0x08
    45ce:	2a 2d       	mov	r18, r10
    45d0:	3b 2d       	mov	r19, r11
    45d2:	4c 2d       	mov	r20, r12
    45d4:	5d 2d       	mov	r21, r13
    45d6:	6e 2d       	mov	r22, r14
    45d8:	7f 2d       	mov	r23, r15
    45da:	80 2f       	mov	r24, r16
    45dc:	91 2f       	mov	r25, r17
    45de:	0f 2e       	mov	r0, r31
    45e0:	fa e0       	ldi	r31, 0x0A	; 10
    45e2:	af 2e       	mov	r10, r31
    45e4:	f0 2d       	mov	r31, r0
    45e6:	bb 24       	eor	r11, r11
    45e8:	cc 24       	eor	r12, r12
    45ea:	dd 24       	eor	r13, r13
    45ec:	ee 24       	eor	r14, r14
    45ee:	ff 24       	eor	r15, r15
    45f0:	00 e0       	ldi	r16, 0x00	; 0
    45f2:	10 e0       	ldi	r17, 0x00	; 0
    45f4:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    45f8:	a2 2e       	mov	r10, r18
    45fa:	b3 2e       	mov	r11, r19
    45fc:	c4 2e       	mov	r12, r20
    45fe:	d5 2e       	mov	r13, r21
    4600:	e6 2e       	mov	r14, r22
    4602:	f7 2e       	mov	r15, r23
    4604:	08 2f       	mov	r16, r24
    4606:	19 2f       	mov	r17, r25
    4608:	2a 2d       	mov	r18, r10
    460a:	3b 2d       	mov	r19, r11
    460c:	4c 2d       	mov	r20, r12
    460e:	5d 2d       	mov	r21, r13
    4610:	6e 2d       	mov	r22, r14
    4612:	7f 2d       	mov	r23, r15
    4614:	80 2f       	mov	r24, r16
    4616:	91 2f       	mov	r25, r17
    4618:	82 2f       	mov	r24, r18
    461a:	80 5d       	subi	r24, 0xD0	; 208
    461c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
			LOC_u64Reversed/=10;
    4620:	a9 80       	ldd	r10, Y+1	; 0x01
    4622:	ba 80       	ldd	r11, Y+2	; 0x02
    4624:	cb 80       	ldd	r12, Y+3	; 0x03
    4626:	dc 80       	ldd	r13, Y+4	; 0x04
    4628:	ed 80       	ldd	r14, Y+5	; 0x05
    462a:	fe 80       	ldd	r15, Y+6	; 0x06
    462c:	0f 81       	ldd	r16, Y+7	; 0x07
    462e:	18 85       	ldd	r17, Y+8	; 0x08
    4630:	2a 2d       	mov	r18, r10
    4632:	3b 2d       	mov	r19, r11
    4634:	4c 2d       	mov	r20, r12
    4636:	5d 2d       	mov	r21, r13
    4638:	6e 2d       	mov	r22, r14
    463a:	7f 2d       	mov	r23, r15
    463c:	80 2f       	mov	r24, r16
    463e:	91 2f       	mov	r25, r17
    4640:	0f 2e       	mov	r0, r31
    4642:	fa e0       	ldi	r31, 0x0A	; 10
    4644:	af 2e       	mov	r10, r31
    4646:	f0 2d       	mov	r31, r0
    4648:	bb 24       	eor	r11, r11
    464a:	cc 24       	eor	r12, r12
    464c:	dd 24       	eor	r13, r13
    464e:	ee 24       	eor	r14, r14
    4650:	ff 24       	eor	r15, r15
    4652:	00 e0       	ldi	r16, 0x00	; 0
    4654:	10 e0       	ldi	r17, 0x00	; 0
    4656:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    465a:	a2 2e       	mov	r10, r18
    465c:	b3 2e       	mov	r11, r19
    465e:	c4 2e       	mov	r12, r20
    4660:	d5 2e       	mov	r13, r21
    4662:	e6 2e       	mov	r14, r22
    4664:	f7 2e       	mov	r15, r23
    4666:	08 2f       	mov	r16, r24
    4668:	19 2f       	mov	r17, r25
    466a:	a9 82       	std	Y+1, r10	; 0x01
    466c:	ba 82       	std	Y+2, r11	; 0x02
    466e:	cb 82       	std	Y+3, r12	; 0x03
    4670:	dc 82       	std	Y+4, r13	; 0x04
    4672:	ed 82       	std	Y+5, r14	; 0x05
    4674:	fe 82       	std	Y+6, r15	; 0x06
    4676:	0f 83       	std	Y+7, r16	; 0x07
    4678:	18 87       	std	Y+8, r17	; 0x08
		while(Copy_u64Number != 0)
		{
			LOC_u64Reversed = (LOC_u64Reversed*10) + (Copy_u64Number%10);
			Copy_u64Number/=10;
		}
		while(LOC_u64Reversed != 1)
    467a:	89 81       	ldd	r24, Y+1	; 0x01
    467c:	81 30       	cpi	r24, 0x01	; 1
    467e:	09 f0       	breq	.+2      	; 0x4682 <CLCD_voidSendNumber+0x81a>
    4680:	9e cf       	rjmp	.-196    	; 0x45be <CLCD_voidSendNumber+0x756>
    4682:	8a 81       	ldd	r24, Y+2	; 0x02
    4684:	88 23       	and	r24, r24
    4686:	09 f0       	breq	.+2      	; 0x468a <CLCD_voidSendNumber+0x822>
    4688:	9a cf       	rjmp	.-204    	; 0x45be <CLCD_voidSendNumber+0x756>
    468a:	8b 81       	ldd	r24, Y+3	; 0x03
    468c:	88 23       	and	r24, r24
    468e:	09 f0       	breq	.+2      	; 0x4692 <CLCD_voidSendNumber+0x82a>
    4690:	96 cf       	rjmp	.-212    	; 0x45be <CLCD_voidSendNumber+0x756>
    4692:	8c 81       	ldd	r24, Y+4	; 0x04
    4694:	88 23       	and	r24, r24
    4696:	09 f0       	breq	.+2      	; 0x469a <CLCD_voidSendNumber+0x832>
    4698:	92 cf       	rjmp	.-220    	; 0x45be <CLCD_voidSendNumber+0x756>
    469a:	8d 81       	ldd	r24, Y+5	; 0x05
    469c:	88 23       	and	r24, r24
    469e:	09 f0       	breq	.+2      	; 0x46a2 <CLCD_voidSendNumber+0x83a>
    46a0:	8e cf       	rjmp	.-228    	; 0x45be <CLCD_voidSendNumber+0x756>
    46a2:	8e 81       	ldd	r24, Y+6	; 0x06
    46a4:	88 23       	and	r24, r24
    46a6:	09 f0       	breq	.+2      	; 0x46aa <CLCD_voidSendNumber+0x842>
    46a8:	8a cf       	rjmp	.-236    	; 0x45be <CLCD_voidSendNumber+0x756>
    46aa:	8f 81       	ldd	r24, Y+7	; 0x07
    46ac:	88 23       	and	r24, r24
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <CLCD_voidSendNumber+0x84a>
    46b0:	86 cf       	rjmp	.-244    	; 0x45be <CLCD_voidSendNumber+0x756>
    46b2:	88 85       	ldd	r24, Y+8	; 0x08
    46b4:	88 23       	and	r24, r24
    46b6:	09 f0       	breq	.+2      	; 0x46ba <CLCD_voidSendNumber+0x852>
    46b8:	82 cf       	rjmp	.-252    	; 0x45be <CLCD_voidSendNumber+0x756>
		{
			CLCD_voidSendCharacter( ( LOC_u64Reversed%10) + 48 );
			LOC_u64Reversed/=10;
		}
	}
}
    46ba:	ca 59       	subi	r28, 0x9A	; 154
    46bc:	df 4f       	sbci	r29, 0xFF	; 255
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	de bf       	out	0x3e, r29	; 62
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	cd bf       	out	0x3d, r28	; 61
    46c8:	cf 91       	pop	r28
    46ca:	df 91       	pop	r29
    46cc:	1f 91       	pop	r17
    46ce:	0f 91       	pop	r16
    46d0:	ff 90       	pop	r15
    46d2:	ef 90       	pop	r14
    46d4:	df 90       	pop	r13
    46d6:	cf 90       	pop	r12
    46d8:	bf 90       	pop	r11
    46da:	af 90       	pop	r10
    46dc:	08 95       	ret

000046de <CLCD_voidSendEnableTrigger>:

static void CLCD_voidSendEnableTrigger(void)
{
    46de:	df 93       	push	r29
    46e0:	cf 93       	push	r28
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	6c 97       	sbiw	r28, 0x1c	; 28
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	f8 94       	cli
    46ec:	de bf       	out	0x3e, r29	; 62
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	cd bf       	out	0x3d, r28	; 61
	GPIO_voidSetPinVal(CLCD_EN, HIGH);
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	62 e0       	ldi	r22, 0x02	; 2
    46f6:	41 e0       	ldi	r20, 0x01	; 1
    46f8:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	a0 e8       	ldi	r26, 0x80	; 128
    4702:	bf e3       	ldi	r27, 0x3F	; 63
    4704:	89 8f       	std	Y+25, r24	; 0x19
    4706:	9a 8f       	std	Y+26, r25	; 0x1a
    4708:	ab 8f       	std	Y+27, r26	; 0x1b
    470a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    470c:	69 8d       	ldd	r22, Y+25	; 0x19
    470e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e0       	ldi	r19, 0x00	; 0
    4718:	4a ef       	ldi	r20, 0xFA	; 250
    471a:	54 e4       	ldi	r21, 0x44	; 68
    471c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4720:	dc 01       	movw	r26, r24
    4722:	cb 01       	movw	r24, r22
    4724:	8d 8b       	std	Y+21, r24	; 0x15
    4726:	9e 8b       	std	Y+22, r25	; 0x16
    4728:	af 8b       	std	Y+23, r26	; 0x17
    472a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    472c:	6d 89       	ldd	r22, Y+21	; 0x15
    472e:	7e 89       	ldd	r23, Y+22	; 0x16
    4730:	8f 89       	ldd	r24, Y+23	; 0x17
    4732:	98 8d       	ldd	r25, Y+24	; 0x18
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	30 e0       	ldi	r19, 0x00	; 0
    4738:	40 e8       	ldi	r20, 0x80	; 128
    473a:	5f e3       	ldi	r21, 0x3F	; 63
    473c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4740:	88 23       	and	r24, r24
    4742:	2c f4       	brge	.+10     	; 0x474e <CLCD_voidSendEnableTrigger+0x70>
		__ticks = 1;
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	9c 8b       	std	Y+20, r25	; 0x14
    474a:	8b 8b       	std	Y+19, r24	; 0x13
    474c:	3f c0       	rjmp	.+126    	; 0x47cc <CLCD_voidSendEnableTrigger+0xee>
	else if (__tmp > 65535)
    474e:	6d 89       	ldd	r22, Y+21	; 0x15
    4750:	7e 89       	ldd	r23, Y+22	; 0x16
    4752:	8f 89       	ldd	r24, Y+23	; 0x17
    4754:	98 8d       	ldd	r25, Y+24	; 0x18
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	3f ef       	ldi	r19, 0xFF	; 255
    475a:	4f e7       	ldi	r20, 0x7F	; 127
    475c:	57 e4       	ldi	r21, 0x47	; 71
    475e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4762:	18 16       	cp	r1, r24
    4764:	4c f5       	brge	.+82     	; 0x47b8 <CLCD_voidSendEnableTrigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4766:	69 8d       	ldd	r22, Y+25	; 0x19
    4768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    476a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    476c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	40 e2       	ldi	r20, 0x20	; 32
    4774:	51 e4       	ldi	r21, 0x41	; 65
    4776:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    477a:	dc 01       	movw	r26, r24
    477c:	cb 01       	movw	r24, r22
    477e:	bc 01       	movw	r22, r24
    4780:	cd 01       	movw	r24, r26
    4782:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4786:	dc 01       	movw	r26, r24
    4788:	cb 01       	movw	r24, r22
    478a:	9c 8b       	std	Y+20, r25	; 0x14
    478c:	8b 8b       	std	Y+19, r24	; 0x13
    478e:	0f c0       	rjmp	.+30     	; 0x47ae <CLCD_voidSendEnableTrigger+0xd0>
    4790:	88 ec       	ldi	r24, 0xC8	; 200
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	9a 8b       	std	Y+18, r25	; 0x12
    4796:	89 8b       	std	Y+17, r24	; 0x11
    4798:	89 89       	ldd	r24, Y+17	; 0x11
    479a:	9a 89       	ldd	r25, Y+18	; 0x12
    479c:	01 97       	sbiw	r24, 0x01	; 1
    479e:	f1 f7       	brne	.-4      	; 0x479c <CLCD_voidSendEnableTrigger+0xbe>
    47a0:	9a 8b       	std	Y+18, r25	; 0x12
    47a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a4:	8b 89       	ldd	r24, Y+19	; 0x13
    47a6:	9c 89       	ldd	r25, Y+20	; 0x14
    47a8:	01 97       	sbiw	r24, 0x01	; 1
    47aa:	9c 8b       	std	Y+20, r25	; 0x14
    47ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47ae:	8b 89       	ldd	r24, Y+19	; 0x13
    47b0:	9c 89       	ldd	r25, Y+20	; 0x14
    47b2:	00 97       	sbiw	r24, 0x00	; 0
    47b4:	69 f7       	brne	.-38     	; 0x4790 <CLCD_voidSendEnableTrigger+0xb2>
    47b6:	14 c0       	rjmp	.+40     	; 0x47e0 <CLCD_voidSendEnableTrigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47b8:	6d 89       	ldd	r22, Y+21	; 0x15
    47ba:	7e 89       	ldd	r23, Y+22	; 0x16
    47bc:	8f 89       	ldd	r24, Y+23	; 0x17
    47be:	98 8d       	ldd	r25, Y+24	; 0x18
    47c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    47c4:	dc 01       	movw	r26, r24
    47c6:	cb 01       	movw	r24, r22
    47c8:	9c 8b       	std	Y+20, r25	; 0x14
    47ca:	8b 8b       	std	Y+19, r24	; 0x13
    47cc:	8b 89       	ldd	r24, Y+19	; 0x13
    47ce:	9c 89       	ldd	r25, Y+20	; 0x14
    47d0:	98 8b       	std	Y+16, r25	; 0x10
    47d2:	8f 87       	std	Y+15, r24	; 0x0f
    47d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    47d6:	98 89       	ldd	r25, Y+16	; 0x10
    47d8:	01 97       	sbiw	r24, 0x01	; 1
    47da:	f1 f7       	brne	.-4      	; 0x47d8 <CLCD_voidSendEnableTrigger+0xfa>
    47dc:	98 8b       	std	Y+16, r25	; 0x10
    47de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_voidSetPinVal(CLCD_EN, LOW);
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	62 e0       	ldi	r22, 0x02	; 2
    47e4:	40 e0       	ldi	r20, 0x00	; 0
    47e6:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
    47ea:	80 e0       	ldi	r24, 0x00	; 0
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	a0 e8       	ldi	r26, 0x80	; 128
    47f0:	bf e3       	ldi	r27, 0x3F	; 63
    47f2:	8b 87       	std	Y+11, r24	; 0x0b
    47f4:	9c 87       	std	Y+12, r25	; 0x0c
    47f6:	ad 87       	std	Y+13, r26	; 0x0d
    47f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    47fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    47fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4800:	9e 85       	ldd	r25, Y+14	; 0x0e
    4802:	20 e0       	ldi	r18, 0x00	; 0
    4804:	30 e0       	ldi	r19, 0x00	; 0
    4806:	4a ef       	ldi	r20, 0xFA	; 250
    4808:	54 e4       	ldi	r21, 0x44	; 68
    480a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    480e:	dc 01       	movw	r26, r24
    4810:	cb 01       	movw	r24, r22
    4812:	8f 83       	std	Y+7, r24	; 0x07
    4814:	98 87       	std	Y+8, r25	; 0x08
    4816:	a9 87       	std	Y+9, r26	; 0x09
    4818:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    481a:	6f 81       	ldd	r22, Y+7	; 0x07
    481c:	78 85       	ldd	r23, Y+8	; 0x08
    481e:	89 85       	ldd	r24, Y+9	; 0x09
    4820:	9a 85       	ldd	r25, Y+10	; 0x0a
    4822:	20 e0       	ldi	r18, 0x00	; 0
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	40 e8       	ldi	r20, 0x80	; 128
    4828:	5f e3       	ldi	r21, 0x3F	; 63
    482a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    482e:	88 23       	and	r24, r24
    4830:	2c f4       	brge	.+10     	; 0x483c <CLCD_voidSendEnableTrigger+0x15e>
		__ticks = 1;
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	9e 83       	std	Y+6, r25	; 0x06
    4838:	8d 83       	std	Y+5, r24	; 0x05
    483a:	3f c0       	rjmp	.+126    	; 0x48ba <CLCD_voidSendEnableTrigger+0x1dc>
	else if (__tmp > 65535)
    483c:	6f 81       	ldd	r22, Y+7	; 0x07
    483e:	78 85       	ldd	r23, Y+8	; 0x08
    4840:	89 85       	ldd	r24, Y+9	; 0x09
    4842:	9a 85       	ldd	r25, Y+10	; 0x0a
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	3f ef       	ldi	r19, 0xFF	; 255
    4848:	4f e7       	ldi	r20, 0x7F	; 127
    484a:	57 e4       	ldi	r21, 0x47	; 71
    484c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4850:	18 16       	cp	r1, r24
    4852:	4c f5       	brge	.+82     	; 0x48a6 <CLCD_voidSendEnableTrigger+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4854:	6b 85       	ldd	r22, Y+11	; 0x0b
    4856:	7c 85       	ldd	r23, Y+12	; 0x0c
    4858:	8d 85       	ldd	r24, Y+13	; 0x0d
    485a:	9e 85       	ldd	r25, Y+14	; 0x0e
    485c:	20 e0       	ldi	r18, 0x00	; 0
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	40 e2       	ldi	r20, 0x20	; 32
    4862:	51 e4       	ldi	r21, 0x41	; 65
    4864:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4868:	dc 01       	movw	r26, r24
    486a:	cb 01       	movw	r24, r22
    486c:	bc 01       	movw	r22, r24
    486e:	cd 01       	movw	r24, r26
    4870:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4874:	dc 01       	movw	r26, r24
    4876:	cb 01       	movw	r24, r22
    4878:	9e 83       	std	Y+6, r25	; 0x06
    487a:	8d 83       	std	Y+5, r24	; 0x05
    487c:	0f c0       	rjmp	.+30     	; 0x489c <CLCD_voidSendEnableTrigger+0x1be>
    487e:	88 ec       	ldi	r24, 0xC8	; 200
    4880:	90 e0       	ldi	r25, 0x00	; 0
    4882:	9c 83       	std	Y+4, r25	; 0x04
    4884:	8b 83       	std	Y+3, r24	; 0x03
    4886:	8b 81       	ldd	r24, Y+3	; 0x03
    4888:	9c 81       	ldd	r25, Y+4	; 0x04
    488a:	01 97       	sbiw	r24, 0x01	; 1
    488c:	f1 f7       	brne	.-4      	; 0x488a <CLCD_voidSendEnableTrigger+0x1ac>
    488e:	9c 83       	std	Y+4, r25	; 0x04
    4890:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4892:	8d 81       	ldd	r24, Y+5	; 0x05
    4894:	9e 81       	ldd	r25, Y+6	; 0x06
    4896:	01 97       	sbiw	r24, 0x01	; 1
    4898:	9e 83       	std	Y+6, r25	; 0x06
    489a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    489c:	8d 81       	ldd	r24, Y+5	; 0x05
    489e:	9e 81       	ldd	r25, Y+6	; 0x06
    48a0:	00 97       	sbiw	r24, 0x00	; 0
    48a2:	69 f7       	brne	.-38     	; 0x487e <CLCD_voidSendEnableTrigger+0x1a0>
    48a4:	14 c0       	rjmp	.+40     	; 0x48ce <CLCD_voidSendEnableTrigger+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a6:	6f 81       	ldd	r22, Y+7	; 0x07
    48a8:	78 85       	ldd	r23, Y+8	; 0x08
    48aa:	89 85       	ldd	r24, Y+9	; 0x09
    48ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    48ae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    48b2:	dc 01       	movw	r26, r24
    48b4:	cb 01       	movw	r24, r22
    48b6:	9e 83       	std	Y+6, r25	; 0x06
    48b8:	8d 83       	std	Y+5, r24	; 0x05
    48ba:	8d 81       	ldd	r24, Y+5	; 0x05
    48bc:	9e 81       	ldd	r25, Y+6	; 0x06
    48be:	9a 83       	std	Y+2, r25	; 0x02
    48c0:	89 83       	std	Y+1, r24	; 0x01
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <CLCD_voidSendEnableTrigger+0x1e8>
    48ca:	9a 83       	std	Y+2, r25	; 0x02
    48cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    48ce:	6c 96       	adiw	r28, 0x1c	; 28
    48d0:	0f b6       	in	r0, 0x3f	; 63
    48d2:	f8 94       	cli
    48d4:	de bf       	out	0x3e, r29	; 62
    48d6:	0f be       	out	0x3f, r0	; 63
    48d8:	cd bf       	out	0x3d, r28	; 61
    48da:	cf 91       	pop	r28
    48dc:	df 91       	pop	r29
    48de:	08 95       	ret

000048e0 <CLCD_voidGoToX_Y>:
void CLCD_voidGoToX_Y		( 	u8 Copy_u8Row , u8 Copy_u8Col 	)
{
    48e0:	df 93       	push	r29
    48e2:	cf 93       	push	r28
    48e4:	00 d0       	rcall	.+0      	; 0x48e6 <CLCD_voidGoToX_Y+0x6>
    48e6:	cd b7       	in	r28, 0x3d	; 61
    48e8:	de b7       	in	r29, 0x3e	; 62
    48ea:	89 83       	std	Y+1, r24	; 0x01
    48ec:	6a 83       	std	Y+2, r22	; 0x02
	if( Copy_u8Row == CLCD_ROW1 )
    48ee:	89 81       	ldd	r24, Y+1	; 0x01
    48f0:	81 30       	cpi	r24, 0x01	; 1
    48f2:	29 f4       	brne	.+10     	; 0x48fe <CLCD_voidGoToX_Y+0x1e>
	{
		CLCD_voidSendCommand(CLCD_SET_DDRAM_ADDRESS + ( Copy_u8Col - 1 ) );
    48f4:	8a 81       	ldd	r24, Y+2	; 0x02
    48f6:	81 58       	subi	r24, 0x81	; 129
    48f8:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
    48fc:	07 c0       	rjmp	.+14     	; 0x490c <CLCD_voidGoToX_Y+0x2c>
	}
	else if( Copy_u8Row == CLCD_ROW2 )
    48fe:	89 81       	ldd	r24, Y+1	; 0x01
    4900:	82 30       	cpi	r24, 0x02	; 2
    4902:	21 f4       	brne	.+8      	; 0x490c <CLCD_voidGoToX_Y+0x2c>
	{
		CLCD_voidSendCommand(CLCD_SET_DDRAM_ADDRESS + 0x40 + ( Copy_u8Col - 1 ) );
    4904:	8a 81       	ldd	r24, Y+2	; 0x02
    4906:	81 54       	subi	r24, 0x41	; 65
    4908:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
	}
}
    490c:	0f 90       	pop	r0
    490e:	0f 90       	pop	r0
    4910:	cf 91       	pop	r28
    4912:	df 91       	pop	r29
    4914:	08 95       	ret

00004916 <CLCD_voidDrwaExxtraChar>:
void CLCD_voidDrwaExxtraChar(	u8 Copy_u8Row ,u8 Copy_u8Col , u8 * Copy_u8ArrayChars)
{
    4916:	df 93       	push	r29
    4918:	cf 93       	push	r28
    491a:	00 d0       	rcall	.+0      	; 0x491c <CLCD_voidDrwaExxtraChar+0x6>
    491c:	00 d0       	rcall	.+0      	; 0x491e <CLCD_voidDrwaExxtraChar+0x8>
    491e:	0f 92       	push	r0
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	8a 83       	std	Y+2, r24	; 0x02
    4926:	6b 83       	std	Y+3, r22	; 0x03
    4928:	5d 83       	std	Y+5, r21	; 0x05
    492a:	4c 83       	std	Y+4, r20	; 0x04
	u8 LOC_u8Iterrator = 0;
    492c:	19 82       	std	Y+1, r1	; 0x01
	/* Go To CGRAM */
	CLCD_voidSendCommand ( CLCD_SET_CGRAM_ADDRESS );
    492e:	80 e4       	ldi	r24, 0x40	; 64
    4930:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
	/* Draw The Character */
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< 8; LOC_u8Iterrator++ )
    4934:	19 82       	std	Y+1, r1	; 0x01
    4936:	0e c0       	rjmp	.+28     	; 0x4954 <CLCD_voidDrwaExxtraChar+0x3e>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
    4938:	89 81       	ldd	r24, Y+1	; 0x01
    493a:	28 2f       	mov	r18, r24
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	8c 81       	ldd	r24, Y+4	; 0x04
    4940:	9d 81       	ldd	r25, Y+5	; 0x05
    4942:	fc 01       	movw	r30, r24
    4944:	e2 0f       	add	r30, r18
    4946:	f3 1f       	adc	r31, r19
    4948:	80 81       	ld	r24, Z
    494a:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
{
	u8 LOC_u8Iterrator = 0;
	/* Go To CGRAM */
	CLCD_voidSendCommand ( CLCD_SET_CGRAM_ADDRESS );
	/* Draw The Character */
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< 8; LOC_u8Iterrator++ )
    494e:	89 81       	ldd	r24, Y+1	; 0x01
    4950:	8f 5f       	subi	r24, 0xFF	; 255
    4952:	89 83       	std	Y+1, r24	; 0x01
    4954:	89 81       	ldd	r24, Y+1	; 0x01
    4956:	88 30       	cpi	r24, 0x08	; 8
    4958:	78 f3       	brcs	.-34     	; 0x4938 <CLCD_voidDrwaExxtraChar+0x22>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
	}
	CLCD_voidGoToX_Y( Copy_u8Row, Copy_u8Col );
    495a:	8a 81       	ldd	r24, Y+2	; 0x02
    495c:	6b 81       	ldd	r22, Y+3	; 0x03
    495e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< 8; LOC_u8Iterrator++ )
    4962:	19 82       	std	Y+1, r1	; 0x01
    4964:	0e c0       	rjmp	.+28     	; 0x4982 <CLCD_voidDrwaExxtraChar+0x6c>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
    4966:	89 81       	ldd	r24, Y+1	; 0x01
    4968:	28 2f       	mov	r18, r24
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	8c 81       	ldd	r24, Y+4	; 0x04
    496e:	9d 81       	ldd	r25, Y+5	; 0x05
    4970:	fc 01       	movw	r30, r24
    4972:	e2 0f       	add	r30, r18
    4974:	f3 1f       	adc	r31, r19
    4976:	80 81       	ld	r24, Z
    4978:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< 8; LOC_u8Iterrator++ )
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
	}
	CLCD_voidGoToX_Y( Copy_u8Row, Copy_u8Col );
	for(LOC_u8Iterrator = 0; LOC_u8Iterrator< 8; LOC_u8Iterrator++ )
    497c:	89 81       	ldd	r24, Y+1	; 0x01
    497e:	8f 5f       	subi	r24, 0xFF	; 255
    4980:	89 83       	std	Y+1, r24	; 0x01
    4982:	89 81       	ldd	r24, Y+1	; 0x01
    4984:	88 30       	cpi	r24, 0x08	; 8
    4986:	78 f3       	brcs	.-34     	; 0x4966 <CLCD_voidDrwaExxtraChar+0x50>
	{
		CLCD_voidSendCharacter(Copy_u8ArrayChars[LOC_u8Iterrator]);
	}
}
    4988:	0f 90       	pop	r0
    498a:	0f 90       	pop	r0
    498c:	0f 90       	pop	r0
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	cf 91       	pop	r28
    4994:	df 91       	pop	r29
    4996:	08 95       	ret

00004998 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void)
{
    4998:	df 93       	push	r29
    499a:	cf 93       	push	r28
    499c:	cd b7       	in	r28, 0x3d	; 61
    499e:	de b7       	in	r29, 0x3e	; 62
    49a0:	2e 97       	sbiw	r28, 0x0e	; 14
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	f8 94       	cli
    49a6:	de bf       	out	0x3e, r29	; 62
    49a8:	0f be       	out	0x3f, r0	; 63
    49aa:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(CLCD_DISPLAY_CLEAR);
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	0e 94 d6 1e 	call	0x3dac	; 0x3dac <CLCD_voidSendCommand>
    49b2:	80 e0       	ldi	r24, 0x00	; 0
    49b4:	90 e0       	ldi	r25, 0x00	; 0
    49b6:	a0 e0       	ldi	r26, 0x00	; 0
    49b8:	b0 e4       	ldi	r27, 0x40	; 64
    49ba:	8b 87       	std	Y+11, r24	; 0x0b
    49bc:	9c 87       	std	Y+12, r25	; 0x0c
    49be:	ad 87       	std	Y+13, r26	; 0x0d
    49c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    49c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    49c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	4a ef       	ldi	r20, 0xFA	; 250
    49d0:	54 e4       	ldi	r21, 0x44	; 68
    49d2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    49d6:	dc 01       	movw	r26, r24
    49d8:	cb 01       	movw	r24, r22
    49da:	8f 83       	std	Y+7, r24	; 0x07
    49dc:	98 87       	std	Y+8, r25	; 0x08
    49de:	a9 87       	std	Y+9, r26	; 0x09
    49e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49e2:	6f 81       	ldd	r22, Y+7	; 0x07
    49e4:	78 85       	ldd	r23, Y+8	; 0x08
    49e6:	89 85       	ldd	r24, Y+9	; 0x09
    49e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ea:	20 e0       	ldi	r18, 0x00	; 0
    49ec:	30 e0       	ldi	r19, 0x00	; 0
    49ee:	40 e8       	ldi	r20, 0x80	; 128
    49f0:	5f e3       	ldi	r21, 0x3F	; 63
    49f2:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    49f6:	88 23       	and	r24, r24
    49f8:	2c f4       	brge	.+10     	; 0x4a04 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	9e 83       	std	Y+6, r25	; 0x06
    4a00:	8d 83       	std	Y+5, r24	; 0x05
    4a02:	3f c0       	rjmp	.+126    	; 0x4a82 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    4a04:	6f 81       	ldd	r22, Y+7	; 0x07
    4a06:	78 85       	ldd	r23, Y+8	; 0x08
    4a08:	89 85       	ldd	r24, Y+9	; 0x09
    4a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a0c:	20 e0       	ldi	r18, 0x00	; 0
    4a0e:	3f ef       	ldi	r19, 0xFF	; 255
    4a10:	4f e7       	ldi	r20, 0x7F	; 127
    4a12:	57 e4       	ldi	r21, 0x47	; 71
    4a14:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4a18:	18 16       	cp	r1, r24
    4a1a:	4c f5       	brge	.+82     	; 0x4a6e <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	40 e2       	ldi	r20, 0x20	; 32
    4a2a:	51 e4       	ldi	r21, 0x41	; 65
    4a2c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4a30:	dc 01       	movw	r26, r24
    4a32:	cb 01       	movw	r24, r22
    4a34:	bc 01       	movw	r22, r24
    4a36:	cd 01       	movw	r24, r26
    4a38:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	9e 83       	std	Y+6, r25	; 0x06
    4a42:	8d 83       	std	Y+5, r24	; 0x05
    4a44:	0f c0       	rjmp	.+30     	; 0x4a64 <CLCD_voidClearScreen+0xcc>
    4a46:	88 ec       	ldi	r24, 0xC8	; 200
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	9c 83       	std	Y+4, r25	; 0x04
    4a4c:	8b 83       	std	Y+3, r24	; 0x03
    4a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a50:	9c 81       	ldd	r25, Y+4	; 0x04
    4a52:	01 97       	sbiw	r24, 0x01	; 1
    4a54:	f1 f7       	brne	.-4      	; 0x4a52 <CLCD_voidClearScreen+0xba>
    4a56:	9c 83       	std	Y+4, r25	; 0x04
    4a58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a5e:	01 97       	sbiw	r24, 0x01	; 1
    4a60:	9e 83       	std	Y+6, r25	; 0x06
    4a62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a64:	8d 81       	ldd	r24, Y+5	; 0x05
    4a66:	9e 81       	ldd	r25, Y+6	; 0x06
    4a68:	00 97       	sbiw	r24, 0x00	; 0
    4a6a:	69 f7       	brne	.-38     	; 0x4a46 <CLCD_voidClearScreen+0xae>
    4a6c:	14 c0       	rjmp	.+40     	; 0x4a96 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a6e:	6f 81       	ldd	r22, Y+7	; 0x07
    4a70:	78 85       	ldd	r23, Y+8	; 0x08
    4a72:	89 85       	ldd	r24, Y+9	; 0x09
    4a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	9e 83       	std	Y+6, r25	; 0x06
    4a80:	8d 83       	std	Y+5, r24	; 0x05
    4a82:	8d 81       	ldd	r24, Y+5	; 0x05
    4a84:	9e 81       	ldd	r25, Y+6	; 0x06
    4a86:	9a 83       	std	Y+2, r25	; 0x02
    4a88:	89 83       	std	Y+1, r24	; 0x01
    4a8a:	89 81       	ldd	r24, Y+1	; 0x01
    4a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	f1 f7       	brne	.-4      	; 0x4a8e <CLCD_voidClearScreen+0xf6>
    4a92:	9a 83       	std	Y+2, r25	; 0x02
    4a94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    4a96:	2e 96       	adiw	r28, 0x0e	; 14
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	f8 94       	cli
    4a9c:	de bf       	out	0x3e, r29	; 62
    4a9e:	0f be       	out	0x3f, r0	; 63
    4aa0:	cd bf       	out	0x3d, r28	; 61
    4aa2:	cf 91       	pop	r28
    4aa4:	df 91       	pop	r29
    4aa6:	08 95       	ret

00004aa8 <KEYPAD_voidInit>:
#include "KEYPAD_private.h"
#include "util/delay.h"


void KEYPAD_voidInit(void)
{
    4aa8:	df 93       	push	r29
    4aaa:	cf 93       	push	r28
    4aac:	cd b7       	in	r28, 0x3d	; 61
    4aae:	de b7       	in	r29, 0x3e	; 62
	/* Set the Directions of Rows as Input */
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW0, INPUT);
    4ab0:	83 e0       	ldi	r24, 0x03	; 3
    4ab2:	60 e0       	ldi	r22, 0x00	; 0
    4ab4:	40 e0       	ldi	r20, 0x00	; 0
    4ab6:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW1, INPUT);
    4aba:	83 e0       	ldi	r24, 0x03	; 3
    4abc:	61 e0       	ldi	r22, 0x01	; 1
    4abe:	40 e0       	ldi	r20, 0x00	; 0
    4ac0:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW2, INPUT);
    4ac4:	83 e0       	ldi	r24, 0x03	; 3
    4ac6:	62 e0       	ldi	r22, 0x02	; 2
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_ROW_PORT,KPAD_ROW3, INPUT);
    4ace:	83 e0       	ldi	r24, 0x03	; 3
    4ad0:	63 e0       	ldi	r22, 0x03	; 3
    4ad2:	40 e0       	ldi	r20, 0x00	; 0
    4ad4:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	/* Configure the Pins of ROWS PULL UP */
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW0, HIGH );
    4ad8:	83 e0       	ldi	r24, 0x03	; 3
    4ada:	60 e0       	ldi	r22, 0x00	; 0
    4adc:	41 e0       	ldi	r20, 0x01	; 1
    4ade:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW1, HIGH );
    4ae2:	83 e0       	ldi	r24, 0x03	; 3
    4ae4:	61 e0       	ldi	r22, 0x01	; 1
    4ae6:	41 e0       	ldi	r20, 0x01	; 1
    4ae8:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW2, HIGH );
    4aec:	83 e0       	ldi	r24, 0x03	; 3
    4aee:	62 e0       	ldi	r22, 0x02	; 2
    4af0:	41 e0       	ldi	r20, 0x01	; 1
    4af2:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_ROW_PORT,KPAD_ROW3, HIGH );
    4af6:	83 e0       	ldi	r24, 0x03	; 3
    4af8:	63 e0       	ldi	r22, 0x03	; 3
    4afa:	41 e0       	ldi	r20, 0x01	; 1
    4afc:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	/* Set the Columns Pins as PUTPUT PINS */
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL0, OUTPUT);
    4b00:	83 e0       	ldi	r24, 0x03	; 3
    4b02:	64 e0       	ldi	r22, 0x04	; 4
    4b04:	41 e0       	ldi	r20, 0x01	; 1
    4b06:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL1, OUTPUT);
    4b0a:	83 e0       	ldi	r24, 0x03	; 3
    4b0c:	65 e0       	ldi	r22, 0x05	; 5
    4b0e:	41 e0       	ldi	r20, 0x01	; 1
    4b10:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL2, OUTPUT);
    4b14:	83 e0       	ldi	r24, 0x03	; 3
    4b16:	66 e0       	ldi	r22, 0x06	; 6
    4b18:	41 e0       	ldi	r20, 0x01	; 1
    4b1a:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>
	GPIO_voidSetPinDir(KPAD_COL_PORT,KPAD_COL3, OUTPUT);
    4b1e:	83 e0       	ldi	r24, 0x03	; 3
    4b20:	67 e0       	ldi	r22, 0x07	; 7
    4b22:	41 e0       	ldi	r20, 0x01	; 1
    4b24:	0e 94 91 15 	call	0x2b22	; 0x2b22 <GPIO_voidSetPinDir>

	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL0, HIGH );
    4b28:	83 e0       	ldi	r24, 0x03	; 3
    4b2a:	64 e0       	ldi	r22, 0x04	; 4
    4b2c:	41 e0       	ldi	r20, 0x01	; 1
    4b2e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL1, HIGH );
    4b32:	83 e0       	ldi	r24, 0x03	; 3
    4b34:	65 e0       	ldi	r22, 0x05	; 5
    4b36:	41 e0       	ldi	r20, 0x01	; 1
    4b38:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL2, HIGH );
    4b3c:	83 e0       	ldi	r24, 0x03	; 3
    4b3e:	66 e0       	ldi	r22, 0x06	; 6
    4b40:	41 e0       	ldi	r20, 0x01	; 1
    4b42:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
	GPIO_voidSetPinVal(KPAD_COL_PORT,KPAD_COL3, HIGH );
    4b46:	83 e0       	ldi	r24, 0x03	; 3
    4b48:	67 e0       	ldi	r22, 0x07	; 7
    4b4a:	41 e0       	ldi	r20, 0x01	; 1
    4b4c:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>

}
    4b50:	cf 91       	pop	r28
    4b52:	df 91       	pop	r29
    4b54:	08 95       	ret

00004b56 <KEYPAD_voidGetPressedButton>:

u8 KEYPAD_voidGetPressedButton(void)
{
    4b56:	df 93       	push	r29
    4b58:	cf 93       	push	r28
    4b5a:	cd b7       	in	r28, 0x3d	; 61
    4b5c:	de b7       	in	r29, 0x3e	; 62
    4b5e:	62 97       	sbiw	r28, 0x12	; 18
    4b60:	0f b6       	in	r0, 0x3f	; 63
    4b62:	f8 94       	cli
    4b64:	de bf       	out	0x3e, r29	; 62
    4b66:	0f be       	out	0x3f, r0	; 63
    4b68:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_ColIterator = 0;
    4b6a:	1a 8a       	std	Y+18, r1	; 0x12
	u8 Loc_RowIterator = 0;
    4b6c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Loc_PressedValue = 0;
    4b6e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Loc_ReturnData = 0;
    4b70:	1f 86       	std	Y+15, r1	; 0x0f
	for(Loc_ColIterator = (0+KPAD_COL_START); Loc_ColIterator<=KPAD_COL_END ; Loc_ColIterator++)
    4b72:	84 e0       	ldi	r24, 0x04	; 4
    4b74:	8a 8b       	std	Y+18, r24	; 0x12
    4b76:	bd c0       	rjmp	.+378    	; 0x4cf2 <KEYPAD_voidGetPressedButton+0x19c>
	{
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator, LOW);
    4b78:	83 e0       	ldi	r24, 0x03	; 3
    4b7a:	6a 89       	ldd	r22, Y+18	; 0x12
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>

		for(Loc_RowIterator = (0+KPAD_ROW_START); Loc_RowIterator<=KPAD_ROW_END ; Loc_RowIterator++)
    4b82:	19 8a       	std	Y+17, r1	; 0x11
    4b84:	aa c0       	rjmp	.+340    	; 0x4cda <KEYPAD_voidGetPressedButton+0x184>
		{
			Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT, Loc_RowIterator);
    4b86:	83 e0       	ldi	r24, 0x03	; 3
    4b88:	69 89       	ldd	r22, Y+17	; 0x11
    4b8a:	0e 94 09 19 	call	0x3212	; 0x3212 <GPIO_u8ReadPin>
    4b8e:	88 8b       	std	Y+16, r24	; 0x10
			if (Loc_PressedValue == 0)
    4b90:	88 89       	ldd	r24, Y+16	; 0x10
    4b92:	88 23       	and	r24, r24
    4b94:	09 f0       	breq	.+2      	; 0x4b98 <KEYPAD_voidGetPressedButton+0x42>
    4b96:	9e c0       	rjmp	.+316    	; 0x4cd4 <KEYPAD_voidGetPressedButton+0x17e>
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	90 e0       	ldi	r25, 0x00	; 0
    4b9c:	a8 e4       	ldi	r26, 0x48	; 72
    4b9e:	b2 e4       	ldi	r27, 0x42	; 66
    4ba0:	8b 87       	std	Y+11, r24	; 0x0b
    4ba2:	9c 87       	std	Y+12, r25	; 0x0c
    4ba4:	ad 87       	std	Y+13, r26	; 0x0d
    4ba6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bb0:	20 e0       	ldi	r18, 0x00	; 0
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	4a ef       	ldi	r20, 0xFA	; 250
    4bb6:	54 e4       	ldi	r21, 0x44	; 68
    4bb8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	cb 01       	movw	r24, r22
    4bc0:	8f 83       	std	Y+7, r24	; 0x07
    4bc2:	98 87       	std	Y+8, r25	; 0x08
    4bc4:	a9 87       	std	Y+9, r26	; 0x09
    4bc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    4bca:	78 85       	ldd	r23, Y+8	; 0x08
    4bcc:	89 85       	ldd	r24, Y+9	; 0x09
    4bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	40 e8       	ldi	r20, 0x80	; 128
    4bd6:	5f e3       	ldi	r21, 0x3F	; 63
    4bd8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4bdc:	88 23       	and	r24, r24
    4bde:	2c f4       	brge	.+10     	; 0x4bea <KEYPAD_voidGetPressedButton+0x94>
		__ticks = 1;
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	9e 83       	std	Y+6, r25	; 0x06
    4be6:	8d 83       	std	Y+5, r24	; 0x05
    4be8:	3f c0       	rjmp	.+126    	; 0x4c68 <KEYPAD_voidGetPressedButton+0x112>
	else if (__tmp > 65535)
    4bea:	6f 81       	ldd	r22, Y+7	; 0x07
    4bec:	78 85       	ldd	r23, Y+8	; 0x08
    4bee:	89 85       	ldd	r24, Y+9	; 0x09
    4bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	3f ef       	ldi	r19, 0xFF	; 255
    4bf6:	4f e7       	ldi	r20, 0x7F	; 127
    4bf8:	57 e4       	ldi	r21, 0x47	; 71
    4bfa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4bfe:	18 16       	cp	r1, r24
    4c00:	4c f5       	brge	.+82     	; 0x4c54 <KEYPAD_voidGetPressedButton+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c0a:	20 e0       	ldi	r18, 0x00	; 0
    4c0c:	30 e0       	ldi	r19, 0x00	; 0
    4c0e:	40 e2       	ldi	r20, 0x20	; 32
    4c10:	51 e4       	ldi	r21, 0x41	; 65
    4c12:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4c16:	dc 01       	movw	r26, r24
    4c18:	cb 01       	movw	r24, r22
    4c1a:	bc 01       	movw	r22, r24
    4c1c:	cd 01       	movw	r24, r26
    4c1e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	9e 83       	std	Y+6, r25	; 0x06
    4c28:	8d 83       	std	Y+5, r24	; 0x05
    4c2a:	0f c0       	rjmp	.+30     	; 0x4c4a <KEYPAD_voidGetPressedButton+0xf4>
    4c2c:	88 ec       	ldi	r24, 0xC8	; 200
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	9c 83       	std	Y+4, r25	; 0x04
    4c32:	8b 83       	std	Y+3, r24	; 0x03
    4c34:	8b 81       	ldd	r24, Y+3	; 0x03
    4c36:	9c 81       	ldd	r25, Y+4	; 0x04
    4c38:	01 97       	sbiw	r24, 0x01	; 1
    4c3a:	f1 f7       	brne	.-4      	; 0x4c38 <KEYPAD_voidGetPressedButton+0xe2>
    4c3c:	9c 83       	std	Y+4, r25	; 0x04
    4c3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c40:	8d 81       	ldd	r24, Y+5	; 0x05
    4c42:	9e 81       	ldd	r25, Y+6	; 0x06
    4c44:	01 97       	sbiw	r24, 0x01	; 1
    4c46:	9e 83       	std	Y+6, r25	; 0x06
    4c48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c4e:	00 97       	sbiw	r24, 0x00	; 0
    4c50:	69 f7       	brne	.-38     	; 0x4c2c <KEYPAD_voidGetPressedButton+0xd6>
    4c52:	14 c0       	rjmp	.+40     	; 0x4c7c <KEYPAD_voidGetPressedButton+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c54:	6f 81       	ldd	r22, Y+7	; 0x07
    4c56:	78 85       	ldd	r23, Y+8	; 0x08
    4c58:	89 85       	ldd	r24, Y+9	; 0x09
    4c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4c60:	dc 01       	movw	r26, r24
    4c62:	cb 01       	movw	r24, r22
    4c64:	9e 83       	std	Y+6, r25	; 0x06
    4c66:	8d 83       	std	Y+5, r24	; 0x05
    4c68:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6c:	9a 83       	std	Y+2, r25	; 0x02
    4c6e:	89 83       	std	Y+1, r24	; 0x01
    4c70:	89 81       	ldd	r24, Y+1	; 0x01
    4c72:	9a 81       	ldd	r25, Y+2	; 0x02
    4c74:	01 97       	sbiw	r24, 0x01	; 1
    4c76:	f1 f7       	brne	.-4      	; 0x4c74 <KEYPAD_voidGetPressedButton+0x11e>
    4c78:	9a 83       	std	Y+2, r25	; 0x02
    4c7a:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
    4c7c:	83 e0       	ldi	r24, 0x03	; 3
    4c7e:	69 89       	ldd	r22, Y+17	; 0x11
    4c80:	0e 94 09 19 	call	0x3212	; 0x3212 <GPIO_u8ReadPin>
    4c84:	88 8b       	std	Y+16, r24	; 0x10
				if (Loc_PressedValue == 0)
    4c86:	88 89       	ldd	r24, Y+16	; 0x10
    4c88:	88 23       	and	r24, r24
    4c8a:	a9 f4       	brne	.+42     	; 0x4cb6 <KEYPAD_voidGetPressedButton+0x160>
				{
					Loc_ReturnData=KEYPAD_Map[Loc_RowIterator - KPAD_ROW_START][Loc_ColIterator - KPAD_COL_START];
    4c8c:	89 89       	ldd	r24, Y+17	; 0x11
    4c8e:	48 2f       	mov	r20, r24
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	8a 89       	ldd	r24, Y+18	; 0x12
    4c94:	88 2f       	mov	r24, r24
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	9c 01       	movw	r18, r24
    4c9a:	24 50       	subi	r18, 0x04	; 4
    4c9c:	30 40       	sbci	r19, 0x00	; 0
    4c9e:	ca 01       	movw	r24, r20
    4ca0:	88 0f       	add	r24, r24
    4ca2:	99 1f       	adc	r25, r25
    4ca4:	88 0f       	add	r24, r24
    4ca6:	99 1f       	adc	r25, r25
    4ca8:	82 0f       	add	r24, r18
    4caa:	93 1f       	adc	r25, r19
    4cac:	fc 01       	movw	r30, r24
    4cae:	ec 5f       	subi	r30, 0xFC	; 252
    4cb0:	fd 4f       	sbci	r31, 0xFD	; 253
    4cb2:	80 81       	ld	r24, Z
    4cb4:	8f 87       	std	Y+15, r24	; 0x0f
				}
				Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
    4cb6:	83 e0       	ldi	r24, 0x03	; 3
    4cb8:	69 89       	ldd	r22, Y+17	; 0x11
    4cba:	0e 94 09 19 	call	0x3212	; 0x3212 <GPIO_u8ReadPin>
    4cbe:	88 8b       	std	Y+16, r24	; 0x10
    4cc0:	05 c0       	rjmp	.+10     	; 0x4ccc <KEYPAD_voidGetPressedButton+0x176>
				while(Loc_PressedValue == 0)
				{
					Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
    4cc2:	83 e0       	ldi	r24, 0x03	; 3
    4cc4:	69 89       	ldd	r22, Y+17	; 0x11
    4cc6:	0e 94 09 19 	call	0x3212	; 0x3212 <GPIO_u8ReadPin>
    4cca:	88 8b       	std	Y+16, r24	; 0x10
				if (Loc_PressedValue == 0)
				{
					Loc_ReturnData=KEYPAD_Map[Loc_RowIterator - KPAD_ROW_START][Loc_ColIterator - KPAD_COL_START];
				}
				Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
				while(Loc_PressedValue == 0)
    4ccc:	88 89       	ldd	r24, Y+16	; 0x10
    4cce:	88 23       	and	r24, r24
    4cd0:	c1 f3       	breq	.-16     	; 0x4cc2 <KEYPAD_voidGetPressedButton+0x16c>
    4cd2:	07 c0       	rjmp	.+14     	; 0x4ce2 <KEYPAD_voidGetPressedButton+0x18c>
	u8 Loc_ReturnData = 0;
	for(Loc_ColIterator = (0+KPAD_COL_START); Loc_ColIterator<=KPAD_COL_END ; Loc_ColIterator++)
	{
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator, LOW);

		for(Loc_RowIterator = (0+KPAD_ROW_START); Loc_RowIterator<=KPAD_ROW_END ; Loc_RowIterator++)
    4cd4:	89 89       	ldd	r24, Y+17	; 0x11
    4cd6:	8f 5f       	subi	r24, 0xFF	; 255
    4cd8:	89 8b       	std	Y+17, r24	; 0x11
    4cda:	89 89       	ldd	r24, Y+17	; 0x11
    4cdc:	84 30       	cpi	r24, 0x04	; 4
    4cde:	08 f4       	brcc	.+2      	; 0x4ce2 <KEYPAD_voidGetPressedButton+0x18c>
    4ce0:	52 cf       	rjmp	.-348    	; 0x4b86 <KEYPAD_voidGetPressedButton+0x30>
					Loc_PressedValue = GPIO_u8ReadPin( KPAD_ROW_PORT,Loc_RowIterator);
				}
				break;
			}
		}
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator,HIGH);
    4ce2:	83 e0       	ldi	r24, 0x03	; 3
    4ce4:	6a 89       	ldd	r22, Y+18	; 0x12
    4ce6:	41 e0       	ldi	r20, 0x01	; 1
    4ce8:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <GPIO_voidSetPinVal>
{
	u8 Loc_ColIterator = 0;
	u8 Loc_RowIterator = 0;
	u8 Loc_PressedValue = 0;
	u8 Loc_ReturnData = 0;
	for(Loc_ColIterator = (0+KPAD_COL_START); Loc_ColIterator<=KPAD_COL_END ; Loc_ColIterator++)
    4cec:	8a 89       	ldd	r24, Y+18	; 0x12
    4cee:	8f 5f       	subi	r24, 0xFF	; 255
    4cf0:	8a 8b       	std	Y+18, r24	; 0x12
    4cf2:	8a 89       	ldd	r24, Y+18	; 0x12
    4cf4:	88 30       	cpi	r24, 0x08	; 8
    4cf6:	08 f4       	brcc	.+2      	; 0x4cfa <KEYPAD_voidGetPressedButton+0x1a4>
    4cf8:	3f cf       	rjmp	.-386    	; 0x4b78 <KEYPAD_voidGetPressedButton+0x22>
				break;
			}
		}
		GPIO_voidSetPinVal(KPAD_COL_PORT, Loc_ColIterator,HIGH);
	}
	return Loc_ReturnData;
    4cfa:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    4cfc:	62 96       	adiw	r28, 0x12	; 18
    4cfe:	0f b6       	in	r0, 0x3f	; 63
    4d00:	f8 94       	cli
    4d02:	de bf       	out	0x3e, r29	; 62
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	cd bf       	out	0x3d, r28	; 61
    4d08:	cf 91       	pop	r28
    4d0a:	df 91       	pop	r29
    4d0c:	08 95       	ret

00004d0e <ComparePass>:

#include "../LIB/STD_TYPES/STD_TYPES.h"
#include "../LIB/BIT_MATH/BIT_MATH.h"

u8 ComparePass(u8 * Copy_ptrArray1, u8 * Copy_ptrArray2 , u8 Copy_u8ArraySize)
{
    4d0e:	df 93       	push	r29
    4d10:	cf 93       	push	r28
    4d12:	cd b7       	in	r28, 0x3d	; 61
    4d14:	de b7       	in	r29, 0x3e	; 62
    4d16:	27 97       	sbiw	r28, 0x07	; 7
    4d18:	0f b6       	in	r0, 0x3f	; 63
    4d1a:	f8 94       	cli
    4d1c:	de bf       	out	0x3e, r29	; 62
    4d1e:	0f be       	out	0x3f, r0	; 63
    4d20:	cd bf       	out	0x3d, r28	; 61
    4d22:	9c 83       	std	Y+4, r25	; 0x04
    4d24:	8b 83       	std	Y+3, r24	; 0x03
    4d26:	7e 83       	std	Y+6, r23	; 0x06
    4d28:	6d 83       	std	Y+5, r22	; 0x05
    4d2a:	4f 83       	std	Y+7, r20	; 0x07
	u8 Local_u8CheckResult = 1;
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8LoopIterator = 0;
    4d30:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8LoopIterator = 0; Local_u8LoopIterator < Copy_u8ArraySize; Local_u8LoopIterator++)
    4d32:	19 82       	std	Y+1, r1	; 0x01
    4d34:	19 c0       	rjmp	.+50     	; 0x4d68 <ComparePass+0x5a>
	{
		if( Copy_ptrArray1[Local_u8LoopIterator] != Copy_ptrArray2[Local_u8LoopIterator])
    4d36:	89 81       	ldd	r24, Y+1	; 0x01
    4d38:	28 2f       	mov	r18, r24
    4d3a:	30 e0       	ldi	r19, 0x00	; 0
    4d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4d40:	fc 01       	movw	r30, r24
    4d42:	e2 0f       	add	r30, r18
    4d44:	f3 1f       	adc	r31, r19
    4d46:	40 81       	ld	r20, Z
    4d48:	89 81       	ldd	r24, Y+1	; 0x01
    4d4a:	28 2f       	mov	r18, r24
    4d4c:	30 e0       	ldi	r19, 0x00	; 0
    4d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d50:	9e 81       	ldd	r25, Y+6	; 0x06
    4d52:	fc 01       	movw	r30, r24
    4d54:	e2 0f       	add	r30, r18
    4d56:	f3 1f       	adc	r31, r19
    4d58:	80 81       	ld	r24, Z
    4d5a:	48 17       	cp	r20, r24
    4d5c:	11 f0       	breq	.+4      	; 0x4d62 <ComparePass+0x54>
		{
			Local_u8CheckResult = 0;
    4d5e:	1a 82       	std	Y+2, r1	; 0x02
    4d60:	07 c0       	rjmp	.+14     	; 0x4d70 <ComparePass+0x62>

u8 ComparePass(u8 * Copy_ptrArray1, u8 * Copy_ptrArray2 , u8 Copy_u8ArraySize)
{
	u8 Local_u8CheckResult = 1;
	u8 Local_u8LoopIterator = 0;
	for(Local_u8LoopIterator = 0; Local_u8LoopIterator < Copy_u8ArraySize; Local_u8LoopIterator++)
    4d62:	89 81       	ldd	r24, Y+1	; 0x01
    4d64:	8f 5f       	subi	r24, 0xFF	; 255
    4d66:	89 83       	std	Y+1, r24	; 0x01
    4d68:	99 81       	ldd	r25, Y+1	; 0x01
    4d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    4d6c:	98 17       	cp	r25, r24
    4d6e:	18 f3       	brcs	.-58     	; 0x4d36 <ComparePass+0x28>
		else
		{
			continue;
		}
	}
	return Local_u8CheckResult;
    4d70:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4d72:	27 96       	adiw	r28, 0x07	; 7
    4d74:	0f b6       	in	r0, 0x3f	; 63
    4d76:	f8 94       	cli
    4d78:	de bf       	out	0x3e, r29	; 62
    4d7a:	0f be       	out	0x3f, r0	; 63
    4d7c:	cd bf       	out	0x3d, r28	; 61
    4d7e:	cf 91       	pop	r28
    4d80:	df 91       	pop	r29
    4d82:	08 95       	ret

00004d84 <main>:
		{0x00, 0x00, 0x00, 0x00, 0x15, 0x0F, 0x14, 0x00 }  // Man is dead
};


int main(void)
{
    4d84:	0f 93       	push	r16
    4d86:	1f 93       	push	r17
    4d88:	df 93       	push	r29
    4d8a:	cf 93       	push	r28
    4d8c:	cd b7       	in	r28, 0x3d	; 61
    4d8e:	de b7       	in	r29, 0x3e	; 62
    4d90:	c6 58       	subi	r28, 0x86	; 134
    4d92:	d0 40       	sbci	r29, 0x00	; 0
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	cd bf       	out	0x3d, r28	; 61
	u8 FirstTimeLogin = 0;
    4d9e:	fe 01       	movw	r30, r28
    4da0:	e9 58       	subi	r30, 0x89	; 137
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	10 82       	st	Z, r1
	u8 Pressed_Key = 0;
    4da6:	fe 01       	movw	r30, r28
    4da8:	ea 58       	subi	r30, 0x8A	; 138
    4daa:	ff 4f       	sbci	r31, 0xFF	; 255
    4dac:	10 82       	st	Z, r1
	u8 FirstDigPlace = 6;
    4dae:	fe 01       	movw	r30, r28
    4db0:	eb 58       	subi	r30, 0x8B	; 139
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	86 e0       	ldi	r24, 0x06	; 6
    4db6:	80 83       	st	Z, r24
	u8 LoopIterator = 0;
    4db8:	fe 01       	movw	r30, r28
    4dba:	ec 58       	subi	r30, 0x8C	; 140
    4dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dbe:	10 82       	st	Z, r1
	u8 EnteredPassword[PASS_SIZE];
	u8 ReadEEPROMPassword[PASS_SIZE];
	s8 NumberOfTries = MAX_TRIES;
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	ed 58       	subi	r30, 0x8D	; 141
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	83 e0       	ldi	r24, 0x03	; 3
    4dc8:	80 83       	st	Z, r24
	u8 Local_u8Check = 0;
    4dca:	fe 01       	movw	r30, r28
    4dcc:	ee 58       	subi	r30, 0x8E	; 142
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	10 82       	st	Z, r1
	u8 Local_u8LoginFinished = 0;
    4dd2:	fe 01       	movw	r30, r28
    4dd4:	ef 58       	subi	r30, 0x8F	; 143
    4dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd8:	10 82       	st	Z, r1

	CLCD_voidInit(); // initialize the LCD
    4dda:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <CLCD_voidInit>
	KEYPAD_voidInit(); // initialize the LCD
    4dde:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <KEYPAD_voidInit>


	CLCD_voidClearScreen();
    4de2:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
	CLCD_voidDrwaExxtraChar(CLCD_ROW1 , CLCD_COL1, charcters[0]);
    4de6:	24 e1       	ldi	r18, 0x14	; 20
    4de8:	32 e0       	ldi	r19, 0x02	; 2
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	61 e0       	ldi	r22, 0x01	; 1
    4dee:	a9 01       	movw	r20, r18
    4df0:	0e 94 8b 24 	call	0x4916	; 0x4916 <CLCD_voidDrwaExxtraChar>
    4df4:	fe 01       	movw	r30, r28
    4df6:	e3 59       	subi	r30, 0x93	; 147
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	80 e0       	ldi	r24, 0x00	; 0
    4dfc:	90 e4       	ldi	r25, 0x40	; 64
    4dfe:	ac e9       	ldi	r26, 0x9C	; 156
    4e00:	b5 e4       	ldi	r27, 0x45	; 69
    4e02:	80 83       	st	Z, r24
    4e04:	91 83       	std	Z+1, r25	; 0x01
    4e06:	a2 83       	std	Z+2, r26	; 0x02
    4e08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e0a:	8e 01       	movw	r16, r28
    4e0c:	07 59       	subi	r16, 0x97	; 151
    4e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e10:	fe 01       	movw	r30, r28
    4e12:	e3 59       	subi	r30, 0x93	; 147
    4e14:	ff 4f       	sbci	r31, 0xFF	; 255
    4e16:	60 81       	ld	r22, Z
    4e18:	71 81       	ldd	r23, Z+1	; 0x01
    4e1a:	82 81       	ldd	r24, Z+2	; 0x02
    4e1c:	93 81       	ldd	r25, Z+3	; 0x03
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	4a ef       	ldi	r20, 0xFA	; 250
    4e24:	54 e4       	ldi	r21, 0x44	; 68
    4e26:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	f8 01       	movw	r30, r16
    4e30:	80 83       	st	Z, r24
    4e32:	91 83       	std	Z+1, r25	; 0x01
    4e34:	a2 83       	std	Z+2, r26	; 0x02
    4e36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e38:	fe 01       	movw	r30, r28
    4e3a:	e7 59       	subi	r30, 0x97	; 151
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	60 81       	ld	r22, Z
    4e40:	71 81       	ldd	r23, Z+1	; 0x01
    4e42:	82 81       	ldd	r24, Z+2	; 0x02
    4e44:	93 81       	ldd	r25, Z+3	; 0x03
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e8       	ldi	r20, 0x80	; 128
    4e4c:	5f e3       	ldi	r21, 0x3F	; 63
    4e4e:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    4e52:	88 23       	and	r24, r24
    4e54:	44 f4       	brge	.+16     	; 0x4e66 <main+0xe2>
		__ticks = 1;
    4e56:	fe 01       	movw	r30, r28
    4e58:	e9 59       	subi	r30, 0x99	; 153
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	81 e0       	ldi	r24, 0x01	; 1
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	80 83       	st	Z, r24
    4e64:	64 c0       	rjmp	.+200    	; 0x4f2e <main+0x1aa>
	else if (__tmp > 65535)
    4e66:	fe 01       	movw	r30, r28
    4e68:	e7 59       	subi	r30, 0x97	; 151
    4e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6c:	60 81       	ld	r22, Z
    4e6e:	71 81       	ldd	r23, Z+1	; 0x01
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	3f ef       	ldi	r19, 0xFF	; 255
    4e78:	4f e7       	ldi	r20, 0x7F	; 127
    4e7a:	57 e4       	ldi	r21, 0x47	; 71
    4e7c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    4e80:	18 16       	cp	r1, r24
    4e82:	0c f0       	brlt	.+2      	; 0x4e86 <main+0x102>
    4e84:	43 c0       	rjmp	.+134    	; 0x4f0c <main+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e86:	fe 01       	movw	r30, r28
    4e88:	e3 59       	subi	r30, 0x93	; 147
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	60 81       	ld	r22, Z
    4e8e:	71 81       	ldd	r23, Z+1	; 0x01
    4e90:	82 81       	ldd	r24, Z+2	; 0x02
    4e92:	93 81       	ldd	r25, Z+3	; 0x03
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	40 e2       	ldi	r20, 0x20	; 32
    4e9a:	51 e4       	ldi	r21, 0x41	; 65
    4e9c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    4ea0:	dc 01       	movw	r26, r24
    4ea2:	cb 01       	movw	r24, r22
    4ea4:	8e 01       	movw	r16, r28
    4ea6:	09 59       	subi	r16, 0x99	; 153
    4ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eaa:	bc 01       	movw	r22, r24
    4eac:	cd 01       	movw	r24, r26
    4eae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4eb2:	dc 01       	movw	r26, r24
    4eb4:	cb 01       	movw	r24, r22
    4eb6:	f8 01       	movw	r30, r16
    4eb8:	91 83       	std	Z+1, r25	; 0x01
    4eba:	80 83       	st	Z, r24
    4ebc:	1f c0       	rjmp	.+62     	; 0x4efc <main+0x178>
    4ebe:	fe 01       	movw	r30, r28
    4ec0:	eb 59       	subi	r30, 0x9B	; 155
    4ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec4:	88 ec       	ldi	r24, 0xC8	; 200
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	91 83       	std	Z+1, r25	; 0x01
    4eca:	80 83       	st	Z, r24
    4ecc:	fe 01       	movw	r30, r28
    4ece:	eb 59       	subi	r30, 0x9B	; 155
    4ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed2:	80 81       	ld	r24, Z
    4ed4:	91 81       	ldd	r25, Z+1	; 0x01
    4ed6:	01 97       	sbiw	r24, 0x01	; 1
    4ed8:	f1 f7       	brne	.-4      	; 0x4ed6 <main+0x152>
    4eda:	fe 01       	movw	r30, r28
    4edc:	eb 59       	subi	r30, 0x9B	; 155
    4ede:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee0:	91 83       	std	Z+1, r25	; 0x01
    4ee2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee4:	de 01       	movw	r26, r28
    4ee6:	a9 59       	subi	r26, 0x99	; 153
    4ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    4eea:	fe 01       	movw	r30, r28
    4eec:	e9 59       	subi	r30, 0x99	; 153
    4eee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef0:	80 81       	ld	r24, Z
    4ef2:	91 81       	ldd	r25, Z+1	; 0x01
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	11 96       	adiw	r26, 0x01	; 1
    4ef8:	9c 93       	st	X, r25
    4efa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efc:	fe 01       	movw	r30, r28
    4efe:	e9 59       	subi	r30, 0x99	; 153
    4f00:	ff 4f       	sbci	r31, 0xFF	; 255
    4f02:	80 81       	ld	r24, Z
    4f04:	91 81       	ldd	r25, Z+1	; 0x01
    4f06:	00 97       	sbiw	r24, 0x00	; 0
    4f08:	d1 f6       	brne	.-76     	; 0x4ebe <main+0x13a>
    4f0a:	27 c0       	rjmp	.+78     	; 0x4f5a <main+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f0c:	8e 01       	movw	r16, r28
    4f0e:	09 59       	subi	r16, 0x99	; 153
    4f10:	1f 4f       	sbci	r17, 0xFF	; 255
    4f12:	fe 01       	movw	r30, r28
    4f14:	e7 59       	subi	r30, 0x97	; 151
    4f16:	ff 4f       	sbci	r31, 0xFF	; 255
    4f18:	60 81       	ld	r22, Z
    4f1a:	71 81       	ldd	r23, Z+1	; 0x01
    4f1c:	82 81       	ldd	r24, Z+2	; 0x02
    4f1e:	93 81       	ldd	r25, Z+3	; 0x03
    4f20:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4f24:	dc 01       	movw	r26, r24
    4f26:	cb 01       	movw	r24, r22
    4f28:	f8 01       	movw	r30, r16
    4f2a:	91 83       	std	Z+1, r25	; 0x01
    4f2c:	80 83       	st	Z, r24
    4f2e:	de 01       	movw	r26, r28
    4f30:	ad 59       	subi	r26, 0x9D	; 157
    4f32:	bf 4f       	sbci	r27, 0xFF	; 255
    4f34:	fe 01       	movw	r30, r28
    4f36:	e9 59       	subi	r30, 0x99	; 153
    4f38:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3a:	80 81       	ld	r24, Z
    4f3c:	91 81       	ldd	r25, Z+1	; 0x01
    4f3e:	8d 93       	st	X+, r24
    4f40:	9c 93       	st	X, r25
    4f42:	fe 01       	movw	r30, r28
    4f44:	ed 59       	subi	r30, 0x9D	; 157
    4f46:	ff 4f       	sbci	r31, 0xFF	; 255
    4f48:	80 81       	ld	r24, Z
    4f4a:	91 81       	ldd	r25, Z+1	; 0x01
    4f4c:	01 97       	sbiw	r24, 0x01	; 1
    4f4e:	f1 f7       	brne	.-4      	; 0x4f4c <main+0x1c8>
    4f50:	fe 01       	movw	r30, r28
    4f52:	ed 59       	subi	r30, 0x9D	; 157
    4f54:	ff 4f       	sbci	r31, 0xFF	; 255
    4f56:	91 83       	std	Z+1, r25	; 0x01
    4f58:	80 83       	st	Z, r24




	/* Set the Password for First Time */
	EEPROM_voidReadByte(FIRST_RUN_FLAG_ADDRESS,&FirstTimeLogin);
    4f5a:	9e 01       	movw	r18, r28
    4f5c:	29 58       	subi	r18, 0x89	; 137
    4f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f60:	85 e0       	ldi	r24, 0x05	; 5
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	b9 01       	movw	r22, r18
    4f66:	0e 94 31 15 	call	0x2a62	; 0x2a62 <EEPROM_voidReadByte>

	SPI_MasterConfigs_t MASTER ;
	MASTER.Mode = SPI_MASTER;
    4f6a:	fe 01       	movw	r30, r28
    4f6c:	e0 58       	subi	r30, 0x80	; 128
    4f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f70:	80 e1       	ldi	r24, 0x10	; 16
    4f72:	80 83       	st	Z, r24
	MASTER.Spi_Interrupt = SPI_DISABLE_INTERRUPT;
    4f74:	fe 01       	movw	r30, r28
    4f76:	e0 58       	subi	r30, 0x80	; 128
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	15 82       	std	Z+5, r1	; 0x05
	MASTER.Spi_ClockPhase = SPI_LEADING_SETUP;
    4f7c:	fe 01       	movw	r30, r28
    4f7e:	e0 58       	subi	r30, 0x80	; 128
    4f80:	ff 4f       	sbci	r31, 0xFF	; 255
    4f82:	84 e0       	ldi	r24, 0x04	; 4
    4f84:	83 83       	std	Z+3, r24	; 0x03
	MASTER.Spi_ClockPolarity = SPI_LEADING_FALLING;
    4f86:	fe 01       	movw	r30, r28
    4f88:	e0 58       	subi	r30, 0x80	; 128
    4f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f8c:	88 e0       	ldi	r24, 0x08	; 8
    4f8e:	82 83       	std	Z+2, r24	; 0x02
	MASTER.Spi_DataOrder = SPI_MSB_FIRST;
    4f90:	fe 01       	movw	r30, r28
    4f92:	e0 58       	subi	r30, 0x80	; 128
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	14 82       	std	Z+4, r1	; 0x04
	MASTER.Spi_Speed = FCLK_16;
    4f98:	fe 01       	movw	r30, r28
    4f9a:	e0 58       	subi	r30, 0x80	; 128
    4f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f9e:	81 e0       	ldi	r24, 0x01	; 1
    4fa0:	81 83       	std	Z+1, r24	; 0x01
	MASTER.Spi_State = SPI_ENABLE;
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	e0 58       	subi	r30, 0x80	; 128
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	80 e4       	ldi	r24, 0x40	; 64
    4faa:	86 83       	std	Z+6, r24	; 0x06
	SPI_u8SetMasterConfigs(&MASTER);
    4fac:	ce 01       	movw	r24, r28
    4fae:	80 58       	subi	r24, 0x80	; 128
    4fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb2:	0e 94 fe 13 	call	0x27fc	; 0x27fc <SPI_u8SetMasterConfigs>
    4fb6:	06 c3       	rjmp	.+1548   	; 0x55c4 <main+0x840>

	while(FirstTimeLogin == 0xFF)
	{
		/* LCD_Messages */
		CLCD_voidSendString((u8*)"Welcome to our");
    4fb8:	80 e6       	ldi	r24, 0x60	; 96
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
		CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
    4fc0:	82 e0       	ldi	r24, 0x02	; 2
    4fc2:	61 e0       	ldi	r22, 0x01	; 1
    4fc4:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
		CLCD_voidSendString((u8*)"System");
    4fc8:	8f e6       	ldi	r24, 0x6F	; 111
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
    4fd0:	fe 01       	movw	r30, r28
    4fd2:	e1 5a       	subi	r30, 0xA1	; 161
    4fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	aa ef       	ldi	r26, 0xFA	; 250
    4fdc:	b4 e4       	ldi	r27, 0x44	; 68
    4fde:	80 83       	st	Z, r24
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	a2 83       	std	Z+2, r26	; 0x02
    4fe4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fe6:	8e 01       	movw	r16, r28
    4fe8:	05 5a       	subi	r16, 0xA5	; 165
    4fea:	1f 4f       	sbci	r17, 0xFF	; 255
    4fec:	fe 01       	movw	r30, r28
    4fee:	e1 5a       	subi	r30, 0xA1	; 161
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	60 81       	ld	r22, Z
    4ff4:	71 81       	ldd	r23, Z+1	; 0x01
    4ff6:	82 81       	ldd	r24, Z+2	; 0x02
    4ff8:	93 81       	ldd	r25, Z+3	; 0x03
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	4a ef       	ldi	r20, 0xFA	; 250
    5000:	54 e4       	ldi	r21, 0x44	; 68
    5002:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	f8 01       	movw	r30, r16
    500c:	80 83       	st	Z, r24
    500e:	91 83       	std	Z+1, r25	; 0x01
    5010:	a2 83       	std	Z+2, r26	; 0x02
    5012:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5014:	fe 01       	movw	r30, r28
    5016:	e5 5a       	subi	r30, 0xA5	; 165
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	60 81       	ld	r22, Z
    501c:	71 81       	ldd	r23, Z+1	; 0x01
    501e:	82 81       	ldd	r24, Z+2	; 0x02
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	30 e0       	ldi	r19, 0x00	; 0
    5026:	40 e8       	ldi	r20, 0x80	; 128
    5028:	5f e3       	ldi	r21, 0x3F	; 63
    502a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    502e:	88 23       	and	r24, r24
    5030:	44 f4       	brge	.+16     	; 0x5042 <main+0x2be>
		__ticks = 1;
    5032:	fe 01       	movw	r30, r28
    5034:	e7 5a       	subi	r30, 0xA7	; 167
    5036:	ff 4f       	sbci	r31, 0xFF	; 255
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	91 83       	std	Z+1, r25	; 0x01
    503e:	80 83       	st	Z, r24
    5040:	64 c0       	rjmp	.+200    	; 0x510a <main+0x386>
	else if (__tmp > 65535)
    5042:	fe 01       	movw	r30, r28
    5044:	e5 5a       	subi	r30, 0xA5	; 165
    5046:	ff 4f       	sbci	r31, 0xFF	; 255
    5048:	60 81       	ld	r22, Z
    504a:	71 81       	ldd	r23, Z+1	; 0x01
    504c:	82 81       	ldd	r24, Z+2	; 0x02
    504e:	93 81       	ldd	r25, Z+3	; 0x03
    5050:	20 e0       	ldi	r18, 0x00	; 0
    5052:	3f ef       	ldi	r19, 0xFF	; 255
    5054:	4f e7       	ldi	r20, 0x7F	; 127
    5056:	57 e4       	ldi	r21, 0x47	; 71
    5058:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    505c:	18 16       	cp	r1, r24
    505e:	0c f0       	brlt	.+2      	; 0x5062 <main+0x2de>
    5060:	43 c0       	rjmp	.+134    	; 0x50e8 <main+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5062:	fe 01       	movw	r30, r28
    5064:	e1 5a       	subi	r30, 0xA1	; 161
    5066:	ff 4f       	sbci	r31, 0xFF	; 255
    5068:	60 81       	ld	r22, Z
    506a:	71 81       	ldd	r23, Z+1	; 0x01
    506c:	82 81       	ldd	r24, Z+2	; 0x02
    506e:	93 81       	ldd	r25, Z+3	; 0x03
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	40 e2       	ldi	r20, 0x20	; 32
    5076:	51 e4       	ldi	r21, 0x41	; 65
    5078:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	8e 01       	movw	r16, r28
    5082:	07 5a       	subi	r16, 0xA7	; 167
    5084:	1f 4f       	sbci	r17, 0xFF	; 255
    5086:	bc 01       	movw	r22, r24
    5088:	cd 01       	movw	r24, r26
    508a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    508e:	dc 01       	movw	r26, r24
    5090:	cb 01       	movw	r24, r22
    5092:	f8 01       	movw	r30, r16
    5094:	91 83       	std	Z+1, r25	; 0x01
    5096:	80 83       	st	Z, r24
    5098:	1f c0       	rjmp	.+62     	; 0x50d8 <main+0x354>
    509a:	fe 01       	movw	r30, r28
    509c:	e9 5a       	subi	r30, 0xA9	; 169
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	88 ec       	ldi	r24, 0xC8	; 200
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	91 83       	std	Z+1, r25	; 0x01
    50a6:	80 83       	st	Z, r24
    50a8:	fe 01       	movw	r30, r28
    50aa:	e9 5a       	subi	r30, 0xA9	; 169
    50ac:	ff 4f       	sbci	r31, 0xFF	; 255
    50ae:	80 81       	ld	r24, Z
    50b0:	91 81       	ldd	r25, Z+1	; 0x01
    50b2:	01 97       	sbiw	r24, 0x01	; 1
    50b4:	f1 f7       	brne	.-4      	; 0x50b2 <main+0x32e>
    50b6:	fe 01       	movw	r30, r28
    50b8:	e9 5a       	subi	r30, 0xA9	; 169
    50ba:	ff 4f       	sbci	r31, 0xFF	; 255
    50bc:	91 83       	std	Z+1, r25	; 0x01
    50be:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50c0:	de 01       	movw	r26, r28
    50c2:	a7 5a       	subi	r26, 0xA7	; 167
    50c4:	bf 4f       	sbci	r27, 0xFF	; 255
    50c6:	fe 01       	movw	r30, r28
    50c8:	e7 5a       	subi	r30, 0xA7	; 167
    50ca:	ff 4f       	sbci	r31, 0xFF	; 255
    50cc:	80 81       	ld	r24, Z
    50ce:	91 81       	ldd	r25, Z+1	; 0x01
    50d0:	01 97       	sbiw	r24, 0x01	; 1
    50d2:	11 96       	adiw	r26, 0x01	; 1
    50d4:	9c 93       	st	X, r25
    50d6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d8:	fe 01       	movw	r30, r28
    50da:	e7 5a       	subi	r30, 0xA7	; 167
    50dc:	ff 4f       	sbci	r31, 0xFF	; 255
    50de:	80 81       	ld	r24, Z
    50e0:	91 81       	ldd	r25, Z+1	; 0x01
    50e2:	00 97       	sbiw	r24, 0x00	; 0
    50e4:	d1 f6       	brne	.-76     	; 0x509a <main+0x316>
    50e6:	27 c0       	rjmp	.+78     	; 0x5136 <main+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e8:	8e 01       	movw	r16, r28
    50ea:	07 5a       	subi	r16, 0xA7	; 167
    50ec:	1f 4f       	sbci	r17, 0xFF	; 255
    50ee:	fe 01       	movw	r30, r28
    50f0:	e5 5a       	subi	r30, 0xA5	; 165
    50f2:	ff 4f       	sbci	r31, 0xFF	; 255
    50f4:	60 81       	ld	r22, Z
    50f6:	71 81       	ldd	r23, Z+1	; 0x01
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	93 81       	ldd	r25, Z+3	; 0x03
    50fc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5100:	dc 01       	movw	r26, r24
    5102:	cb 01       	movw	r24, r22
    5104:	f8 01       	movw	r30, r16
    5106:	91 83       	std	Z+1, r25	; 0x01
    5108:	80 83       	st	Z, r24
    510a:	de 01       	movw	r26, r28
    510c:	ab 5a       	subi	r26, 0xAB	; 171
    510e:	bf 4f       	sbci	r27, 0xFF	; 255
    5110:	fe 01       	movw	r30, r28
    5112:	e7 5a       	subi	r30, 0xA7	; 167
    5114:	ff 4f       	sbci	r31, 0xFF	; 255
    5116:	80 81       	ld	r24, Z
    5118:	91 81       	ldd	r25, Z+1	; 0x01
    511a:	8d 93       	st	X+, r24
    511c:	9c 93       	st	X, r25
    511e:	fe 01       	movw	r30, r28
    5120:	eb 5a       	subi	r30, 0xAB	; 171
    5122:	ff 4f       	sbci	r31, 0xFF	; 255
    5124:	80 81       	ld	r24, Z
    5126:	91 81       	ldd	r25, Z+1	; 0x01
    5128:	01 97       	sbiw	r24, 0x01	; 1
    512a:	f1 f7       	brne	.-4      	; 0x5128 <main+0x3a4>
    512c:	fe 01       	movw	r30, r28
    512e:	eb 5a       	subi	r30, 0xAB	; 171
    5130:	ff 4f       	sbci	r31, 0xFF	; 255
    5132:	91 83       	std	Z+1, r25	; 0x01
    5134:	80 83       	st	Z, r24
		_delay_ms(2000);
		CLCD_voidClearScreen();
    5136:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
		CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	61 e0       	ldi	r22, 0x01	; 1
    513e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
		CLCD_voidSendString((u8*)"Login for first");
    5142:	86 e7       	ldi	r24, 0x76	; 118
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
		CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
    514a:	82 e0       	ldi	r24, 0x02	; 2
    514c:	61 e0       	ldi	r22, 0x01	; 1
    514e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
		CLCD_voidSendString((u8*)"Time");
    5152:	86 e8       	ldi	r24, 0x86	; 134
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
    515a:	fe 01       	movw	r30, r28
    515c:	ef 5a       	subi	r30, 0xAF	; 175
    515e:	ff 4f       	sbci	r31, 0xFF	; 255
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	aa e7       	ldi	r26, 0x7A	; 122
    5166:	b4 e4       	ldi	r27, 0x44	; 68
    5168:	80 83       	st	Z, r24
    516a:	91 83       	std	Z+1, r25	; 0x01
    516c:	a2 83       	std	Z+2, r26	; 0x02
    516e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5170:	8e 01       	movw	r16, r28
    5172:	03 5b       	subi	r16, 0xB3	; 179
    5174:	1f 4f       	sbci	r17, 0xFF	; 255
    5176:	fe 01       	movw	r30, r28
    5178:	ef 5a       	subi	r30, 0xAF	; 175
    517a:	ff 4f       	sbci	r31, 0xFF	; 255
    517c:	60 81       	ld	r22, Z
    517e:	71 81       	ldd	r23, Z+1	; 0x01
    5180:	82 81       	ldd	r24, Z+2	; 0x02
    5182:	93 81       	ldd	r25, Z+3	; 0x03
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	4a ef       	ldi	r20, 0xFA	; 250
    518a:	54 e4       	ldi	r21, 0x44	; 68
    518c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	f8 01       	movw	r30, r16
    5196:	80 83       	st	Z, r24
    5198:	91 83       	std	Z+1, r25	; 0x01
    519a:	a2 83       	std	Z+2, r26	; 0x02
    519c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    519e:	fe 01       	movw	r30, r28
    51a0:	e3 5b       	subi	r30, 0xB3	; 179
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	60 81       	ld	r22, Z
    51a6:	71 81       	ldd	r23, Z+1	; 0x01
    51a8:	82 81       	ldd	r24, Z+2	; 0x02
    51aa:	93 81       	ldd	r25, Z+3	; 0x03
    51ac:	20 e0       	ldi	r18, 0x00	; 0
    51ae:	30 e0       	ldi	r19, 0x00	; 0
    51b0:	40 e8       	ldi	r20, 0x80	; 128
    51b2:	5f e3       	ldi	r21, 0x3F	; 63
    51b4:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    51b8:	88 23       	and	r24, r24
    51ba:	44 f4       	brge	.+16     	; 0x51cc <main+0x448>
		__ticks = 1;
    51bc:	fe 01       	movw	r30, r28
    51be:	e5 5b       	subi	r30, 0xB5	; 181
    51c0:	ff 4f       	sbci	r31, 0xFF	; 255
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	91 83       	std	Z+1, r25	; 0x01
    51c8:	80 83       	st	Z, r24
    51ca:	64 c0       	rjmp	.+200    	; 0x5294 <main+0x510>
	else if (__tmp > 65535)
    51cc:	fe 01       	movw	r30, r28
    51ce:	e3 5b       	subi	r30, 0xB3	; 179
    51d0:	ff 4f       	sbci	r31, 0xFF	; 255
    51d2:	60 81       	ld	r22, Z
    51d4:	71 81       	ldd	r23, Z+1	; 0x01
    51d6:	82 81       	ldd	r24, Z+2	; 0x02
    51d8:	93 81       	ldd	r25, Z+3	; 0x03
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	3f ef       	ldi	r19, 0xFF	; 255
    51de:	4f e7       	ldi	r20, 0x7F	; 127
    51e0:	57 e4       	ldi	r21, 0x47	; 71
    51e2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    51e6:	18 16       	cp	r1, r24
    51e8:	0c f0       	brlt	.+2      	; 0x51ec <main+0x468>
    51ea:	43 c0       	rjmp	.+134    	; 0x5272 <main+0x4ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51ec:	fe 01       	movw	r30, r28
    51ee:	ef 5a       	subi	r30, 0xAF	; 175
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	60 81       	ld	r22, Z
    51f4:	71 81       	ldd	r23, Z+1	; 0x01
    51f6:	82 81       	ldd	r24, Z+2	; 0x02
    51f8:	93 81       	ldd	r25, Z+3	; 0x03
    51fa:	20 e0       	ldi	r18, 0x00	; 0
    51fc:	30 e0       	ldi	r19, 0x00	; 0
    51fe:	40 e2       	ldi	r20, 0x20	; 32
    5200:	51 e4       	ldi	r21, 0x41	; 65
    5202:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5206:	dc 01       	movw	r26, r24
    5208:	cb 01       	movw	r24, r22
    520a:	8e 01       	movw	r16, r28
    520c:	05 5b       	subi	r16, 0xB5	; 181
    520e:	1f 4f       	sbci	r17, 0xFF	; 255
    5210:	bc 01       	movw	r22, r24
    5212:	cd 01       	movw	r24, r26
    5214:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5218:	dc 01       	movw	r26, r24
    521a:	cb 01       	movw	r24, r22
    521c:	f8 01       	movw	r30, r16
    521e:	91 83       	std	Z+1, r25	; 0x01
    5220:	80 83       	st	Z, r24
    5222:	1f c0       	rjmp	.+62     	; 0x5262 <main+0x4de>
    5224:	fe 01       	movw	r30, r28
    5226:	e7 5b       	subi	r30, 0xB7	; 183
    5228:	ff 4f       	sbci	r31, 0xFF	; 255
    522a:	88 ec       	ldi	r24, 0xC8	; 200
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	91 83       	std	Z+1, r25	; 0x01
    5230:	80 83       	st	Z, r24
    5232:	fe 01       	movw	r30, r28
    5234:	e7 5b       	subi	r30, 0xB7	; 183
    5236:	ff 4f       	sbci	r31, 0xFF	; 255
    5238:	80 81       	ld	r24, Z
    523a:	91 81       	ldd	r25, Z+1	; 0x01
    523c:	01 97       	sbiw	r24, 0x01	; 1
    523e:	f1 f7       	brne	.-4      	; 0x523c <main+0x4b8>
    5240:	fe 01       	movw	r30, r28
    5242:	e7 5b       	subi	r30, 0xB7	; 183
    5244:	ff 4f       	sbci	r31, 0xFF	; 255
    5246:	91 83       	std	Z+1, r25	; 0x01
    5248:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    524a:	de 01       	movw	r26, r28
    524c:	a5 5b       	subi	r26, 0xB5	; 181
    524e:	bf 4f       	sbci	r27, 0xFF	; 255
    5250:	fe 01       	movw	r30, r28
    5252:	e5 5b       	subi	r30, 0xB5	; 181
    5254:	ff 4f       	sbci	r31, 0xFF	; 255
    5256:	80 81       	ld	r24, Z
    5258:	91 81       	ldd	r25, Z+1	; 0x01
    525a:	01 97       	sbiw	r24, 0x01	; 1
    525c:	11 96       	adiw	r26, 0x01	; 1
    525e:	9c 93       	st	X, r25
    5260:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5262:	fe 01       	movw	r30, r28
    5264:	e5 5b       	subi	r30, 0xB5	; 181
    5266:	ff 4f       	sbci	r31, 0xFF	; 255
    5268:	80 81       	ld	r24, Z
    526a:	91 81       	ldd	r25, Z+1	; 0x01
    526c:	00 97       	sbiw	r24, 0x00	; 0
    526e:	d1 f6       	brne	.-76     	; 0x5224 <main+0x4a0>
    5270:	27 c0       	rjmp	.+78     	; 0x52c0 <main+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5272:	8e 01       	movw	r16, r28
    5274:	05 5b       	subi	r16, 0xB5	; 181
    5276:	1f 4f       	sbci	r17, 0xFF	; 255
    5278:	fe 01       	movw	r30, r28
    527a:	e3 5b       	subi	r30, 0xB3	; 179
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	60 81       	ld	r22, Z
    5280:	71 81       	ldd	r23, Z+1	; 0x01
    5282:	82 81       	ldd	r24, Z+2	; 0x02
    5284:	93 81       	ldd	r25, Z+3	; 0x03
    5286:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    528a:	dc 01       	movw	r26, r24
    528c:	cb 01       	movw	r24, r22
    528e:	f8 01       	movw	r30, r16
    5290:	91 83       	std	Z+1, r25	; 0x01
    5292:	80 83       	st	Z, r24
    5294:	de 01       	movw	r26, r28
    5296:	a9 5b       	subi	r26, 0xB9	; 185
    5298:	bf 4f       	sbci	r27, 0xFF	; 255
    529a:	fe 01       	movw	r30, r28
    529c:	e5 5b       	subi	r30, 0xB5	; 181
    529e:	ff 4f       	sbci	r31, 0xFF	; 255
    52a0:	80 81       	ld	r24, Z
    52a2:	91 81       	ldd	r25, Z+1	; 0x01
    52a4:	8d 93       	st	X+, r24
    52a6:	9c 93       	st	X, r25
    52a8:	fe 01       	movw	r30, r28
    52aa:	e9 5b       	subi	r30, 0xB9	; 185
    52ac:	ff 4f       	sbci	r31, 0xFF	; 255
    52ae:	80 81       	ld	r24, Z
    52b0:	91 81       	ldd	r25, Z+1	; 0x01
    52b2:	01 97       	sbiw	r24, 0x01	; 1
    52b4:	f1 f7       	brne	.-4      	; 0x52b2 <main+0x52e>
    52b6:	fe 01       	movw	r30, r28
    52b8:	e9 5b       	subi	r30, 0xB9	; 185
    52ba:	ff 4f       	sbci	r31, 0xFF	; 255
    52bc:	91 83       	std	Z+1, r25	; 0x01
    52be:	80 83       	st	Z, r24
		_delay_ms(1000);
		CLCD_voidClearScreen();
    52c0:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
		CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	61 e0       	ldi	r22, 0x01	; 1
    52c8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
		CLCD_voidSendString((u8*)"Set Password");
    52cc:	8b e8       	ldi	r24, 0x8B	; 139
    52ce:	90 e0       	ldi	r25, 0x00	; 0
    52d0:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
		CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
    52d4:	82 e0       	ldi	r24, 0x02	; 2
    52d6:	61 e0       	ldi	r22, 0x01	; 1
    52d8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
		CLCD_voidSendString((u8*)"Pass:");
    52dc:	88 e9       	ldi	r24, 0x98	; 152
    52de:	90 e0       	ldi	r25, 0x00	; 0
    52e0:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
		for(LoopIterator = 0; LoopIterator < PASS_SIZE; LoopIterator++)
    52e4:	fe 01       	movw	r30, r28
    52e6:	ec 58       	subi	r30, 0x8C	; 140
    52e8:	ff 4f       	sbci	r31, 0xFF	; 255
    52ea:	10 82       	st	Z, r1
    52ec:	cb c0       	rjmp	.+406    	; 0x5484 <main+0x700>
		{
			do
			{
				Pressed_Key = KEYPAD_voidGetPressedButton();
    52ee:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <KEYPAD_voidGetPressedButton>
    52f2:	fe 01       	movw	r30, r28
    52f4:	ea 58       	subi	r30, 0x8A	; 138
    52f6:	ff 4f       	sbci	r31, 0xFF	; 255
    52f8:	80 83       	st	Z, r24
			}while(Pressed_Key == NOT_PRESSED);
    52fa:	fe 01       	movw	r30, r28
    52fc:	ea 58       	subi	r30, 0x8A	; 138
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	80 81       	ld	r24, Z
    5302:	88 23       	and	r24, r24
    5304:	a1 f3       	breq	.-24     	; 0x52ee <main+0x56a>

			CLCD_voidGoToX_Y(CLCD_ROW2, FirstDigPlace);
    5306:	fe 01       	movw	r30, r28
    5308:	eb 58       	subi	r30, 0x8B	; 139
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	82 e0       	ldi	r24, 0x02	; 2
    530e:	60 81       	ld	r22, Z
    5310:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
			CLCD_voidSendCharacter(Pressed_Key);
    5314:	fe 01       	movw	r30, r28
    5316:	ea 58       	subi	r30, 0x8A	; 138
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 81       	ld	r24, Z
    531c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
			EnteredPassword[LoopIterator] = Pressed_Key;
    5320:	fe 01       	movw	r30, r28
    5322:	ec 58       	subi	r30, 0x8C	; 140
    5324:	ff 4f       	sbci	r31, 0xFF	; 255
    5326:	80 81       	ld	r24, Z
    5328:	28 2f       	mov	r18, r24
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	ce 01       	movw	r24, r28
    532e:	88 58       	subi	r24, 0x88	; 136
    5330:	9f 4f       	sbci	r25, 0xFF	; 255
    5332:	dc 01       	movw	r26, r24
    5334:	a2 0f       	add	r26, r18
    5336:	b3 1f       	adc	r27, r19
    5338:	fe 01       	movw	r30, r28
    533a:	ea 58       	subi	r30, 0x8A	; 138
    533c:	ff 4f       	sbci	r31, 0xFF	; 255
    533e:	80 81       	ld	r24, Z
    5340:	8c 93       	st	X, r24
    5342:	fe 01       	movw	r30, r28
    5344:	ed 5b       	subi	r30, 0xBD	; 189
    5346:	ff 4f       	sbci	r31, 0xFF	; 255
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	90 e0       	ldi	r25, 0x00	; 0
    534c:	a8 e4       	ldi	r26, 0x48	; 72
    534e:	b3 e4       	ldi	r27, 0x43	; 67
    5350:	80 83       	st	Z, r24
    5352:	91 83       	std	Z+1, r25	; 0x01
    5354:	a2 83       	std	Z+2, r26	; 0x02
    5356:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5358:	8e 01       	movw	r16, r28
    535a:	01 5c       	subi	r16, 0xC1	; 193
    535c:	1f 4f       	sbci	r17, 0xFF	; 255
    535e:	fe 01       	movw	r30, r28
    5360:	ed 5b       	subi	r30, 0xBD	; 189
    5362:	ff 4f       	sbci	r31, 0xFF	; 255
    5364:	60 81       	ld	r22, Z
    5366:	71 81       	ldd	r23, Z+1	; 0x01
    5368:	82 81       	ldd	r24, Z+2	; 0x02
    536a:	93 81       	ldd	r25, Z+3	; 0x03
    536c:	20 e0       	ldi	r18, 0x00	; 0
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	4a ef       	ldi	r20, 0xFA	; 250
    5372:	54 e4       	ldi	r21, 0x44	; 68
    5374:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	f8 01       	movw	r30, r16
    537e:	80 83       	st	Z, r24
    5380:	91 83       	std	Z+1, r25	; 0x01
    5382:	a2 83       	std	Z+2, r26	; 0x02
    5384:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5386:	fe 01       	movw	r30, r28
    5388:	ff 96       	adiw	r30, 0x3f	; 63
    538a:	60 81       	ld	r22, Z
    538c:	71 81       	ldd	r23, Z+1	; 0x01
    538e:	82 81       	ldd	r24, Z+2	; 0x02
    5390:	93 81       	ldd	r25, Z+3	; 0x03
    5392:	20 e0       	ldi	r18, 0x00	; 0
    5394:	30 e0       	ldi	r19, 0x00	; 0
    5396:	40 e8       	ldi	r20, 0x80	; 128
    5398:	5f e3       	ldi	r21, 0x3F	; 63
    539a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    539e:	88 23       	and	r24, r24
    53a0:	2c f4       	brge	.+10     	; 0x53ac <main+0x628>
		__ticks = 1;
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	90 e0       	ldi	r25, 0x00	; 0
    53a6:	9e af       	std	Y+62, r25	; 0x3e
    53a8:	8d af       	std	Y+61, r24	; 0x3d
    53aa:	46 c0       	rjmp	.+140    	; 0x5438 <main+0x6b4>
	else if (__tmp > 65535)
    53ac:	fe 01       	movw	r30, r28
    53ae:	ff 96       	adiw	r30, 0x3f	; 63
    53b0:	60 81       	ld	r22, Z
    53b2:	71 81       	ldd	r23, Z+1	; 0x01
    53b4:	82 81       	ldd	r24, Z+2	; 0x02
    53b6:	93 81       	ldd	r25, Z+3	; 0x03
    53b8:	20 e0       	ldi	r18, 0x00	; 0
    53ba:	3f ef       	ldi	r19, 0xFF	; 255
    53bc:	4f e7       	ldi	r20, 0x7F	; 127
    53be:	57 e4       	ldi	r21, 0x47	; 71
    53c0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    53c4:	18 16       	cp	r1, r24
    53c6:	64 f5       	brge	.+88     	; 0x5420 <main+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53c8:	fe 01       	movw	r30, r28
    53ca:	ed 5b       	subi	r30, 0xBD	; 189
    53cc:	ff 4f       	sbci	r31, 0xFF	; 255
    53ce:	60 81       	ld	r22, Z
    53d0:	71 81       	ldd	r23, Z+1	; 0x01
    53d2:	82 81       	ldd	r24, Z+2	; 0x02
    53d4:	93 81       	ldd	r25, Z+3	; 0x03
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	40 e2       	ldi	r20, 0x20	; 32
    53dc:	51 e4       	ldi	r21, 0x41	; 65
    53de:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	bc 01       	movw	r22, r24
    53e8:	cd 01       	movw	r24, r26
    53ea:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    53ee:	dc 01       	movw	r26, r24
    53f0:	cb 01       	movw	r24, r22
    53f2:	9e af       	std	Y+62, r25	; 0x3e
    53f4:	8d af       	std	Y+61, r24	; 0x3d
    53f6:	0f c0       	rjmp	.+30     	; 0x5416 <main+0x692>
    53f8:	88 ec       	ldi	r24, 0xC8	; 200
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	9c af       	std	Y+60, r25	; 0x3c
    53fe:	8b af       	std	Y+59, r24	; 0x3b
    5400:	8b ad       	ldd	r24, Y+59	; 0x3b
    5402:	9c ad       	ldd	r25, Y+60	; 0x3c
    5404:	01 97       	sbiw	r24, 0x01	; 1
    5406:	f1 f7       	brne	.-4      	; 0x5404 <main+0x680>
    5408:	9c af       	std	Y+60, r25	; 0x3c
    540a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    540c:	8d ad       	ldd	r24, Y+61	; 0x3d
    540e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5410:	01 97       	sbiw	r24, 0x01	; 1
    5412:	9e af       	std	Y+62, r25	; 0x3e
    5414:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5416:	8d ad       	ldd	r24, Y+61	; 0x3d
    5418:	9e ad       	ldd	r25, Y+62	; 0x3e
    541a:	00 97       	sbiw	r24, 0x00	; 0
    541c:	69 f7       	brne	.-38     	; 0x53f8 <main+0x674>
    541e:	16 c0       	rjmp	.+44     	; 0x544c <main+0x6c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5420:	fe 01       	movw	r30, r28
    5422:	ff 96       	adiw	r30, 0x3f	; 63
    5424:	60 81       	ld	r22, Z
    5426:	71 81       	ldd	r23, Z+1	; 0x01
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	93 81       	ldd	r25, Z+3	; 0x03
    542c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5430:	dc 01       	movw	r26, r24
    5432:	cb 01       	movw	r24, r22
    5434:	9e af       	std	Y+62, r25	; 0x3e
    5436:	8d af       	std	Y+61, r24	; 0x3d
    5438:	8d ad       	ldd	r24, Y+61	; 0x3d
    543a:	9e ad       	ldd	r25, Y+62	; 0x3e
    543c:	9a af       	std	Y+58, r25	; 0x3a
    543e:	89 af       	std	Y+57, r24	; 0x39
    5440:	89 ad       	ldd	r24, Y+57	; 0x39
    5442:	9a ad       	ldd	r25, Y+58	; 0x3a
    5444:	01 97       	sbiw	r24, 0x01	; 1
    5446:	f1 f7       	brne	.-4      	; 0x5444 <main+0x6c0>
    5448:	9a af       	std	Y+58, r25	; 0x3a
    544a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);
			CLCD_voidGoToX_Y(CLCD_ROW2, FirstDigPlace);
    544c:	fe 01       	movw	r30, r28
    544e:	eb 58       	subi	r30, 0x8B	; 139
    5450:	ff 4f       	sbci	r31, 0xFF	; 255
    5452:	82 e0       	ldi	r24, 0x02	; 2
    5454:	60 81       	ld	r22, Z
    5456:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
			CLCD_voidSendCharacter('*');
    545a:	8a e2       	ldi	r24, 0x2A	; 42
    545c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
			FirstDigPlace++ ;
    5460:	de 01       	movw	r26, r28
    5462:	ab 58       	subi	r26, 0x8B	; 139
    5464:	bf 4f       	sbci	r27, 0xFF	; 255
    5466:	fe 01       	movw	r30, r28
    5468:	eb 58       	subi	r30, 0x8B	; 139
    546a:	ff 4f       	sbci	r31, 0xFF	; 255
    546c:	80 81       	ld	r24, Z
    546e:	8f 5f       	subi	r24, 0xFF	; 255
    5470:	8c 93       	st	X, r24
		CLCD_voidClearScreen();
		CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
		CLCD_voidSendString((u8*)"Set Password");
		CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
		CLCD_voidSendString((u8*)"Pass:");
		for(LoopIterator = 0; LoopIterator < PASS_SIZE; LoopIterator++)
    5472:	de 01       	movw	r26, r28
    5474:	ac 58       	subi	r26, 0x8C	; 140
    5476:	bf 4f       	sbci	r27, 0xFF	; 255
    5478:	fe 01       	movw	r30, r28
    547a:	ec 58       	subi	r30, 0x8C	; 140
    547c:	ff 4f       	sbci	r31, 0xFF	; 255
    547e:	80 81       	ld	r24, Z
    5480:	8f 5f       	subi	r24, 0xFF	; 255
    5482:	8c 93       	st	X, r24
    5484:	fe 01       	movw	r30, r28
    5486:	ec 58       	subi	r30, 0x8C	; 140
    5488:	ff 4f       	sbci	r31, 0xFF	; 255
    548a:	80 81       	ld	r24, Z
    548c:	84 30       	cpi	r24, 0x04	; 4
    548e:	08 f4       	brcc	.+2      	; 0x5492 <main+0x70e>
    5490:	2e cf       	rjmp	.-420    	; 0x52ee <main+0x56a>
			_delay_ms(200);
			CLCD_voidGoToX_Y(CLCD_ROW2, FirstDigPlace);
			CLCD_voidSendCharacter('*');
			FirstDigPlace++ ;
		}
		EEPROM_voidWriteBlock(PASSWORD_BASE_ADDRESS, PASS_SIZE, EnteredPassword);
    5492:	9e 01       	movw	r18, r28
    5494:	28 58       	subi	r18, 0x88	; 136
    5496:	3f 4f       	sbci	r19, 0xFF	; 255
    5498:	80 e0       	ldi	r24, 0x00	; 0
    549a:	90 e0       	ldi	r25, 0x00	; 0
    549c:	64 e0       	ldi	r22, 0x04	; 4
    549e:	a9 01       	movw	r20, r18
    54a0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <EEPROM_voidWriteBlock>
		EEPROM_voidWriteByte(FIRST_RUN_FLAG_ADDRESS, 0);
    54a4:	85 e0       	ldi	r24, 0x05	; 5
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	60 e0       	ldi	r22, 0x00	; 0
    54aa:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <EEPROM_voidWriteByte>
		CLCD_voidClearScreen();
    54ae:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
		CLCD_voidSendString((u8*)"Password Saved");
    54b2:	8e e9       	ldi	r24, 0x9E	; 158
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
    54ba:	80 e0       	ldi	r24, 0x00	; 0
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	aa e7       	ldi	r26, 0x7A	; 122
    54c0:	b4 e4       	ldi	r27, 0x44	; 68
    54c2:	8d ab       	std	Y+53, r24	; 0x35
    54c4:	9e ab       	std	Y+54, r25	; 0x36
    54c6:	af ab       	std	Y+55, r26	; 0x37
    54c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54ca:	6d a9       	ldd	r22, Y+53	; 0x35
    54cc:	7e a9       	ldd	r23, Y+54	; 0x36
    54ce:	8f a9       	ldd	r24, Y+55	; 0x37
    54d0:	98 ad       	ldd	r25, Y+56	; 0x38
    54d2:	20 e0       	ldi	r18, 0x00	; 0
    54d4:	30 e0       	ldi	r19, 0x00	; 0
    54d6:	4a ef       	ldi	r20, 0xFA	; 250
    54d8:	54 e4       	ldi	r21, 0x44	; 68
    54da:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    54de:	dc 01       	movw	r26, r24
    54e0:	cb 01       	movw	r24, r22
    54e2:	89 ab       	std	Y+49, r24	; 0x31
    54e4:	9a ab       	std	Y+50, r25	; 0x32
    54e6:	ab ab       	std	Y+51, r26	; 0x33
    54e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    54ea:	69 a9       	ldd	r22, Y+49	; 0x31
    54ec:	7a a9       	ldd	r23, Y+50	; 0x32
    54ee:	8b a9       	ldd	r24, Y+51	; 0x33
    54f0:	9c a9       	ldd	r25, Y+52	; 0x34
    54f2:	20 e0       	ldi	r18, 0x00	; 0
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	40 e8       	ldi	r20, 0x80	; 128
    54f8:	5f e3       	ldi	r21, 0x3F	; 63
    54fa:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    54fe:	88 23       	and	r24, r24
    5500:	2c f4       	brge	.+10     	; 0x550c <main+0x788>
		__ticks = 1;
    5502:	81 e0       	ldi	r24, 0x01	; 1
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	98 ab       	std	Y+48, r25	; 0x30
    5508:	8f a7       	std	Y+47, r24	; 0x2f
    550a:	3f c0       	rjmp	.+126    	; 0x558a <main+0x806>
	else if (__tmp > 65535)
    550c:	69 a9       	ldd	r22, Y+49	; 0x31
    550e:	7a a9       	ldd	r23, Y+50	; 0x32
    5510:	8b a9       	ldd	r24, Y+51	; 0x33
    5512:	9c a9       	ldd	r25, Y+52	; 0x34
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	3f ef       	ldi	r19, 0xFF	; 255
    5518:	4f e7       	ldi	r20, 0x7F	; 127
    551a:	57 e4       	ldi	r21, 0x47	; 71
    551c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5520:	18 16       	cp	r1, r24
    5522:	4c f5       	brge	.+82     	; 0x5576 <main+0x7f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5524:	6d a9       	ldd	r22, Y+53	; 0x35
    5526:	7e a9       	ldd	r23, Y+54	; 0x36
    5528:	8f a9       	ldd	r24, Y+55	; 0x37
    552a:	98 ad       	ldd	r25, Y+56	; 0x38
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	30 e0       	ldi	r19, 0x00	; 0
    5530:	40 e2       	ldi	r20, 0x20	; 32
    5532:	51 e4       	ldi	r21, 0x41	; 65
    5534:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5538:	dc 01       	movw	r26, r24
    553a:	cb 01       	movw	r24, r22
    553c:	bc 01       	movw	r22, r24
    553e:	cd 01       	movw	r24, r26
    5540:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5544:	dc 01       	movw	r26, r24
    5546:	cb 01       	movw	r24, r22
    5548:	98 ab       	std	Y+48, r25	; 0x30
    554a:	8f a7       	std	Y+47, r24	; 0x2f
    554c:	0f c0       	rjmp	.+30     	; 0x556c <main+0x7e8>
    554e:	88 ec       	ldi	r24, 0xC8	; 200
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	9e a7       	std	Y+46, r25	; 0x2e
    5554:	8d a7       	std	Y+45, r24	; 0x2d
    5556:	8d a5       	ldd	r24, Y+45	; 0x2d
    5558:	9e a5       	ldd	r25, Y+46	; 0x2e
    555a:	01 97       	sbiw	r24, 0x01	; 1
    555c:	f1 f7       	brne	.-4      	; 0x555a <main+0x7d6>
    555e:	9e a7       	std	Y+46, r25	; 0x2e
    5560:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5562:	8f a5       	ldd	r24, Y+47	; 0x2f
    5564:	98 a9       	ldd	r25, Y+48	; 0x30
    5566:	01 97       	sbiw	r24, 0x01	; 1
    5568:	98 ab       	std	Y+48, r25	; 0x30
    556a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    556c:	8f a5       	ldd	r24, Y+47	; 0x2f
    556e:	98 a9       	ldd	r25, Y+48	; 0x30
    5570:	00 97       	sbiw	r24, 0x00	; 0
    5572:	69 f7       	brne	.-38     	; 0x554e <main+0x7ca>
    5574:	14 c0       	rjmp	.+40     	; 0x559e <main+0x81a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5576:	69 a9       	ldd	r22, Y+49	; 0x31
    5578:	7a a9       	ldd	r23, Y+50	; 0x32
    557a:	8b a9       	ldd	r24, Y+51	; 0x33
    557c:	9c a9       	ldd	r25, Y+52	; 0x34
    557e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5582:	dc 01       	movw	r26, r24
    5584:	cb 01       	movw	r24, r22
    5586:	98 ab       	std	Y+48, r25	; 0x30
    5588:	8f a7       	std	Y+47, r24	; 0x2f
    558a:	8f a5       	ldd	r24, Y+47	; 0x2f
    558c:	98 a9       	ldd	r25, Y+48	; 0x30
    558e:	9c a7       	std	Y+44, r25	; 0x2c
    5590:	8b a7       	std	Y+43, r24	; 0x2b
    5592:	8b a5       	ldd	r24, Y+43	; 0x2b
    5594:	9c a5       	ldd	r25, Y+44	; 0x2c
    5596:	01 97       	sbiw	r24, 0x01	; 1
    5598:	f1 f7       	brne	.-4      	; 0x5596 <main+0x812>
    559a:	9c a7       	std	Y+44, r25	; 0x2c
    559c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		CLCD_voidClearScreen();
    559e:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
		EEPROM_voidReadByte(FIRST_RUN_FLAG_ADDRESS,&FirstTimeLogin);
    55a2:	9e 01       	movw	r18, r28
    55a4:	29 58       	subi	r18, 0x89	; 137
    55a6:	3f 4f       	sbci	r19, 0xFF	; 255
    55a8:	85 e0       	ldi	r24, 0x05	; 5
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	b9 01       	movw	r22, r18
    55ae:	0e 94 31 15 	call	0x2a62	; 0x2a62 <EEPROM_voidReadByte>
		FirstDigPlace = 6;
    55b2:	fe 01       	movw	r30, r28
    55b4:	eb 58       	subi	r30, 0x8B	; 139
    55b6:	ff 4f       	sbci	r31, 0xFF	; 255
    55b8:	86 e0       	ldi	r24, 0x06	; 6
    55ba:	80 83       	st	Z, r24
		Pressed_Key =NOT_PRESSED;
    55bc:	fe 01       	movw	r30, r28
    55be:	ea 58       	subi	r30, 0x8A	; 138
    55c0:	ff 4f       	sbci	r31, 0xFF	; 255
    55c2:	10 82       	st	Z, r1
	MASTER.Spi_DataOrder = SPI_MSB_FIRST;
	MASTER.Spi_Speed = FCLK_16;
	MASTER.Spi_State = SPI_ENABLE;
	SPI_u8SetMasterConfigs(&MASTER);

	while(FirstTimeLogin == 0xFF)
    55c4:	fe 01       	movw	r30, r28
    55c6:	e9 58       	subi	r30, 0x89	; 137
    55c8:	ff 4f       	sbci	r31, 0xFF	; 255
    55ca:	80 81       	ld	r24, Z
    55cc:	8f 3f       	cpi	r24, 0xFF	; 255
    55ce:	09 f4       	brne	.+2      	; 0x55d2 <main+0x84e>
    55d0:	f3 cc       	rjmp	.-1562   	; 0x4fb8 <main+0x234>
    55d2:	9d c1       	rjmp	.+826    	; 0x590e <main+0xb8a>

	while(1)
	{

		while( (NumberOfTries>0 ) && (Local_u8LoginFinished == 0 ) ){
			CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
    55d4:	81 e0       	ldi	r24, 0x01	; 1
    55d6:	61 e0       	ldi	r22, 0x01	; 1
    55d8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
			CLCD_voidSendString((u8*)"Plz,Enter Pass");
    55dc:	8d ea       	ldi	r24, 0xAD	; 173
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
			CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
    55e4:	82 e0       	ldi	r24, 0x02	; 2
    55e6:	61 e0       	ldi	r22, 0x01	; 1
    55e8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
			CLCD_voidSendString((u8*)"Pass:");
    55ec:	88 e9       	ldi	r24, 0x98	; 152
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
			for(LoopIterator = 0; LoopIterator < PASS_SIZE; LoopIterator++)
    55f4:	fe 01       	movw	r30, r28
    55f6:	ec 58       	subi	r30, 0x8C	; 140
    55f8:	ff 4f       	sbci	r31, 0xFF	; 255
    55fa:	10 82       	st	Z, r1
    55fc:	bc c0       	rjmp	.+376    	; 0x5776 <main+0x9f2>
			{
				do
				{
					Pressed_Key = KEYPAD_voidGetPressedButton();
    55fe:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <KEYPAD_voidGetPressedButton>
    5602:	fe 01       	movw	r30, r28
    5604:	ea 58       	subi	r30, 0x8A	; 138
    5606:	ff 4f       	sbci	r31, 0xFF	; 255
    5608:	80 83       	st	Z, r24
				}while(Pressed_Key == NOT_PRESSED);
    560a:	fe 01       	movw	r30, r28
    560c:	ea 58       	subi	r30, 0x8A	; 138
    560e:	ff 4f       	sbci	r31, 0xFF	; 255
    5610:	80 81       	ld	r24, Z
    5612:	88 23       	and	r24, r24
    5614:	a1 f3       	breq	.-24     	; 0x55fe <main+0x87a>
				CLCD_voidGoToX_Y(CLCD_ROW2, FirstDigPlace);
    5616:	fe 01       	movw	r30, r28
    5618:	eb 58       	subi	r30, 0x8B	; 139
    561a:	ff 4f       	sbci	r31, 0xFF	; 255
    561c:	82 e0       	ldi	r24, 0x02	; 2
    561e:	60 81       	ld	r22, Z
    5620:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
				CLCD_voidSendCharacter(Pressed_Key);
    5624:	fe 01       	movw	r30, r28
    5626:	ea 58       	subi	r30, 0x8A	; 138
    5628:	ff 4f       	sbci	r31, 0xFF	; 255
    562a:	80 81       	ld	r24, Z
    562c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
    5630:	80 e0       	ldi	r24, 0x00	; 0
    5632:	90 e0       	ldi	r25, 0x00	; 0
    5634:	a8 e4       	ldi	r26, 0x48	; 72
    5636:	b3 e4       	ldi	r27, 0x43	; 67
    5638:	8f a3       	std	Y+39, r24	; 0x27
    563a:	98 a7       	std	Y+40, r25	; 0x28
    563c:	a9 a7       	std	Y+41, r26	; 0x29
    563e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5640:	6f a1       	ldd	r22, Y+39	; 0x27
    5642:	78 a5       	ldd	r23, Y+40	; 0x28
    5644:	89 a5       	ldd	r24, Y+41	; 0x29
    5646:	9a a5       	ldd	r25, Y+42	; 0x2a
    5648:	20 e0       	ldi	r18, 0x00	; 0
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	4a ef       	ldi	r20, 0xFA	; 250
    564e:	54 e4       	ldi	r21, 0x44	; 68
    5650:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5654:	dc 01       	movw	r26, r24
    5656:	cb 01       	movw	r24, r22
    5658:	8b a3       	std	Y+35, r24	; 0x23
    565a:	9c a3       	std	Y+36, r25	; 0x24
    565c:	ad a3       	std	Y+37, r26	; 0x25
    565e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5660:	6b a1       	ldd	r22, Y+35	; 0x23
    5662:	7c a1       	ldd	r23, Y+36	; 0x24
    5664:	8d a1       	ldd	r24, Y+37	; 0x25
    5666:	9e a1       	ldd	r25, Y+38	; 0x26
    5668:	20 e0       	ldi	r18, 0x00	; 0
    566a:	30 e0       	ldi	r19, 0x00	; 0
    566c:	40 e8       	ldi	r20, 0x80	; 128
    566e:	5f e3       	ldi	r21, 0x3F	; 63
    5670:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5674:	88 23       	and	r24, r24
    5676:	2c f4       	brge	.+10     	; 0x5682 <main+0x8fe>
		__ticks = 1;
    5678:	81 e0       	ldi	r24, 0x01	; 1
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	9a a3       	std	Y+34, r25	; 0x22
    567e:	89 a3       	std	Y+33, r24	; 0x21
    5680:	3f c0       	rjmp	.+126    	; 0x5700 <main+0x97c>
	else if (__tmp > 65535)
    5682:	6b a1       	ldd	r22, Y+35	; 0x23
    5684:	7c a1       	ldd	r23, Y+36	; 0x24
    5686:	8d a1       	ldd	r24, Y+37	; 0x25
    5688:	9e a1       	ldd	r25, Y+38	; 0x26
    568a:	20 e0       	ldi	r18, 0x00	; 0
    568c:	3f ef       	ldi	r19, 0xFF	; 255
    568e:	4f e7       	ldi	r20, 0x7F	; 127
    5690:	57 e4       	ldi	r21, 0x47	; 71
    5692:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5696:	18 16       	cp	r1, r24
    5698:	4c f5       	brge	.+82     	; 0x56ec <main+0x968>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    569a:	6f a1       	ldd	r22, Y+39	; 0x27
    569c:	78 a5       	ldd	r23, Y+40	; 0x28
    569e:	89 a5       	ldd	r24, Y+41	; 0x29
    56a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    56a2:	20 e0       	ldi	r18, 0x00	; 0
    56a4:	30 e0       	ldi	r19, 0x00	; 0
    56a6:	40 e2       	ldi	r20, 0x20	; 32
    56a8:	51 e4       	ldi	r21, 0x41	; 65
    56aa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    56ae:	dc 01       	movw	r26, r24
    56b0:	cb 01       	movw	r24, r22
    56b2:	bc 01       	movw	r22, r24
    56b4:	cd 01       	movw	r24, r26
    56b6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	9a a3       	std	Y+34, r25	; 0x22
    56c0:	89 a3       	std	Y+33, r24	; 0x21
    56c2:	0f c0       	rjmp	.+30     	; 0x56e2 <main+0x95e>
    56c4:	88 ec       	ldi	r24, 0xC8	; 200
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	98 a3       	std	Y+32, r25	; 0x20
    56ca:	8f 8f       	std	Y+31, r24	; 0x1f
    56cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    56ce:	98 a1       	ldd	r25, Y+32	; 0x20
    56d0:	01 97       	sbiw	r24, 0x01	; 1
    56d2:	f1 f7       	brne	.-4      	; 0x56d0 <main+0x94c>
    56d4:	98 a3       	std	Y+32, r25	; 0x20
    56d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56d8:	89 a1       	ldd	r24, Y+33	; 0x21
    56da:	9a a1       	ldd	r25, Y+34	; 0x22
    56dc:	01 97       	sbiw	r24, 0x01	; 1
    56de:	9a a3       	std	Y+34, r25	; 0x22
    56e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56e2:	89 a1       	ldd	r24, Y+33	; 0x21
    56e4:	9a a1       	ldd	r25, Y+34	; 0x22
    56e6:	00 97       	sbiw	r24, 0x00	; 0
    56e8:	69 f7       	brne	.-38     	; 0x56c4 <main+0x940>
    56ea:	14 c0       	rjmp	.+40     	; 0x5714 <main+0x990>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56ec:	6b a1       	ldd	r22, Y+35	; 0x23
    56ee:	7c a1       	ldd	r23, Y+36	; 0x24
    56f0:	8d a1       	ldd	r24, Y+37	; 0x25
    56f2:	9e a1       	ldd	r25, Y+38	; 0x26
    56f4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    56f8:	dc 01       	movw	r26, r24
    56fa:	cb 01       	movw	r24, r22
    56fc:	9a a3       	std	Y+34, r25	; 0x22
    56fe:	89 a3       	std	Y+33, r24	; 0x21
    5700:	89 a1       	ldd	r24, Y+33	; 0x21
    5702:	9a a1       	ldd	r25, Y+34	; 0x22
    5704:	9e 8f       	std	Y+30, r25	; 0x1e
    5706:	8d 8f       	std	Y+29, r24	; 0x1d
    5708:	8d 8d       	ldd	r24, Y+29	; 0x1d
    570a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    570c:	01 97       	sbiw	r24, 0x01	; 1
    570e:	f1 f7       	brne	.-4      	; 0x570c <main+0x988>
    5710:	9e 8f       	std	Y+30, r25	; 0x1e
    5712:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);
				CLCD_voidGoToX_Y(CLCD_ROW2, FirstDigPlace);
    5714:	fe 01       	movw	r30, r28
    5716:	eb 58       	subi	r30, 0x8B	; 139
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	82 e0       	ldi	r24, 0x02	; 2
    571c:	60 81       	ld	r22, Z
    571e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
				CLCD_voidSendCharacter('*');
    5722:	8a e2       	ldi	r24, 0x2A	; 42
    5724:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <CLCD_voidSendCharacter>
				EnteredPassword[LoopIterator] = Pressed_Key;
    5728:	fe 01       	movw	r30, r28
    572a:	ec 58       	subi	r30, 0x8C	; 140
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	80 81       	ld	r24, Z
    5730:	28 2f       	mov	r18, r24
    5732:	30 e0       	ldi	r19, 0x00	; 0
    5734:	ce 01       	movw	r24, r28
    5736:	88 58       	subi	r24, 0x88	; 136
    5738:	9f 4f       	sbci	r25, 0xFF	; 255
    573a:	dc 01       	movw	r26, r24
    573c:	a2 0f       	add	r26, r18
    573e:	b3 1f       	adc	r27, r19
    5740:	fe 01       	movw	r30, r28
    5742:	ea 58       	subi	r30, 0x8A	; 138
    5744:	ff 4f       	sbci	r31, 0xFF	; 255
    5746:	80 81       	ld	r24, Z
    5748:	8c 93       	st	X, r24
				Pressed_Key = NOT_PRESSED;
    574a:	fe 01       	movw	r30, r28
    574c:	ea 58       	subi	r30, 0x8A	; 138
    574e:	ff 4f       	sbci	r31, 0xFF	; 255
    5750:	10 82       	st	Z, r1
				FirstDigPlace++;
    5752:	de 01       	movw	r26, r28
    5754:	ab 58       	subi	r26, 0x8B	; 139
    5756:	bf 4f       	sbci	r27, 0xFF	; 255
    5758:	fe 01       	movw	r30, r28
    575a:	eb 58       	subi	r30, 0x8B	; 139
    575c:	ff 4f       	sbci	r31, 0xFF	; 255
    575e:	80 81       	ld	r24, Z
    5760:	8f 5f       	subi	r24, 0xFF	; 255
    5762:	8c 93       	st	X, r24
		while( (NumberOfTries>0 ) && (Local_u8LoginFinished == 0 ) ){
			CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
			CLCD_voidSendString((u8*)"Plz,Enter Pass");
			CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
			CLCD_voidSendString((u8*)"Pass:");
			for(LoopIterator = 0; LoopIterator < PASS_SIZE; LoopIterator++)
    5764:	de 01       	movw	r26, r28
    5766:	ac 58       	subi	r26, 0x8C	; 140
    5768:	bf 4f       	sbci	r27, 0xFF	; 255
    576a:	fe 01       	movw	r30, r28
    576c:	ec 58       	subi	r30, 0x8C	; 140
    576e:	ff 4f       	sbci	r31, 0xFF	; 255
    5770:	80 81       	ld	r24, Z
    5772:	8f 5f       	subi	r24, 0xFF	; 255
    5774:	8c 93       	st	X, r24
    5776:	fe 01       	movw	r30, r28
    5778:	ec 58       	subi	r30, 0x8C	; 140
    577a:	ff 4f       	sbci	r31, 0xFF	; 255
    577c:	80 81       	ld	r24, Z
    577e:	84 30       	cpi	r24, 0x04	; 4
    5780:	08 f4       	brcc	.+2      	; 0x5784 <main+0xa00>
    5782:	3d cf       	rjmp	.-390    	; 0x55fe <main+0x87a>
				Pressed_Key = NOT_PRESSED;
				FirstDigPlace++;
			}
			/* Read Password from EEPROM and Compare With the Entered Password */

			EEPROM_voidReadBlock(PASSWORD_BASE_ADDRESS,PASS_SIZE, ReadEEPROMPassword );
    5784:	9e 01       	movw	r18, r28
    5786:	24 58       	subi	r18, 0x84	; 132
    5788:	3f 4f       	sbci	r19, 0xFF	; 255
    578a:	80 e0       	ldi	r24, 0x00	; 0
    578c:	90 e0       	ldi	r25, 0x00	; 0
    578e:	64 e0       	ldi	r22, 0x04	; 4
    5790:	a9 01       	movw	r20, r18
    5792:	0e 94 5f 15 	call	0x2abe	; 0x2abe <EEPROM_voidReadBlock>
			Local_u8Check = ComparePass(EnteredPassword, ReadEEPROMPassword, PASS_SIZE);
    5796:	ce 01       	movw	r24, r28
    5798:	88 58       	subi	r24, 0x88	; 136
    579a:	9f 4f       	sbci	r25, 0xFF	; 255
    579c:	9e 01       	movw	r18, r28
    579e:	24 58       	subi	r18, 0x84	; 132
    57a0:	3f 4f       	sbci	r19, 0xFF	; 255
    57a2:	b9 01       	movw	r22, r18
    57a4:	44 e0       	ldi	r20, 0x04	; 4
    57a6:	0e 94 87 26 	call	0x4d0e	; 0x4d0e <ComparePass>
    57aa:	fe 01       	movw	r30, r28
    57ac:	ee 58       	subi	r30, 0x8E	; 142
    57ae:	ff 4f       	sbci	r31, 0xFF	; 255
    57b0:	80 83       	st	Z, r24
			if(Local_u8Check==1)
    57b2:	fe 01       	movw	r30, r28
    57b4:	ee 58       	subi	r30, 0x8E	; 142
    57b6:	ff 4f       	sbci	r31, 0xFF	; 255
    57b8:	80 81       	ld	r24, Z
    57ba:	81 30       	cpi	r24, 0x01	; 1
    57bc:	81 f4       	brne	.+32     	; 0x57de <main+0xa5a>
			{
				CLCD_voidClearScreen();
    57be:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
				CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
    57c2:	81 e0       	ldi	r24, 0x01	; 1
    57c4:	61 e0       	ldi	r22, 0x01	; 1
    57c6:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"Welcome..");
    57ca:	8c eb       	ldi	r24, 0xBC	; 188
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
				Local_u8LoginFinished = 1;
    57d2:	fe 01       	movw	r30, r28
    57d4:	ef 58       	subi	r30, 0x8F	; 143
    57d6:	ff 4f       	sbci	r31, 0xFF	; 255
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	80 83       	st	Z, r24
    57dc:	a5 c0       	rjmp	.+330    	; 0x5928 <main+0xba4>
				break;
			}
			else{
				CLCD_voidClearScreen();
    57de:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
				CLCD_voidGoToX_Y(CLCD_ROW1, CLCD_COL1);
    57e2:	81 e0       	ldi	r24, 0x01	; 1
    57e4:	61 e0       	ldi	r22, 0x01	; 1
    57e6:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"Wrong PassWord..");
    57ea:	86 ec       	ldi	r24, 0xC6	; 198
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
				CLCD_voidGoToX_Y(CLCD_ROW2, CLCD_COL1);
    57f2:	82 e0       	ldi	r24, 0x02	; 2
    57f4:	61 e0       	ldi	r22, 0x01	; 1
    57f6:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
				CLCD_voidSendString((u8*)"Try again ");
    57fa:	87 ed       	ldi	r24, 0xD7	; 215
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
    5802:	80 e0       	ldi	r24, 0x00	; 0
    5804:	90 e0       	ldi	r25, 0x00	; 0
    5806:	aa e7       	ldi	r26, 0x7A	; 122
    5808:	b4 e4       	ldi	r27, 0x44	; 68
    580a:	89 8f       	std	Y+25, r24	; 0x19
    580c:	9a 8f       	std	Y+26, r25	; 0x1a
    580e:	ab 8f       	std	Y+27, r26	; 0x1b
    5810:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5812:	69 8d       	ldd	r22, Y+25	; 0x19
    5814:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5816:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5818:	9c 8d       	ldd	r25, Y+28	; 0x1c
    581a:	20 e0       	ldi	r18, 0x00	; 0
    581c:	30 e0       	ldi	r19, 0x00	; 0
    581e:	4a ef       	ldi	r20, 0xFA	; 250
    5820:	54 e4       	ldi	r21, 0x44	; 68
    5822:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	8d 8b       	std	Y+21, r24	; 0x15
    582c:	9e 8b       	std	Y+22, r25	; 0x16
    582e:	af 8b       	std	Y+23, r26	; 0x17
    5830:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5832:	6d 89       	ldd	r22, Y+21	; 0x15
    5834:	7e 89       	ldd	r23, Y+22	; 0x16
    5836:	8f 89       	ldd	r24, Y+23	; 0x17
    5838:	98 8d       	ldd	r25, Y+24	; 0x18
    583a:	20 e0       	ldi	r18, 0x00	; 0
    583c:	30 e0       	ldi	r19, 0x00	; 0
    583e:	40 e8       	ldi	r20, 0x80	; 128
    5840:	5f e3       	ldi	r21, 0x3F	; 63
    5842:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5846:	88 23       	and	r24, r24
    5848:	2c f4       	brge	.+10     	; 0x5854 <main+0xad0>
		__ticks = 1;
    584a:	81 e0       	ldi	r24, 0x01	; 1
    584c:	90 e0       	ldi	r25, 0x00	; 0
    584e:	9c 8b       	std	Y+20, r25	; 0x14
    5850:	8b 8b       	std	Y+19, r24	; 0x13
    5852:	3f c0       	rjmp	.+126    	; 0x58d2 <main+0xb4e>
	else if (__tmp > 65535)
    5854:	6d 89       	ldd	r22, Y+21	; 0x15
    5856:	7e 89       	ldd	r23, Y+22	; 0x16
    5858:	8f 89       	ldd	r24, Y+23	; 0x17
    585a:	98 8d       	ldd	r25, Y+24	; 0x18
    585c:	20 e0       	ldi	r18, 0x00	; 0
    585e:	3f ef       	ldi	r19, 0xFF	; 255
    5860:	4f e7       	ldi	r20, 0x7F	; 127
    5862:	57 e4       	ldi	r21, 0x47	; 71
    5864:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5868:	18 16       	cp	r1, r24
    586a:	4c f5       	brge	.+82     	; 0x58be <main+0xb3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    586c:	69 8d       	ldd	r22, Y+25	; 0x19
    586e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5874:	20 e0       	ldi	r18, 0x00	; 0
    5876:	30 e0       	ldi	r19, 0x00	; 0
    5878:	40 e2       	ldi	r20, 0x20	; 32
    587a:	51 e4       	ldi	r21, 0x41	; 65
    587c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5880:	dc 01       	movw	r26, r24
    5882:	cb 01       	movw	r24, r22
    5884:	bc 01       	movw	r22, r24
    5886:	cd 01       	movw	r24, r26
    5888:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	9c 8b       	std	Y+20, r25	; 0x14
    5892:	8b 8b       	std	Y+19, r24	; 0x13
    5894:	0f c0       	rjmp	.+30     	; 0x58b4 <main+0xb30>
    5896:	88 ec       	ldi	r24, 0xC8	; 200
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	9a 8b       	std	Y+18, r25	; 0x12
    589c:	89 8b       	std	Y+17, r24	; 0x11
    589e:	89 89       	ldd	r24, Y+17	; 0x11
    58a0:	9a 89       	ldd	r25, Y+18	; 0x12
    58a2:	01 97       	sbiw	r24, 0x01	; 1
    58a4:	f1 f7       	brne	.-4      	; 0x58a2 <main+0xb1e>
    58a6:	9a 8b       	std	Y+18, r25	; 0x12
    58a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58aa:	8b 89       	ldd	r24, Y+19	; 0x13
    58ac:	9c 89       	ldd	r25, Y+20	; 0x14
    58ae:	01 97       	sbiw	r24, 0x01	; 1
    58b0:	9c 8b       	std	Y+20, r25	; 0x14
    58b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58b4:	8b 89       	ldd	r24, Y+19	; 0x13
    58b6:	9c 89       	ldd	r25, Y+20	; 0x14
    58b8:	00 97       	sbiw	r24, 0x00	; 0
    58ba:	69 f7       	brne	.-38     	; 0x5896 <main+0xb12>
    58bc:	14 c0       	rjmp	.+40     	; 0x58e6 <main+0xb62>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58be:	6d 89       	ldd	r22, Y+21	; 0x15
    58c0:	7e 89       	ldd	r23, Y+22	; 0x16
    58c2:	8f 89       	ldd	r24, Y+23	; 0x17
    58c4:	98 8d       	ldd	r25, Y+24	; 0x18
    58c6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    58ca:	dc 01       	movw	r26, r24
    58cc:	cb 01       	movw	r24, r22
    58ce:	9c 8b       	std	Y+20, r25	; 0x14
    58d0:	8b 8b       	std	Y+19, r24	; 0x13
    58d2:	8b 89       	ldd	r24, Y+19	; 0x13
    58d4:	9c 89       	ldd	r25, Y+20	; 0x14
    58d6:	98 8b       	std	Y+16, r25	; 0x10
    58d8:	8f 87       	std	Y+15, r24	; 0x0f
    58da:	8f 85       	ldd	r24, Y+15	; 0x0f
    58dc:	98 89       	ldd	r25, Y+16	; 0x10
    58de:	01 97       	sbiw	r24, 0x01	; 1
    58e0:	f1 f7       	brne	.-4      	; 0x58de <main+0xb5a>
    58e2:	98 8b       	std	Y+16, r25	; 0x10
    58e4:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				CLCD_voidClearScreen();
    58e6:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
				Local_u8LoginFinished = 0;
    58ea:	fe 01       	movw	r30, r28
    58ec:	ef 58       	subi	r30, 0x8F	; 143
    58ee:	ff 4f       	sbci	r31, 0xFF	; 255
    58f0:	10 82       	st	Z, r1
				NumberOfTries -=1;
    58f2:	fe 01       	movw	r30, r28
    58f4:	ed 58       	subi	r30, 0x8D	; 141
    58f6:	ff 4f       	sbci	r31, 0xFF	; 255
    58f8:	80 81       	ld	r24, Z
    58fa:	81 50       	subi	r24, 0x01	; 1
    58fc:	fe 01       	movw	r30, r28
    58fe:	ed 58       	subi	r30, 0x8D	; 141
    5900:	ff 4f       	sbci	r31, 0xFF	; 255
    5902:	80 83       	st	Z, r24
				FirstDigPlace = 6;
    5904:	fe 01       	movw	r30, r28
    5906:	eb 58       	subi	r30, 0x8B	; 139
    5908:	ff 4f       	sbci	r31, 0xFF	; 255
    590a:	86 e0       	ldi	r24, 0x06	; 6
    590c:	80 83       	st	Z, r24
	}

	while(1)
	{

		while( (NumberOfTries>0 ) && (Local_u8LoginFinished == 0 ) ){
    590e:	fe 01       	movw	r30, r28
    5910:	ed 58       	subi	r30, 0x8D	; 141
    5912:	ff 4f       	sbci	r31, 0xFF	; 255
    5914:	80 81       	ld	r24, Z
    5916:	18 16       	cp	r1, r24
    5918:	3c f4       	brge	.+14     	; 0x5928 <main+0xba4>
    591a:	fe 01       	movw	r30, r28
    591c:	ef 58       	subi	r30, 0x8F	; 143
    591e:	ff 4f       	sbci	r31, 0xFF	; 255
    5920:	80 81       	ld	r24, Z
    5922:	88 23       	and	r24, r24
    5924:	09 f4       	brne	.+2      	; 0x5928 <main+0xba4>
    5926:	56 ce       	rjmp	.-852    	; 0x55d4 <main+0x850>
				NumberOfTries -=1;
				FirstDigPlace = 6;
			}
		}

		if(Local_u8LoginFinished == 1)
    5928:	fe 01       	movw	r30, r28
    592a:	ef 58       	subi	r30, 0x8F	; 143
    592c:	ff 4f       	sbci	r31, 0xFF	; 255
    592e:	80 81       	ld	r24, Z
    5930:	81 30       	cpi	r24, 0x01	; 1
    5932:	c9 f4       	brne	.+50     	; 0x5966 <main+0xbe2>
		{
			/* Open the Door */
			SPI_u8TransmitReceive(OPEN_DOOR);
    5934:	81 e0       	ldi	r24, 0x01	; 1
    5936:	0e 94 a6 14 	call	0x294c	; 0x294c <SPI_u8TransmitReceive>
			do
			{
				Pressed_Key = KEYPAD_voidGetPressedButton();
    593a:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <KEYPAD_voidGetPressedButton>
    593e:	fe 01       	movw	r30, r28
    5940:	ea 58       	subi	r30, 0x8A	; 138
    5942:	ff 4f       	sbci	r31, 0xFF	; 255
    5944:	80 83       	st	Z, r24

			}while(Pressed_Key == NOT_PRESSED || Pressed_Key!= 'C');
    5946:	fe 01       	movw	r30, r28
    5948:	ea 58       	subi	r30, 0x8A	; 138
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	80 81       	ld	r24, Z
    594e:	88 23       	and	r24, r24
    5950:	a1 f3       	breq	.-24     	; 0x593a <main+0xbb6>
    5952:	fe 01       	movw	r30, r28
    5954:	ea 58       	subi	r30, 0x8A	; 138
    5956:	ff 4f       	sbci	r31, 0xFF	; 255
    5958:	80 81       	ld	r24, Z
    595a:	83 34       	cpi	r24, 0x43	; 67
    595c:	71 f7       	brne	.-36     	; 0x593a <main+0xbb6>
			SPI_u8TransmitReceive(CLOSE_DOOR);
    595e:	80 e0       	ldi	r24, 0x00	; 0
    5960:	0e 94 a6 14 	call	0x294c	; 0x294c <SPI_u8TransmitReceive>
    5964:	d4 cf       	rjmp	.-88     	; 0x590e <main+0xb8a>
		}
		else
		{
			CLCD_voidClearScreen();
    5966:	0e 94 cc 24 	call	0x4998	; 0x4998 <CLCD_voidClearScreen>
			CLCD_voidGoToX_Y(CLCD_ROW1 , CLCD_COL1);
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	61 e0       	ldi	r22, 0x01	; 1
    596e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
			CLCD_voidSendString((u8*)"No more tries");
    5972:	82 ee       	ldi	r24, 0xE2	; 226
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
			CLCD_voidGoToX_Y(CLCD_ROW2 , CLCD_COL1);
    597a:	82 e0       	ldi	r24, 0x02	; 2
    597c:	61 e0       	ldi	r22, 0x01	; 1
    597e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <CLCD_voidGoToX_Y>
			CLCD_voidSendString((u8*)"wait 20 sec");
    5982:	80 ef       	ldi	r24, 0xF0	; 240
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <CLCD_voidSendString>
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	90 e4       	ldi	r25, 0x40	; 64
    598e:	ac e9       	ldi	r26, 0x9C	; 156
    5990:	b6 e4       	ldi	r27, 0x46	; 70
    5992:	8b 87       	std	Y+11, r24	; 0x0b
    5994:	9c 87       	std	Y+12, r25	; 0x0c
    5996:	ad 87       	std	Y+13, r26	; 0x0d
    5998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    599a:	6b 85       	ldd	r22, Y+11	; 0x0b
    599c:	7c 85       	ldd	r23, Y+12	; 0x0c
    599e:	8d 85       	ldd	r24, Y+13	; 0x0d
    59a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	4a ef       	ldi	r20, 0xFA	; 250
    59a8:	54 e4       	ldi	r21, 0x44	; 68
    59aa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    59ae:	dc 01       	movw	r26, r24
    59b0:	cb 01       	movw	r24, r22
    59b2:	8f 83       	std	Y+7, r24	; 0x07
    59b4:	98 87       	std	Y+8, r25	; 0x08
    59b6:	a9 87       	std	Y+9, r26	; 0x09
    59b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    59ba:	6f 81       	ldd	r22, Y+7	; 0x07
    59bc:	78 85       	ldd	r23, Y+8	; 0x08
    59be:	89 85       	ldd	r24, Y+9	; 0x09
    59c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	40 e8       	ldi	r20, 0x80	; 128
    59c8:	5f e3       	ldi	r21, 0x3F	; 63
    59ca:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    59ce:	88 23       	and	r24, r24
    59d0:	2c f4       	brge	.+10     	; 0x59dc <main+0xc58>
		__ticks = 1;
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	9e 83       	std	Y+6, r25	; 0x06
    59d8:	8d 83       	std	Y+5, r24	; 0x05
    59da:	3f c0       	rjmp	.+126    	; 0x5a5a <main+0xcd6>
	else if (__tmp > 65535)
    59dc:	6f 81       	ldd	r22, Y+7	; 0x07
    59de:	78 85       	ldd	r23, Y+8	; 0x08
    59e0:	89 85       	ldd	r24, Y+9	; 0x09
    59e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59e4:	20 e0       	ldi	r18, 0x00	; 0
    59e6:	3f ef       	ldi	r19, 0xFF	; 255
    59e8:	4f e7       	ldi	r20, 0x7F	; 127
    59ea:	57 e4       	ldi	r21, 0x47	; 71
    59ec:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    59f0:	18 16       	cp	r1, r24
    59f2:	4c f5       	brge	.+82     	; 0x5a46 <main+0xcc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    59f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    59f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    59fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    59fc:	20 e0       	ldi	r18, 0x00	; 0
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	40 e2       	ldi	r20, 0x20	; 32
    5a02:	51 e4       	ldi	r21, 0x41	; 65
    5a04:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22
    5a0c:	bc 01       	movw	r22, r24
    5a0e:	cd 01       	movw	r24, r26
    5a10:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a14:	dc 01       	movw	r26, r24
    5a16:	cb 01       	movw	r24, r22
    5a18:	9e 83       	std	Y+6, r25	; 0x06
    5a1a:	8d 83       	std	Y+5, r24	; 0x05
    5a1c:	0f c0       	rjmp	.+30     	; 0x5a3c <main+0xcb8>
    5a1e:	88 ec       	ldi	r24, 0xC8	; 200
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	9c 83       	std	Y+4, r25	; 0x04
    5a24:	8b 83       	std	Y+3, r24	; 0x03
    5a26:	8b 81       	ldd	r24, Y+3	; 0x03
    5a28:	9c 81       	ldd	r25, Y+4	; 0x04
    5a2a:	01 97       	sbiw	r24, 0x01	; 1
    5a2c:	f1 f7       	brne	.-4      	; 0x5a2a <main+0xca6>
    5a2e:	9c 83       	std	Y+4, r25	; 0x04
    5a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a32:	8d 81       	ldd	r24, Y+5	; 0x05
    5a34:	9e 81       	ldd	r25, Y+6	; 0x06
    5a36:	01 97       	sbiw	r24, 0x01	; 1
    5a38:	9e 83       	std	Y+6, r25	; 0x06
    5a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a40:	00 97       	sbiw	r24, 0x00	; 0
    5a42:	69 f7       	brne	.-38     	; 0x5a1e <main+0xc9a>
    5a44:	14 c0       	rjmp	.+40     	; 0x5a6e <main+0xcea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a46:	6f 81       	ldd	r22, Y+7	; 0x07
    5a48:	78 85       	ldd	r23, Y+8	; 0x08
    5a4a:	89 85       	ldd	r24, Y+9	; 0x09
    5a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a4e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a52:	dc 01       	movw	r26, r24
    5a54:	cb 01       	movw	r24, r22
    5a56:	9e 83       	std	Y+6, r25	; 0x06
    5a58:	8d 83       	std	Y+5, r24	; 0x05
    5a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    5a5e:	9a 83       	std	Y+2, r25	; 0x02
    5a60:	89 83       	std	Y+1, r24	; 0x01
    5a62:	89 81       	ldd	r24, Y+1	; 0x01
    5a64:	9a 81       	ldd	r25, Y+2	; 0x02
    5a66:	01 97       	sbiw	r24, 0x01	; 1
    5a68:	f1 f7       	brne	.-4      	; 0x5a66 <main+0xce2>
    5a6a:	9a 83       	std	Y+2, r25	; 0x02
    5a6c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20000);
			Local_u8LoginFinished = 0;
    5a6e:	fe 01       	movw	r30, r28
    5a70:	ef 58       	subi	r30, 0x8F	; 143
    5a72:	ff 4f       	sbci	r31, 0xFF	; 255
    5a74:	10 82       	st	Z, r1
			NumberOfTries = MAX_TRIES;
    5a76:	fe 01       	movw	r30, r28
    5a78:	ed 58       	subi	r30, 0x8D	; 141
    5a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7c:	83 e0       	ldi	r24, 0x03	; 3
    5a7e:	80 83       	st	Z, r24
    5a80:	46 cf       	rjmp	.-372    	; 0x590e <main+0xb8a>

00005a82 <__mulsi3>:
    5a82:	62 9f       	mul	r22, r18
    5a84:	d0 01       	movw	r26, r0
    5a86:	73 9f       	mul	r23, r19
    5a88:	f0 01       	movw	r30, r0
    5a8a:	82 9f       	mul	r24, r18
    5a8c:	e0 0d       	add	r30, r0
    5a8e:	f1 1d       	adc	r31, r1
    5a90:	64 9f       	mul	r22, r20
    5a92:	e0 0d       	add	r30, r0
    5a94:	f1 1d       	adc	r31, r1
    5a96:	92 9f       	mul	r25, r18
    5a98:	f0 0d       	add	r31, r0
    5a9a:	83 9f       	mul	r24, r19
    5a9c:	f0 0d       	add	r31, r0
    5a9e:	74 9f       	mul	r23, r20
    5aa0:	f0 0d       	add	r31, r0
    5aa2:	65 9f       	mul	r22, r21
    5aa4:	f0 0d       	add	r31, r0
    5aa6:	99 27       	eor	r25, r25
    5aa8:	72 9f       	mul	r23, r18
    5aaa:	b0 0d       	add	r27, r0
    5aac:	e1 1d       	adc	r30, r1
    5aae:	f9 1f       	adc	r31, r25
    5ab0:	63 9f       	mul	r22, r19
    5ab2:	b0 0d       	add	r27, r0
    5ab4:	e1 1d       	adc	r30, r1
    5ab6:	f9 1f       	adc	r31, r25
    5ab8:	bd 01       	movw	r22, r26
    5aba:	cf 01       	movw	r24, r30
    5abc:	11 24       	eor	r1, r1
    5abe:	08 95       	ret

00005ac0 <__udivmodsi4>:
    5ac0:	a1 e2       	ldi	r26, 0x21	; 33
    5ac2:	1a 2e       	mov	r1, r26
    5ac4:	aa 1b       	sub	r26, r26
    5ac6:	bb 1b       	sub	r27, r27
    5ac8:	fd 01       	movw	r30, r26
    5aca:	0d c0       	rjmp	.+26     	; 0x5ae6 <__udivmodsi4_ep>

00005acc <__udivmodsi4_loop>:
    5acc:	aa 1f       	adc	r26, r26
    5ace:	bb 1f       	adc	r27, r27
    5ad0:	ee 1f       	adc	r30, r30
    5ad2:	ff 1f       	adc	r31, r31
    5ad4:	a2 17       	cp	r26, r18
    5ad6:	b3 07       	cpc	r27, r19
    5ad8:	e4 07       	cpc	r30, r20
    5ada:	f5 07       	cpc	r31, r21
    5adc:	20 f0       	brcs	.+8      	; 0x5ae6 <__udivmodsi4_ep>
    5ade:	a2 1b       	sub	r26, r18
    5ae0:	b3 0b       	sbc	r27, r19
    5ae2:	e4 0b       	sbc	r30, r20
    5ae4:	f5 0b       	sbc	r31, r21

00005ae6 <__udivmodsi4_ep>:
    5ae6:	66 1f       	adc	r22, r22
    5ae8:	77 1f       	adc	r23, r23
    5aea:	88 1f       	adc	r24, r24
    5aec:	99 1f       	adc	r25, r25
    5aee:	1a 94       	dec	r1
    5af0:	69 f7       	brne	.-38     	; 0x5acc <__udivmodsi4_loop>
    5af2:	60 95       	com	r22
    5af4:	70 95       	com	r23
    5af6:	80 95       	com	r24
    5af8:	90 95       	com	r25
    5afa:	9b 01       	movw	r18, r22
    5afc:	ac 01       	movw	r20, r24
    5afe:	bd 01       	movw	r22, r26
    5b00:	cf 01       	movw	r24, r30
    5b02:	08 95       	ret

00005b04 <__prologue_saves__>:
    5b04:	2f 92       	push	r2
    5b06:	3f 92       	push	r3
    5b08:	4f 92       	push	r4
    5b0a:	5f 92       	push	r5
    5b0c:	6f 92       	push	r6
    5b0e:	7f 92       	push	r7
    5b10:	8f 92       	push	r8
    5b12:	9f 92       	push	r9
    5b14:	af 92       	push	r10
    5b16:	bf 92       	push	r11
    5b18:	cf 92       	push	r12
    5b1a:	df 92       	push	r13
    5b1c:	ef 92       	push	r14
    5b1e:	ff 92       	push	r15
    5b20:	0f 93       	push	r16
    5b22:	1f 93       	push	r17
    5b24:	cf 93       	push	r28
    5b26:	df 93       	push	r29
    5b28:	cd b7       	in	r28, 0x3d	; 61
    5b2a:	de b7       	in	r29, 0x3e	; 62
    5b2c:	ca 1b       	sub	r28, r26
    5b2e:	db 0b       	sbc	r29, r27
    5b30:	0f b6       	in	r0, 0x3f	; 63
    5b32:	f8 94       	cli
    5b34:	de bf       	out	0x3e, r29	; 62
    5b36:	0f be       	out	0x3f, r0	; 63
    5b38:	cd bf       	out	0x3d, r28	; 61
    5b3a:	09 94       	ijmp

00005b3c <__epilogue_restores__>:
    5b3c:	2a 88       	ldd	r2, Y+18	; 0x12
    5b3e:	39 88       	ldd	r3, Y+17	; 0x11
    5b40:	48 88       	ldd	r4, Y+16	; 0x10
    5b42:	5f 84       	ldd	r5, Y+15	; 0x0f
    5b44:	6e 84       	ldd	r6, Y+14	; 0x0e
    5b46:	7d 84       	ldd	r7, Y+13	; 0x0d
    5b48:	8c 84       	ldd	r8, Y+12	; 0x0c
    5b4a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5b4c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5b4e:	b9 84       	ldd	r11, Y+9	; 0x09
    5b50:	c8 84       	ldd	r12, Y+8	; 0x08
    5b52:	df 80       	ldd	r13, Y+7	; 0x07
    5b54:	ee 80       	ldd	r14, Y+6	; 0x06
    5b56:	fd 80       	ldd	r15, Y+5	; 0x05
    5b58:	0c 81       	ldd	r16, Y+4	; 0x04
    5b5a:	1b 81       	ldd	r17, Y+3	; 0x03
    5b5c:	aa 81       	ldd	r26, Y+2	; 0x02
    5b5e:	b9 81       	ldd	r27, Y+1	; 0x01
    5b60:	ce 0f       	add	r28, r30
    5b62:	d1 1d       	adc	r29, r1
    5b64:	0f b6       	in	r0, 0x3f	; 63
    5b66:	f8 94       	cli
    5b68:	de bf       	out	0x3e, r29	; 62
    5b6a:	0f be       	out	0x3f, r0	; 63
    5b6c:	cd bf       	out	0x3d, r28	; 61
    5b6e:	ed 01       	movw	r28, r26
    5b70:	08 95       	ret

00005b72 <_exit>:
    5b72:	f8 94       	cli

00005b74 <__stop_program>:
    5b74:	ff cf       	rjmp	.-2      	; 0x5b74 <__stop_program>
